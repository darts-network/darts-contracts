/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HiveOnChainJobCreatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "disableChangeControllerAddress"
      | "getControllerAddress"
      | "getRequiredDeposit"
      | "getTokenAddress"
      | "initialize"
      | "nextJobID"
      | "owner"
      | "renounceOwnership"
      | "requiredDeposit"
      | "runJob"
      | "setControllerAddress"
      | "setRequiredDeposit"
      | "setTokenAddress"
      | "submitResults"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "JobAdded" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "disableChangeControllerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getControllerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nextJobID", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "runJob",
    values: [string, string[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequiredDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitResults",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "disableChangeControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextJobID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "runJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequiredDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    calling_contract: AddressLike,
    payee: AddressLike,
    module: string,
    inputs: string[]
  ];
  export type OutputTuple = [
    id: bigint,
    calling_contract: string,
    payee: string,
    module: string,
    inputs: string[]
  ];
  export interface OutputObject {
    id: bigint;
    calling_contract: string;
    payee: string;
    module: string;
    inputs: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HiveOnChainJobCreator extends BaseContract {
  connect(runner?: ContractRunner | null): HiveOnChainJobCreator;
  waitForDeployment(): Promise<this>;

  interface: HiveOnChainJobCreatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  disableChangeControllerAddress: TypedContractMethod<[], [void], "nonpayable">;

  getControllerAddress: TypedContractMethod<[], [string], "view">;

  getRequiredDeposit: TypedContractMethod<[], [bigint], "view">;

  getTokenAddress: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  nextJobID: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requiredDeposit: TypedContractMethod<[], [bigint], "view">;

  runJob: TypedContractMethod<
    [module: string, inputs: string[], payee: AddressLike],
    [bigint],
    "nonpayable"
  >;

  setControllerAddress: TypedContractMethod<
    [_controllerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setRequiredDeposit: TypedContractMethod<
    [cost: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenAddress: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  submitResults: TypedContractMethod<
    [id: BigNumberish, dealId: string, dataId: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "disableChangeControllerAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getControllerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRequiredDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nextJobID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requiredDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "runJob"
  ): TypedContractMethod<
    [module: string, inputs: string[], payee: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setControllerAddress"
  ): TypedContractMethod<
    [_controllerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRequiredDeposit"
  ): TypedContractMethod<[cost: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenAddress"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitResults"
  ): TypedContractMethod<
    [id: BigNumberish, dealId: string, dataId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "JobAdded"
  ): TypedContractEvent<
    JobAddedEvent.InputTuple,
    JobAddedEvent.OutputTuple,
    JobAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "JobAdded(uint256,address,address,string,string[])": TypedContractEvent<
      JobAddedEvent.InputTuple,
      JobAddedEvent.OutputTuple,
      JobAddedEvent.OutputObject
    >;
    JobAdded: TypedContractEvent<
      JobAddedEvent.InputTuple,
      JobAddedEvent.OutputTuple,
      JobAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
