/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SharedStructs {
  export type DealMembersStruct = {
    solver: AddressLike;
    jobCreator: AddressLike;
    resourceProvider: AddressLike;
    mediators: AddressLike[];
  };

  export type DealMembersStructOutput = [
    solver: string,
    jobCreator: string,
    resourceProvider: string,
    mediators: string[]
  ] & {
    solver: string;
    jobCreator: string;
    resourceProvider: string;
    mediators: string[];
  };

  export type DealTimeoutStruct = {
    timeout: BigNumberish;
    collateral: BigNumberish;
  };

  export type DealTimeoutStructOutput = [
    timeout: bigint,
    collateral: bigint
  ] & { timeout: bigint; collateral: bigint };

  export type DealTimeoutsStruct = {
    agree: SharedStructs.DealTimeoutStruct;
    submitResults: SharedStructs.DealTimeoutStruct;
    judgeResults: SharedStructs.DealTimeoutStruct;
    mediateResults: SharedStructs.DealTimeoutStruct;
  };

  export type DealTimeoutsStructOutput = [
    agree: SharedStructs.DealTimeoutStructOutput,
    submitResults: SharedStructs.DealTimeoutStructOutput,
    judgeResults: SharedStructs.DealTimeoutStructOutput,
    mediateResults: SharedStructs.DealTimeoutStructOutput
  ] & {
    agree: SharedStructs.DealTimeoutStructOutput;
    submitResults: SharedStructs.DealTimeoutStructOutput;
    judgeResults: SharedStructs.DealTimeoutStructOutput;
    mediateResults: SharedStructs.DealTimeoutStructOutput;
  };

  export type DealPricingStruct = {
    instructionPrice: BigNumberish;
    paymentCollateral: BigNumberish;
    resultsCollateralMultiple: BigNumberish;
    mediationFee: BigNumberish;
  };

  export type DealPricingStructOutput = [
    instructionPrice: bigint,
    paymentCollateral: bigint,
    resultsCollateralMultiple: bigint,
    mediationFee: bigint
  ] & {
    instructionPrice: bigint;
    paymentCollateral: bigint;
    resultsCollateralMultiple: bigint;
    mediationFee: bigint;
  };

  export type DealStruct = {
    dealId: string;
    members: SharedStructs.DealMembersStruct;
    timeouts: SharedStructs.DealTimeoutsStruct;
    pricing: SharedStructs.DealPricingStruct;
  };

  export type DealStructOutput = [
    dealId: string,
    members: SharedStructs.DealMembersStructOutput,
    timeouts: SharedStructs.DealTimeoutsStructOutput,
    pricing: SharedStructs.DealPricingStructOutput
  ] & {
    dealId: string;
    members: SharedStructs.DealMembersStructOutput;
    timeouts: SharedStructs.DealTimeoutsStructOutput;
    pricing: SharedStructs.DealPricingStructOutput;
  };
}

export interface HiveMediationRandomInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "disableChangeControllerAddress"
      | "getControllerAddress"
      | "getMediator"
      | "initialize"
      | "mediationAcceptResult"
      | "mediationRejectResult"
      | "mediationRequest"
      | "owner"
      | "renounceOwnership"
      | "setControllerAddress"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "MediationRequested"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "disableChangeControllerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getControllerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMediator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mediationAcceptResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mediationRejectResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mediationRequest",
    values: [SharedStructs.DealStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setControllerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "disableChangeControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMediator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mediationAcceptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mediationRejectResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mediationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MediationRequestedEvent {
  export type InputTuple = [dealId: string, mediator: AddressLike];
  export type OutputTuple = [dealId: string, mediator: string];
  export interface OutputObject {
    dealId: string;
    mediator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HiveMediationRandom extends BaseContract {
  connect(runner?: ContractRunner | null): HiveMediationRandom;
  waitForDeployment(): Promise<this>;

  interface: HiveMediationRandomInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  disableChangeControllerAddress: TypedContractMethod<[], [void], "nonpayable">;

  getControllerAddress: TypedContractMethod<[], [string], "view">;

  getMediator: TypedContractMethod<[dealId: string], [string], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  mediationAcceptResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  mediationRejectResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  mediationRequest: TypedContractMethod<
    [deal: SharedStructs.DealStruct],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setControllerAddress: TypedContractMethod<
    [_controllerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "disableChangeControllerAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getControllerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMediator"
  ): TypedContractMethod<[dealId: string], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mediationAcceptResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mediationRejectResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mediationRequest"
  ): TypedContractMethod<
    [deal: SharedStructs.DealStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setControllerAddress"
  ): TypedContractMethod<
    [_controllerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MediationRequested"
  ): TypedContractEvent<
    MediationRequestedEvent.InputTuple,
    MediationRequestedEvent.OutputTuple,
    MediationRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MediationRequested(string,address)": TypedContractEvent<
      MediationRequestedEvent.InputTuple,
      MediationRequestedEvent.OutputTuple,
      MediationRequestedEvent.OutputObject
    >;
    MediationRequested: TypedContractEvent<
      MediationRequestedEvent.InputTuple,
      MediationRequestedEvent.OutputTuple,
      MediationRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
