/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SharedStructs {
  export type ResultStruct = {
    dealId: string;
    resultsId: string;
    dataId: string;
    instructionCount: BigNumberish;
  };

  export type ResultStructOutput = [
    dealId: string,
    resultsId: string,
    dataId: string,
    instructionCount: bigint
  ] & {
    dealId: string;
    resultsId: string;
    dataId: string;
    instructionCount: bigint;
  };

  export type AgreementStruct = {
    state: BigNumberish;
    resourceProviderAgreedAt: BigNumberish;
    jobCreatorAgreedAt: BigNumberish;
    dealCreatedAt: BigNumberish;
    dealAgreedAt: BigNumberish;
    resultsSubmittedAt: BigNumberish;
    resultsAcceptedAt: BigNumberish;
    resultsCheckedAt: BigNumberish;
    mediationAcceptedAt: BigNumberish;
    mediationRejectedAt: BigNumberish;
    timeoutAgreeAt: BigNumberish;
    timeoutSubmitResultsAt: BigNumberish;
    timeoutJudgeResultsAt: BigNumberish;
    timeoutMediateResultsAt: BigNumberish;
  };

  export type AgreementStructOutput = [
    state: bigint,
    resourceProviderAgreedAt: bigint,
    jobCreatorAgreedAt: bigint,
    dealCreatedAt: bigint,
    dealAgreedAt: bigint,
    resultsSubmittedAt: bigint,
    resultsAcceptedAt: bigint,
    resultsCheckedAt: bigint,
    mediationAcceptedAt: bigint,
    mediationRejectedAt: bigint,
    timeoutAgreeAt: bigint,
    timeoutSubmitResultsAt: bigint,
    timeoutJudgeResultsAt: bigint,
    timeoutMediateResultsAt: bigint
  ] & {
    state: bigint;
    resourceProviderAgreedAt: bigint;
    jobCreatorAgreedAt: bigint;
    dealCreatedAt: bigint;
    dealAgreedAt: bigint;
    resultsSubmittedAt: bigint;
    resultsAcceptedAt: bigint;
    resultsCheckedAt: bigint;
    mediationAcceptedAt: bigint;
    mediationRejectedAt: bigint;
    timeoutAgreeAt: bigint;
    timeoutSubmitResultsAt: bigint;
    timeoutJudgeResultsAt: bigint;
    timeoutMediateResultsAt: bigint;
  };

  export type DealMembersStruct = {
    solver: AddressLike;
    jobCreator: AddressLike;
    resourceProvider: AddressLike;
    mediators: AddressLike[];
  };

  export type DealMembersStructOutput = [
    solver: string,
    jobCreator: string,
    resourceProvider: string,
    mediators: string[]
  ] & {
    solver: string;
    jobCreator: string;
    resourceProvider: string;
    mediators: string[];
  };

  export type DealTimeoutStruct = {
    timeout: BigNumberish;
    collateral: BigNumberish;
  };

  export type DealTimeoutStructOutput = [
    timeout: bigint,
    collateral: bigint
  ] & { timeout: bigint; collateral: bigint };

  export type DealTimeoutsStruct = {
    agree: SharedStructs.DealTimeoutStruct;
    submitResults: SharedStructs.DealTimeoutStruct;
    judgeResults: SharedStructs.DealTimeoutStruct;
    mediateResults: SharedStructs.DealTimeoutStruct;
  };

  export type DealTimeoutsStructOutput = [
    agree: SharedStructs.DealTimeoutStructOutput,
    submitResults: SharedStructs.DealTimeoutStructOutput,
    judgeResults: SharedStructs.DealTimeoutStructOutput,
    mediateResults: SharedStructs.DealTimeoutStructOutput
  ] & {
    agree: SharedStructs.DealTimeoutStructOutput;
    submitResults: SharedStructs.DealTimeoutStructOutput;
    judgeResults: SharedStructs.DealTimeoutStructOutput;
    mediateResults: SharedStructs.DealTimeoutStructOutput;
  };

  export type DealPricingStruct = {
    instructionPrice: BigNumberish;
    paymentCollateral: BigNumberish;
    resultsCollateralMultiple: BigNumberish;
    mediationFee: BigNumberish;
  };

  export type DealPricingStructOutput = [
    instructionPrice: bigint,
    paymentCollateral: bigint,
    resultsCollateralMultiple: bigint,
    mediationFee: bigint
  ] & {
    instructionPrice: bigint;
    paymentCollateral: bigint;
    resultsCollateralMultiple: bigint;
    mediationFee: bigint;
  };

  export type DealStruct = {
    dealId: string;
    members: SharedStructs.DealMembersStruct;
    timeouts: SharedStructs.DealTimeoutsStruct;
    pricing: SharedStructs.DealPricingStruct;
  };

  export type DealStructOutput = [
    dealId: string,
    members: SharedStructs.DealMembersStructOutput,
    timeouts: SharedStructs.DealTimeoutsStructOutput,
    pricing: SharedStructs.DealPricingStructOutput
  ] & {
    dealId: string;
    members: SharedStructs.DealMembersStructOutput;
    timeouts: SharedStructs.DealTimeoutsStructOutput;
    pricing: SharedStructs.DealPricingStructOutput;
  };
}

export interface IHiveStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptResult"
      | "addResult"
      | "agreeJobCreator"
      | "agreeResourceProvider"
      | "checkResult"
      | "ensureDeal"
      | "getAgreement"
      | "getDeal"
      | "getDealsForParty"
      | "getJobCost"
      | "getResult"
      | "getResultsCollateral"
      | "hasDeal"
      | "isState"
      | "mediationAcceptResult"
      | "mediationRejectResult"
      | "timeoutAgree"
      | "timeoutJudgeResult"
      | "timeoutMediateResult"
      | "timeoutSubmitResult"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addResult",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "agreeJobCreator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "agreeResourceProvider",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "checkResult", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ensureDeal",
    values: [
      string,
      SharedStructs.DealMembersStruct,
      SharedStructs.DealTimeoutsStruct,
      SharedStructs.DealPricingStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreement",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getDeal", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDealsForParty",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getJobCost", values: [string]): string;
  encodeFunctionData(functionFragment: "getResult", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getResultsCollateral",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "hasDeal", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isState",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mediationAcceptResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mediationRejectResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutAgree",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutJudgeResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutMediateResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutSubmitResult",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "agreeJobCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agreeResourceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ensureDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDealsForParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getJobCost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getResultsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasDeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mediationAcceptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mediationRejectResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutAgree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutJudgeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutMediateResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutSubmitResult",
    data: BytesLike
  ): Result;
}

export interface IHiveStorage extends BaseContract {
  connect(runner?: ContractRunner | null): IHiveStorage;
  waitForDeployment(): Promise<this>;

  interface: IHiveStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptResult: TypedContractMethod<[dealId: string], [void], "nonpayable">;

  addResult: TypedContractMethod<
    [
      dealId: string,
      resultsId: string,
      dataId: string,
      instructionCount: BigNumberish
    ],
    [SharedStructs.ResultStructOutput],
    "nonpayable"
  >;

  agreeJobCreator: TypedContractMethod<
    [dealId: string],
    [SharedStructs.AgreementStructOutput],
    "nonpayable"
  >;

  agreeResourceProvider: TypedContractMethod<
    [dealId: string],
    [SharedStructs.AgreementStructOutput],
    "nonpayable"
  >;

  checkResult: TypedContractMethod<[dealId: string], [void], "nonpayable">;

  ensureDeal: TypedContractMethod<
    [
      dealId: string,
      members: SharedStructs.DealMembersStruct,
      timeouts: SharedStructs.DealTimeoutsStruct,
      pricing: SharedStructs.DealPricingStruct
    ],
    [SharedStructs.DealStructOutput],
    "nonpayable"
  >;

  getAgreement: TypedContractMethod<
    [dealId: string],
    [SharedStructs.AgreementStructOutput],
    "nonpayable"
  >;

  getDeal: TypedContractMethod<
    [dealId: string],
    [SharedStructs.DealStructOutput],
    "nonpayable"
  >;

  getDealsForParty: TypedContractMethod<
    [party: AddressLike],
    [bigint[]],
    "nonpayable"
  >;

  getJobCost: TypedContractMethod<[dealId: string], [bigint], "nonpayable">;

  getResult: TypedContractMethod<
    [dealId: string],
    [SharedStructs.ResultStructOutput],
    "nonpayable"
  >;

  getResultsCollateral: TypedContractMethod<
    [dealId: string],
    [bigint],
    "nonpayable"
  >;

  hasDeal: TypedContractMethod<[dealId: string], [boolean], "nonpayable">;

  isState: TypedContractMethod<
    [dealId: string, state: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  mediationAcceptResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  mediationRejectResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  timeoutAgree: TypedContractMethod<[dealId: string], [void], "nonpayable">;

  timeoutJudgeResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  timeoutMediateResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  timeoutSubmitResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resultsId: string,
      dataId: string,
      instructionCount: BigNumberish
    ],
    [SharedStructs.ResultStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agreeJobCreator"
  ): TypedContractMethod<
    [dealId: string],
    [SharedStructs.AgreementStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agreeResourceProvider"
  ): TypedContractMethod<
    [dealId: string],
    [SharedStructs.AgreementStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ensureDeal"
  ): TypedContractMethod<
    [
      dealId: string,
      members: SharedStructs.DealMembersStruct,
      timeouts: SharedStructs.DealTimeoutsStruct,
      pricing: SharedStructs.DealPricingStruct
    ],
    [SharedStructs.DealStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAgreement"
  ): TypedContractMethod<
    [dealId: string],
    [SharedStructs.AgreementStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDeal"
  ): TypedContractMethod<
    [dealId: string],
    [SharedStructs.DealStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDealsForParty"
  ): TypedContractMethod<[party: AddressLike], [bigint[]], "nonpayable">;
  getFunction(
    nameOrSignature: "getJobCost"
  ): TypedContractMethod<[dealId: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getResult"
  ): TypedContractMethod<
    [dealId: string],
    [SharedStructs.ResultStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getResultsCollateral"
  ): TypedContractMethod<[dealId: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "hasDeal"
  ): TypedContractMethod<[dealId: string], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "isState"
  ): TypedContractMethod<
    [dealId: string, state: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mediationAcceptResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mediationRejectResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeoutAgree"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeoutJudgeResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeoutMediateResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeoutSubmitResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;

  filters: {};
}
