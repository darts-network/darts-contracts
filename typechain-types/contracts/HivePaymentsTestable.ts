/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HivePaymentsTestableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptResult"
      | "addResult"
      | "agreeJobCreator"
      | "agreeResourceProvider"
      | "checkResult"
      | "disableChangeControllerAddress"
      | "disableChangeTokenAddress"
      | "getControllerAddress"
      | "getTokenAddress"
      | "initialize"
      | "mediationAcceptResult"
      | "mediationRejectResult"
      | "owner"
      | "renounceOwnership"
      | "setControllerAddress"
      | "setTokenAddress"
      | "timeoutAgreeRefundJobCreator"
      | "timeoutAgreeRefundResourceProvider"
      | "timeoutJudgeResults"
      | "timeoutMediateResult"
      | "timeoutSubmitResults"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred" | "Payment"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptResult",
    values: [
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addResult",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "agreeJobCreator",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "agreeResourceProvider",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkResult",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableChangeControllerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableChangeTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getControllerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mediationAcceptResult",
    values: [
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mediationRejectResult",
    values: [
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setControllerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutAgreeRefundJobCreator",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutAgreeRefundResourceProvider",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutJudgeResults",
    values: [string, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutMediateResult",
    values: [
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutSubmitResults",
    values: [string, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "agreeJobCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agreeResourceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableChangeControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableChangeTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mediationAcceptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mediationRejectResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutAgreeRefundJobCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutAgreeRefundResourceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutJudgeResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutMediateResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutSubmitResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentEvent {
  export type InputTuple = [
    dealId: string,
    payee: AddressLike,
    amount: BigNumberish,
    reason: BigNumberish,
    direction: BigNumberish
  ];
  export type OutputTuple = [
    dealId: string,
    payee: string,
    amount: bigint,
    reason: bigint,
    direction: bigint
  ];
  export interface OutputObject {
    dealId: string;
    payee: string;
    amount: bigint;
    reason: bigint;
    direction: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HivePaymentsTestable extends BaseContract {
  connect(runner?: ContractRunner | null): HivePaymentsTestable;
  waitForDeployment(): Promise<this>;

  interface: HivePaymentsTestableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      jobCost: BigNumberish,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  agreeJobCreator: TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  agreeResourceProvider: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  checkResult: TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      timeoutCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  disableChangeControllerAddress: TypedContractMethod<[], [void], "nonpayable">;

  disableChangeTokenAddress: TypedContractMethod<[], [void], "nonpayable">;

  getControllerAddress: TypedContractMethod<[], [string], "view">;

  getTokenAddress: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  mediationAcceptResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      jobCost: BigNumberish,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  mediationRejectResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setControllerAddress: TypedContractMethod<
    [_controllerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenAddress: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  timeoutAgreeRefundJobCreator: TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  timeoutAgreeRefundResourceProvider: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  timeoutJudgeResults: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  timeoutMediateResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  timeoutSubmitResults: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      jobCost: BigNumberish,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agreeJobCreator"
  ): TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agreeResourceProvider"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkResult"
  ): TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      timeoutCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableChangeControllerAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableChangeTokenAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getControllerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mediationAcceptResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      jobCost: BigNumberish,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mediationRejectResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setControllerAddress"
  ): TypedContractMethod<
    [_controllerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenAddress"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeoutAgreeRefundJobCreator"
  ): TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeoutAgreeRefundResourceProvider"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeoutJudgeResults"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeoutMediateResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeoutSubmitResults"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Payment"
  ): TypedContractEvent<
    PaymentEvent.InputTuple,
    PaymentEvent.OutputTuple,
    PaymentEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Payment(string,address,uint256,uint8,uint8)": TypedContractEvent<
      PaymentEvent.InputTuple,
      PaymentEvent.OutputTuple,
      PaymentEvent.OutputObject
    >;
    Payment: TypedContractEvent<
      PaymentEvent.InputTuple,
      PaymentEvent.OutputTuple,
      PaymentEvent.OutputObject
    >;
  };
}
