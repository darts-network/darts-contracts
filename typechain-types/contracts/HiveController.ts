/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SharedStructs {
  export type DealMembersStruct = {
    solver: AddressLike;
    jobCreator: AddressLike;
    resourceProvider: AddressLike;
    mediators: AddressLike[];
  };

  export type DealMembersStructOutput = [
    solver: string,
    jobCreator: string,
    resourceProvider: string,
    mediators: string[]
  ] & {
    solver: string;
    jobCreator: string;
    resourceProvider: string;
    mediators: string[];
  };

  export type DealTimeoutStruct = {
    timeout: BigNumberish;
    collateral: BigNumberish;
  };

  export type DealTimeoutStructOutput = [
    timeout: bigint,
    collateral: bigint
  ] & { timeout: bigint; collateral: bigint };

  export type DealTimeoutsStruct = {
    agree: SharedStructs.DealTimeoutStruct;
    submitResults: SharedStructs.DealTimeoutStruct;
    judgeResults: SharedStructs.DealTimeoutStruct;
    mediateResults: SharedStructs.DealTimeoutStruct;
  };

  export type DealTimeoutsStructOutput = [
    agree: SharedStructs.DealTimeoutStructOutput,
    submitResults: SharedStructs.DealTimeoutStructOutput,
    judgeResults: SharedStructs.DealTimeoutStructOutput,
    mediateResults: SharedStructs.DealTimeoutStructOutput
  ] & {
    agree: SharedStructs.DealTimeoutStructOutput;
    submitResults: SharedStructs.DealTimeoutStructOutput;
    judgeResults: SharedStructs.DealTimeoutStructOutput;
    mediateResults: SharedStructs.DealTimeoutStructOutput;
  };

  export type DealPricingStruct = {
    instructionPrice: BigNumberish;
    paymentCollateral: BigNumberish;
    resultsCollateralMultiple: BigNumberish;
    mediationFee: BigNumberish;
  };

  export type DealPricingStructOutput = [
    instructionPrice: bigint,
    paymentCollateral: bigint,
    resultsCollateralMultiple: bigint,
    mediationFee: bigint
  ] & {
    instructionPrice: bigint;
    paymentCollateral: bigint;
    resultsCollateralMultiple: bigint;
    mediationFee: bigint;
  };

  export type AgreementStruct = {
    state: BigNumberish;
    resourceProviderAgreedAt: BigNumberish;
    jobCreatorAgreedAt: BigNumberish;
    dealCreatedAt: BigNumberish;
    dealAgreedAt: BigNumberish;
    resultsSubmittedAt: BigNumberish;
    resultsAcceptedAt: BigNumberish;
    resultsCheckedAt: BigNumberish;
    mediationAcceptedAt: BigNumberish;
    mediationRejectedAt: BigNumberish;
    timeoutAgreeAt: BigNumberish;
    timeoutSubmitResultsAt: BigNumberish;
    timeoutJudgeResultsAt: BigNumberish;
    timeoutMediateResultsAt: BigNumberish;
  };

  export type AgreementStructOutput = [
    state: bigint,
    resourceProviderAgreedAt: bigint,
    jobCreatorAgreedAt: bigint,
    dealCreatedAt: bigint,
    dealAgreedAt: bigint,
    resultsSubmittedAt: bigint,
    resultsAcceptedAt: bigint,
    resultsCheckedAt: bigint,
    mediationAcceptedAt: bigint,
    mediationRejectedAt: bigint,
    timeoutAgreeAt: bigint,
    timeoutSubmitResultsAt: bigint,
    timeoutJudgeResultsAt: bigint,
    timeoutMediateResultsAt: bigint
  ] & {
    state: bigint;
    resourceProviderAgreedAt: bigint;
    jobCreatorAgreedAt: bigint;
    dealCreatedAt: bigint;
    dealAgreedAt: bigint;
    resultsSubmittedAt: bigint;
    resultsAcceptedAt: bigint;
    resultsCheckedAt: bigint;
    mediationAcceptedAt: bigint;
    mediationRejectedAt: bigint;
    timeoutAgreeAt: bigint;
    timeoutSubmitResultsAt: bigint;
    timeoutJudgeResultsAt: bigint;
    timeoutMediateResultsAt: bigint;
  };
}

export interface HiveControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptResult"
      | "addResult"
      | "agree"
      | "checkResult"
      | "getJobCreatorAddress"
      | "getMediationAddress"
      | "getPaymentsAddress"
      | "getStorageAddress"
      | "getUsersAddress"
      | "initialize"
      | "mediationAcceptResult"
      | "mediationRejectResult"
      | "owner"
      | "renounceOwnership"
      | "setJobCreatorAddress"
      | "setMediationAddress"
      | "setPaymentsAddress"
      | "setStorageAddress"
      | "setUsersAddress"
      | "timeoutAgree"
      | "timeoutJudgeResult"
      | "timeoutMediateResult"
      | "timeoutSubmitResult"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addResult",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "agree",
    values: [
      string,
      SharedStructs.DealMembersStruct,
      SharedStructs.DealTimeoutsStruct,
      SharedStructs.DealPricingStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "checkResult", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getJobCreatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMediationAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStorageAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsersAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mediationAcceptResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mediationRejectResult",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setJobCreatorAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMediationAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentsAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStorageAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsersAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutAgree",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutJudgeResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutMediateResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutSubmitResult",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "agree", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobCreatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMediationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStorageAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsersAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mediationAcceptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mediationRejectResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJobCreatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMediationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStorageAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsersAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutAgree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutJudgeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutMediateResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutSubmitResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HiveController extends BaseContract {
  connect(runner?: ContractRunner | null): HiveController;
  waitForDeployment(): Promise<this>;

  interface: HiveControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptResult: TypedContractMethod<[dealId: string], [void], "nonpayable">;

  addResult: TypedContractMethod<
    [
      dealId: string,
      resultsId: string,
      dataId: string,
      instructionCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  agree: TypedContractMethod<
    [
      dealId: string,
      members: SharedStructs.DealMembersStruct,
      timeouts: SharedStructs.DealTimeoutsStruct,
      pricing: SharedStructs.DealPricingStruct
    ],
    [SharedStructs.AgreementStructOutput],
    "nonpayable"
  >;

  checkResult: TypedContractMethod<[dealId: string], [void], "nonpayable">;

  getJobCreatorAddress: TypedContractMethod<[], [string], "view">;

  getMediationAddress: TypedContractMethod<[], [string], "view">;

  getPaymentsAddress: TypedContractMethod<[], [string], "view">;

  getStorageAddress: TypedContractMethod<[], [string], "view">;

  getUsersAddress: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _storageAddress: AddressLike,
      _usersAddress: AddressLike,
      _paymentsAddress: AddressLike,
      _mediationAddress: AddressLike,
      _jobCreatorAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  mediationAcceptResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  mediationRejectResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setJobCreatorAddress: TypedContractMethod<
    [_jobCreatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setMediationAddress: TypedContractMethod<
    [_mediationAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setPaymentsAddress: TypedContractMethod<
    [_paymentsAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setStorageAddress: TypedContractMethod<
    [_storageAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setUsersAddress: TypedContractMethod<
    [_usersAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  timeoutAgree: TypedContractMethod<[dealId: string], [void], "nonpayable">;

  timeoutJudgeResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  timeoutMediateResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  timeoutSubmitResult: TypedContractMethod<
    [dealId: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resultsId: string,
      dataId: string,
      instructionCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agree"
  ): TypedContractMethod<
    [
      dealId: string,
      members: SharedStructs.DealMembersStruct,
      timeouts: SharedStructs.DealTimeoutsStruct,
      pricing: SharedStructs.DealPricingStruct
    ],
    [SharedStructs.AgreementStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getJobCreatorAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMediationAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPaymentsAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStorageAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUsersAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _storageAddress: AddressLike,
      _usersAddress: AddressLike,
      _paymentsAddress: AddressLike,
      _mediationAddress: AddressLike,
      _jobCreatorAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mediationAcceptResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mediationRejectResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setJobCreatorAddress"
  ): TypedContractMethod<
    [_jobCreatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMediationAddress"
  ): TypedContractMethod<
    [_mediationAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPaymentsAddress"
  ): TypedContractMethod<[_paymentsAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStorageAddress"
  ): TypedContractMethod<[_storageAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUsersAddress"
  ): TypedContractMethod<[_usersAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeoutAgree"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeoutJudgeResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeoutMediateResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeoutSubmitResult"
  ): TypedContractMethod<[dealId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
