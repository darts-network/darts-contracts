/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IHivePaymentsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptResult"
      | "addResult"
      | "agreeJobCreator"
      | "agreeResourceProvider"
      | "checkResult"
      | "mediationAcceptResult"
      | "mediationRejectResult"
      | "setTokenAddress"
      | "timeoutAgreeRefundJobCreator"
      | "timeoutAgreeRefundResourceProvider"
      | "timeoutJudgeResult"
      | "timeoutMediateResult"
      | "timeoutSubmitResult"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptResult",
    values: [
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addResult",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "agreeJobCreator",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "agreeResourceProvider",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkResult",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mediationAcceptResult",
    values: [
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mediationRejectResult",
    values: [
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutAgreeRefundJobCreator",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutAgreeRefundResourceProvider",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutJudgeResult",
    values: [string, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutMediateResult",
    values: [
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutSubmitResult",
    values: [string, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "agreeJobCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agreeResourceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mediationAcceptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mediationRejectResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutAgreeRefundJobCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutAgreeRefundResourceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutJudgeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutMediateResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutSubmitResult",
    data: BytesLike
  ): Result;
}

export interface IHivePayments extends BaseContract {
  connect(runner?: ContractRunner | null): IHivePayments;
  waitForDeployment(): Promise<this>;

  interface: IHivePaymentsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      jobCost: BigNumberish,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  agreeJobCreator: TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  agreeResourceProvider: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  checkResult: TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      timeoutCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  mediationAcceptResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      jobCost: BigNumberish,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  mediationRejectResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTokenAddress: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  timeoutAgreeRefundJobCreator: TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  timeoutAgreeRefundResourceProvider: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  timeoutJudgeResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  timeoutMediateResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  timeoutSubmitResult: TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      jobCost: BigNumberish,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agreeJobCreator"
  ): TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "agreeResourceProvider"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkResult"
  ): TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      timeoutCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mediationAcceptResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      jobCost: BigNumberish,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mediationRejectResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenAddress"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "timeoutAgreeRefundJobCreator"
  ): TypedContractMethod<
    [
      dealId: string,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeoutAgreeRefundResourceProvider"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeoutJudgeResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      resultsCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeoutMediateResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      resultsCollateral: BigNumberish,
      mediationFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeoutSubmitResult"
  ): TypedContractMethod<
    [
      dealId: string,
      resourceProvider: AddressLike,
      jobCreator: AddressLike,
      paymentCollateral: BigNumberish,
      timeoutCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
