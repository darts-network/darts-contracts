/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ExampleClient,
  ExampleClientInterface,
} from "../../contracts/ExampleClient";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "dealId",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "dataId",
        type: "string",
      },
    ],
    name: "JobCompleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "JobCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_jobID",
        type: "uint256",
      },
    ],
    name: "getJobResult",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_jobManagerAddress",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "runCowsay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_jobManagerAddress",
        type: "address",
      },
    ],
    name: "setJobManagerAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "dealId",
        type: "string",
      },
      {
        internalType: "string",
        name: "dataId",
        type: "string",
      },
    ],
    name: "submitResults",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61150f8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c4d66de81161005b578063c4d66de814610101578063cabc00d11461011d578063ec67df4c14610139578063f2fde38b1461015557610088565b80633b89dcab1461008d5780636c0f1f58146100bd578063715018a6146100d95780638da5cb5b146100e3575b600080fd5b6100a760048036038101906100a291906108c5565b610171565b6040516100b49190610982565b60405180910390f35b6100d760048036038101906100d29190610ad9565b610216565b005b6100e1610277565b005b6100eb61028b565b6040516100f89190610ba5565b60405180910390f35b61011b60048036038101906101169190610bec565b6102b4565b005b61013760048036038101906101329190610c19565b6103f9565b005b610153600480360381019061014e9190610bec565b61056d565b005b61016f600480360381019061016a9190610bec565b61068b565b005b606060036000838152602001908152602001600020805461019190610c91565b80601f01602080910402602001604051908101604052809291908181526020018280546101bd90610c91565b801561020a5780601f106101df5761010080835404028352916020019161020a565b820191906000526020600020905b8154815290600101906020018083116101ed57829003601f168201915b50505050509050919050565b806003600085815260200190815260200160002090816102369190610e6e565b507f3849c58b4b39b379bddc5973e71a10ded174f54140916d81986c7eec092e5c4283838360405161026a93929190610f4f565b60405180910390a1505050565b61027f61070e565b610289600061078c565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060159054906101000a900460ff161590508080156102e757506001600060149054906101000a900460ff1660ff16105b8061031657506102f630610850565b15801561031557506001600060149054906101000a900460ff1660ff16145b5b610355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034c90611006565b60405180910390fd5b6001600060146101000a81548160ff021916908360ff1602179055508015610393576001600060156101000a81548160ff0219169083151502179055505b61039c8261056d565b80156103f55760008060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516103ec919061106e565b60405180910390a15b5050565b6000600167ffffffffffffffff811115610416576104156109ae565b5b60405190808252806020026020018201604052801561044957816020015b60608152602001906001900390816104345790505b5090508160405160200161045d9190611111565b604051602081830303815290604052816000815181106104805761047f611133565b5b60200260200101819052506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c75555fa83336040518363ffffffff1660e01b81526004016104ea9291906112ba565b6020604051808303816000875af1158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052d9190611312565b90507fb63f0fdfb200b05c8b95fb4dcf8f8abd30f0b6884d532792e705afab4f37380a818460405161056092919061133f565b60405180910390a1505050565b61057561070e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db906113bb565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61069361070e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f99061144d565b60405180910390fd5b61070b8161078c565b50565b610716610873565b73ffffffffffffffffffffffffffffffffffffffff1661073461028b565b73ffffffffffffffffffffffffffffffffffffffff161461078a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610781906114b9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108a28161088f565b81146108ad57600080fd5b50565b6000813590506108bf81610899565b92915050565b6000602082840312156108db576108da610885565b5b60006108e9848285016108b0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561092c578082015181840152602081019050610911565b60008484015250505050565b6000601f19601f8301169050919050565b6000610954826108f2565b61095e81856108fd565b935061096e81856020860161090e565b61097781610938565b840191505092915050565b6000602082019050818103600083015261099c8184610949565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109e682610938565b810181811067ffffffffffffffff82111715610a0557610a046109ae565b5b80604052505050565b6000610a1861087b565b9050610a2482826109dd565b919050565b600067ffffffffffffffff821115610a4457610a436109ae565b5b610a4d82610938565b9050602081019050919050565b82818337600083830152505050565b6000610a7c610a7784610a29565b610a0e565b905082815260208101848484011115610a9857610a976109a9565b5b610aa3848285610a5a565b509392505050565b600082601f830112610ac057610abf6109a4565b5b8135610ad0848260208601610a69565b91505092915050565b600080600060608486031215610af257610af1610885565b5b6000610b00868287016108b0565b935050602084013567ffffffffffffffff811115610b2157610b2061088a565b5b610b2d86828701610aab565b925050604084013567ffffffffffffffff811115610b4e57610b4d61088a565b5b610b5a86828701610aab565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8f82610b64565b9050919050565b610b9f81610b84565b82525050565b6000602082019050610bba6000830184610b96565b92915050565b610bc981610b84565b8114610bd457600080fd5b50565b600081359050610be681610bc0565b92915050565b600060208284031215610c0257610c01610885565b5b6000610c1084828501610bd7565b91505092915050565b600060208284031215610c2f57610c2e610885565b5b600082013567ffffffffffffffff811115610c4d57610c4c61088a565b5b610c5984828501610aab565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ca957607f821691505b602082108103610cbc57610cbb610c62565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610d247fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ce7565b610d2e8683610ce7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d6b610d66610d618461088f565b610d46565b61088f565b9050919050565b6000819050919050565b610d8583610d50565b610d99610d9182610d72565b848454610cf4565b825550505050565b600090565b610dae610da1565b610db9818484610d7c565b505050565b5b81811015610ddd57610dd2600082610da6565b600181019050610dbf565b5050565b601f821115610e2257610df381610cc2565b610dfc84610cd7565b81016020851015610e0b578190505b610e1f610e1785610cd7565b830182610dbe565b50505b505050565b600082821c905092915050565b6000610e4560001984600802610e27565b1980831691505092915050565b6000610e5e8383610e34565b9150826002028217905092915050565b610e77826108f2565b67ffffffffffffffff811115610e9057610e8f6109ae565b5b610e9a8254610c91565b610ea5828285610de1565b600060209050601f831160018114610ed85760008415610ec6578287015190505b610ed08582610e52565b865550610f38565b601f198416610ee686610cc2565b60005b82811015610f0e57848901518255600182019150602085019450602081019050610ee9565b86831015610f2b5784890151610f27601f891682610e34565b8355505b6001600288020188555050505b505050505050565b610f498161088f565b82525050565b6000606082019050610f646000830186610f40565b8181036020830152610f768185610949565b90508181036040830152610f8a8184610949565b9050949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610ff0602e836108fd565b9150610ffb82610f94565b604082019050919050565b6000602082019050818103600083015261101f81610fe3565b9050919050565b6000819050919050565b600060ff82169050919050565b600061105861105361104e84611026565b610d46565b611030565b9050919050565b6110688161103d565b82525050565b6000602082019050611083600083018461105f565b92915050565b600081905092915050565b7f4d6573736167653d000000000000000000000000000000000000000000000000600082015250565b60006110ca600883611089565b91506110d582611094565b600882019050919050565b60006110eb826108f2565b6110f58185611089565b935061110581856020860161090e565b80840191505092915050565b600061111c826110bd565b915061112882846110e0565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f636f777361793a76302e302e3100000000000000000000000000000000000000600082015250565b6000611198600d836108fd565b91506111a382611162565b602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006111f6826108f2565b61120081856111da565b935061121081856020860161090e565b61121981610938565b840191505092915050565b600061123083836111eb565b905092915050565b6000602082019050919050565b6000611250826111ae565b61125a81856111b9565b93508360208202850161126c856111ca565b8060005b858110156112a857848403895281516112898582611224565b945061129483611238565b925060208a01995050600181019050611270565b50829750879550505050505092915050565b600060608201905081810360008301526112d38161118b565b905081810360208301526112e78185611245565b90506112f66040830184610b96565b9392505050565b60008151905061130c81610899565b92915050565b60006020828403121561132857611327610885565b5b6000611336848285016112fd565b91505092915050565b60006040820190506113546000830185610f40565b81810360208301526113668184610949565b90509392505050565b7f4a6f62206d616e61676572206164647265737300000000000000000000000000600082015250565b60006113a56013836108fd565b91506113b08261136f565b602082019050919050565b600060208201905081810360008301526113d481611398565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006114376026836108fd565b9150611442826113db565b604082019050919050565b600060208201905081810360008301526114668161142a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006114a36020836108fd565b91506114ae8261146d565b602082019050919050565b600060208201905081810360008301526114d281611496565b905091905056fea2646970667358221220f3d6ccf7546b76eaa92777415189784ba6c1df7b34f59000908b80afc9e86c1e64736f6c63430008150033";

type ExampleClientConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExampleClientConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExampleClient__factory extends ContractFactory {
  constructor(...args: ExampleClientConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ExampleClient & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ExampleClient__factory {
    return super.connect(runner) as ExampleClient__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExampleClientInterface {
    return new Interface(_abi) as ExampleClientInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ExampleClient {
    return new Contract(address, _abi, runner) as unknown as ExampleClient;
  }
}
