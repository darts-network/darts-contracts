{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract unpausable.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/ControllerOwnable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// as well as being ownable (i.e. our admin wallet)\r\n// this contract has a modifier called onlyController\r\n// it works the same way as Ownable but only the Owner\r\n// can change the controller address so it gives us a way of\r\n// re-pointing contracts if needed\r\ncontract ControllerOwnable is Ownable {\r\n\r\n  // the address of the controller that is allowed to call functions\r\n  address private controllerAddress;\r\n\r\n  // used to \"freeze\" the controller address - even the admin cannot\r\n  // change it from this point onwards\r\n  bool private canChangeControllerAddress = true;\r\n\r\n  modifier onlyController() {\r\n    _checkControllerAccess();\r\n    _;\r\n  }\r\n\r\n  function _checkControllerAccess() internal view virtual returns (bool) {\r\n    require(controllerAddress != address(0), \"ControllerOwnable: Controller address must be defined\");\r\n    require(_msgSender() == controllerAddress, \"ControllerOwnable: Only the controller can call this method\");\r\n    return true;\r\n  }\r\n\r\n  function setControllerAddress(address _controllerAddress) public onlyOwner {\r\n    require(_controllerAddress != address(0), \"ControllerOwnable: Controller address must be defined\");\r\n    require(canChangeControllerAddress, \"ControllerOwnable: canChangeControllerAddress is disabled\");\r\n    controllerAddress = _controllerAddress;\r\n  }\r\n\r\n  function getControllerAddress() public view returns (address) {\r\n    return controllerAddress;\r\n  }\r\n\r\n  function disableChangeControllerAddress() public onlyOwner {\r\n    canChangeControllerAddress = false;\r\n  }\r\n}\r\n"
    },
    "contracts/ExampleClient.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./IHiveJobManager.sol\";\r\nimport \"./IHiveJobClient.sol\";\r\n\r\ncontract ExampleClient is Ownable, Initializable, IHiveJobClient {\r\n\r\n  address private jobManagerAddress;\r\n  IHiveJobManager private jobManagerContract;\r\n\r\n  mapping(uint256 => string) private jobResults;\r\n\r\n  event JobCreated(\r\n    uint256 id,\r\n    string message\r\n  );\r\n\r\n  event JobCompleted(\r\n    uint256 id,\r\n    string dealId,\r\n    string dataId\r\n  );\r\n\r\n  function initialize(address _jobManagerAddress) public initializer {\r\n    setJobManagerAddress(_jobManagerAddress);\r\n  }\r\n\r\n  function setJobManagerAddress(address _jobManagerAddress) public onlyOwner {\r\n    require(_jobManagerAddress != address(0), \"Job manager address\");\r\n    jobManagerAddress = _jobManagerAddress;\r\n    jobManagerContract = IHiveJobManager(jobManagerAddress);\r\n  }\r\n\r\n  function getJobResult(uint256 _jobID) public view returns (string memory) {\r\n    return jobResults[_jobID];\r\n  }\r\n\r\n  function runCowsay(\r\n    string memory message\r\n  ) public {\r\n    string[] memory inputs = new string[](1);\r\n    inputs[0] = string(abi.encodePacked(\"Message=\", message));\r\n    uint256 id = jobManagerContract.runJob(\r\n      \"cowsay:v0.0.1\",\r\n      inputs,\r\n      msg.sender\r\n    );\r\n\r\n    emit JobCreated(\r\n      id,\r\n      message\r\n    );\r\n  }\r\n\r\n  function submitResults(\r\n    uint256 id,\r\n    string memory dealId,\r\n    string memory dataId\r\n  ) public override {\r\n    jobResults[id] = dataId;\r\n    emit JobCompleted(\r\n      id,\r\n      dealId,\r\n      dataId\r\n    );\r\n  }\r\n}\r\n"
    },
    "contracts/HiveController.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./SharedStructs.sol\";\r\nimport \"./IHiveController.sol\";\r\nimport \"./IHiveStorage.sol\";\r\nimport \"./IHivePayments.sol\";\r\nimport \"./IHiveMediation.sol\";\r\n\r\ncontract HiveController is IHiveController, Ownable, Initializable {\r\n\r\n  /**\r\n   * Types\r\n   */\r\n  \r\n  address private storageAddress;\r\n  address private userAddress;\r\n  address private paymentsAddress;\r\n  address private mediationAddress;\r\n  address private jobCreatorAddress;\r\n\r\n  IHiveStorage private storageContract;\r\n  IHivePayments private paymentsContract;\r\n  IHiveMediationHandler private mediationContract;\r\n\r\n  /**\r\n   * Init\r\n   */\r\n\r\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\r\n  function initialize(\r\n    address _storageAddress,\r\n    address _usersAddress,\r\n    address _paymentsAddress,\r\n    address _mediationAddress,\r\n    address _jobCreatorAddress\r\n  ) public initializer {\r\n    setStorageAddress(_storageAddress);\r\n    setUsersAddress(_usersAddress);\r\n    setPaymentsAddress(_paymentsAddress);\r\n    setMediationAddress(_mediationAddress);\r\n    setJobCreatorAddress(_jobCreatorAddress);\r\n  }\r\n\r\n  function setStorageAddress(address _storageAddress) public onlyOwner {\r\n    require(_storageAddress != address(0), \"Storage address\");\r\n    storageAddress = _storageAddress;\r\n    storageContract = IHiveStorage(storageAddress);\r\n  }\r\n\r\n  function getStorageAddress() public view returns(address) {\r\n    return storageAddress;\r\n  }\r\n\r\n  function setUsersAddress(address _usersAddress) public onlyOwner {\r\n    require(_usersAddress != address(0), \"Users address\");\r\n    userAddress = _usersAddress;\r\n  }\r\n\r\n  function getUsersAddress() public view returns(address) {\r\n    return userAddress;\r\n  }\r\n\r\n  function setPaymentsAddress(address _paymentsAddress) public onlyOwner {\r\n    require(_paymentsAddress != address(0), \"Payments address\");\r\n    paymentsAddress = _paymentsAddress;\r\n    paymentsContract = IHivePayments(_paymentsAddress);\r\n  }\r\n\r\n  function getPaymentsAddress() public view returns(address) {\r\n    return paymentsAddress;\r\n  }\r\n\r\n  function setMediationAddress(address _mediationAddress) public onlyOwner {\r\n    require(_mediationAddress != address(0), \"Mediation address\");\r\n    mediationAddress = _mediationAddress;\r\n    mediationContract = IHiveMediationHandler(_mediationAddress);\r\n  }\r\n\r\n  function getMediationAddress() public view returns(address) {\r\n    return mediationAddress;\r\n  }\r\n\r\n  function setJobCreatorAddress(address _jobCreatorAddress) public onlyOwner {\r\n    require(_jobCreatorAddress != address(0), \"JobCreator address\");\r\n    jobCreatorAddress = _jobCreatorAddress;\r\n  }\r\n\r\n  function getJobCreatorAddress() public view returns(address) {\r\n    return jobCreatorAddress;\r\n  }\r\n\r\n  /**\r\n   * Agreements\r\n   */\r\n\r\n  // * create the deal if not exists\r\n  // * otherwise compare the values to ensure 2 sided agreement\r\n  // * check the RP or JC is calling this\r\n  // * if RP:\r\n  //    * mark the deal as RP agreed\r\n  //    * pay in the timeout collateral\r\n  // * if JC:\r\n  //    * mark the deal as JC agreed\r\n  //    * pay in the payment collateral and timeout collateral\r\n  // * if both sides have agreed then mark the deal as agreed\r\n  // * emit the event\r\n  function agree(\r\n    string memory dealId,\r\n    SharedStructs.DealMembers memory members,\r\n    SharedStructs.DealTimeouts memory timeouts,\r\n    SharedStructs.DealPricing memory pricing\r\n  ) public override returns (SharedStructs.Agreement memory) {\r\n    SharedStructs.Deal memory deal = storageContract.ensureDeal(\r\n      dealId,\r\n      members,\r\n      timeouts,\r\n      pricing\r\n    );\r\n    bool isResourceProvider = tx.origin == deal.members.resourceProvider;\r\n    bool isJobCreator = tx.origin == deal.members.jobCreator;\r\n    require(isResourceProvider || isJobCreator, \"Only RP / JC\");\r\n\r\n    if(isResourceProvider) {\r\n      storageContract.agreeResourceProvider(dealId);\r\n      paymentsContract.agreeResourceProvider(\r\n        dealId,\r\n        deal.members.resourceProvider,\r\n        deal.timeouts.submitResults.collateral\r\n      );\r\n    }\r\n    else if(isJobCreator) {\r\n      storageContract.agreeJobCreator(dealId);\r\n      paymentsContract.agreeJobCreator(\r\n        dealId,\r\n        deal.members.jobCreator,\r\n        deal.pricing.paymentCollateral,\r\n        // the JC paus the judge results collateral\r\n        deal.timeouts.judgeResults.collateral\r\n      );\r\n    }\r\n    return storageContract.getAgreement(dealId);\r\n  }\r\n\r\n  /**\r\n   * Results\r\n   */\r\n\r\n  // * check the RP is calling this\r\n  // * mark the deal as results submitted\r\n  // * calculate the cost of the job\r\n  // * calculate the job collateral based on the multiple\r\n  // * work out the difference between the timeout and results collateral\r\n  // * pay the difference into / out of the contract to the RP\r\n  // * emit the event\r\n  function addResult(\r\n    string memory dealId,\r\n    string memory resultsId,\r\n    // this is the CID of the actual data\r\n    // otherwise onchain clients cannot know the actual data they want to fetch\r\n    string memory dataId,\r\n    uint256 instructionCount\r\n  ) public override {\r\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.DealAgreed), \"DealAgreed\");\r\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\r\n    require(deal.members.resourceProvider == tx.origin, \"Only RP\");\r\n\r\n    storageContract.addResult(\r\n      dealId,\r\n      resultsId,\r\n      dataId,\r\n      instructionCount\r\n    );\r\n\r\n    // how many multiple of the job cost must the RP put up as collateral\r\n    // we need to do this after having added the result otherwise\r\n    // we don't know the instruction count\r\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\r\n\r\n    paymentsContract.addResult(\r\n      dealId,\r\n      deal.members.resourceProvider,\r\n      resultsCollateral,\r\n      // this is the RP adding a results so they get their submit results timeout collateral back\r\n      deal.timeouts.submitResults.collateral\r\n    );\r\n  }\r\n\r\n  // * check the JC is calling this\r\n  // * check we are in Submitted state\r\n  // * mark the deal as results accepted\r\n  // * calculate the cost of the job\r\n  // * deduct the cost of the job from the JC payment collateral\r\n  // * pay the RP the cost of the job\r\n  // * refund the RP the results collateral\r\n  // * refund the JC the job collateral minus the cost\r\n  // * refund the JC the timeout collateral\r\n  function acceptResult(\r\n    string memory dealId\r\n  ) public override {\r\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \"ResultsSubmitted\");\r\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\r\n    require(deal.members.jobCreator == tx.origin, \"Only JC\");\r\n    \r\n    uint256 jobCost = storageContract.getJobCost(dealId);\r\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\r\n\r\n    storageContract.acceptResult(dealId);\r\n    paymentsContract.acceptResult(\r\n      dealId,\r\n      deal.members.resourceProvider,\r\n      deal.members.jobCreator,\r\n      jobCost,\r\n      deal.pricing.paymentCollateral,\r\n      resultsCollateral,\r\n      // this is the JC judging their result so they get their timeout collateral back\r\n      deal.timeouts.judgeResults.collateral\r\n    );\r\n  }\r\n\r\n  // * check the JC is calling this\r\n  // * check we are in Submitted state\r\n  // * check the mediator is in the list of RP trusted mediators\r\n  // * mark the deal as results checked\r\n  // * charge the JC the mediation fee\r\n  // * refund the JC the timeout collateral\r\n  // * emit the Mediation event so the mediator kicks in\r\n  function checkResult(\r\n    string memory dealId\r\n  ) public override {\r\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \"ResultsSubmitted\");\r\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\r\n    require(deal.members.jobCreator == tx.origin, \"Only JC\");\r\n\r\n    // this function will require that the mediator is in the RP's list of trusted mediators\r\n    storageContract.checkResult(dealId);\r\n    paymentsContract.checkResult(\r\n      dealId,\r\n      deal.members.jobCreator,\r\n      // this is the JC judging their result so they get their timeout collateral back\r\n      deal.timeouts.judgeResults.collateral,\r\n      deal.pricing.mediationFee\r\n    );\r\n\r\n    // trigger the mediation process by calling the contract\r\n    mediationContract.mediationRequest(deal);\r\n  }\r\n\r\n  /**\r\n   * Mediation\r\n   */\r\n\r\n  // the mediator calls this to say that the resource provider did the correct job\r\n  // * check the state is ResultsChecked\r\n  // * check the mediator is calling this\r\n  // * mark the deal as mediation accepted\r\n  // * refund the JC what is left from the payment collateral (if any)\r\n  // * pay the RP the cost of the job\r\n  // * refund the RP the results collateral\r\n  // * pay the mediator for mediating\r\n  function mediationAcceptResult(\r\n    string memory dealId\r\n  ) public override {\r\n    require(mediationAddress == _msgSender(), \"Only mediation\");\r\n    require(_canMediateResult(dealId), \"Cannot mediate\");\r\n    \r\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\r\n    uint256 jobCost = storageContract.getJobCost(dealId);\r\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\r\n\r\n    storageContract.mediationAcceptResult(dealId);\r\n    paymentsContract.mediationAcceptResult(\r\n      dealId,\r\n      deal.members.resourceProvider,\r\n      deal.members.jobCreator,\r\n      jobCost,\r\n      deal.pricing.paymentCollateral,\r\n      resultsCollateral,\r\n      deal.pricing.mediationFee\r\n    );\r\n  }\r\n\r\n  // the mediator calls this to say that the resource provider did the bad job\r\n  // * check the state is ResultsChecked\r\n  // * check the mediator is calling this\r\n  // * mark the deal as mediation rejected\r\n  // * refund the JC their payment collateral\r\n  // * slash the RP's results collateral\r\n  // * pay the mediator for mediating\r\n  function mediationRejectResult(\r\n    string memory dealId\r\n  ) public override {\r\n    // only the current mediation contract can call this\r\n    require(mediationAddress == _msgSender(), \"Only mediation\");\r\n    require(_canMediateResult(dealId), \"Cannot mediate\");\r\n\r\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\r\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\r\n\r\n    storageContract.mediationRejectResult(dealId);\r\n    paymentsContract.mediationRejectResult(\r\n      dealId,\r\n      deal.members.resourceProvider,\r\n      deal.members.jobCreator,\r\n      deal.pricing.paymentCollateral,\r\n      resultsCollateral,\r\n      deal.pricing.mediationFee\r\n    );\r\n  }\r\n\r\n  function _canMediateResult(\r\n    string memory dealId \r\n  ) private returns (bool) {\r\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsChecked), \"ResultsChecked\");\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Timeouts\r\n   */\r\n\r\n  function timeoutAgree(\r\n    string memory dealId\r\n  ) public override {\r\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\r\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\r\n    require(deal.members.jobCreator == tx.origin || deal.members.resourceProvider == tx.origin, \"Only JC or RP\");\r\n    require(agreement.state == SharedStructs.AgreementState.DealNegotiating, \"Not correct state\");\r\n    require(block.timestamp > agreement.dealCreatedAt + deal.timeouts.agree.timeout, \"Not timed out\");\r\n    storageContract.timeoutAgree(dealId);\r\n    if (agreement.resourceProviderAgreedAt > 0) {\r\n      // this is an RP refund\r\n      paymentsContract.timeoutAgreeRefundResourceProvider(\r\n        dealId,\r\n        deal.members.resourceProvider,\r\n        deal.timeouts.submitResults.collateral\r\n      );\r\n    } else if (agreement.jobCreatorAgreedAt > 0) {\r\n      // this is an JC refund\r\n      paymentsContract.timeoutAgreeRefundJobCreator(\r\n        dealId,\r\n        deal.members.jobCreator,\r\n        deal.pricing.paymentCollateral,\r\n        deal.timeouts.submitResults.collateral\r\n      );\r\n    }\r\n  }\r\n\r\n  // the job creator calls this after the timeout has passed and there are no results submitted\r\n  // * check the JC is calling this\r\n  // * mark the deal as timedout\r\n  // * pay back the JC's job collateral\r\n  // * slash the RP's results collateral\r\n  // * emit the event\r\n  function timeoutSubmitResult(\r\n    string memory dealId\r\n  ) public override {\r\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\r\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\r\n    require(deal.members.jobCreator == tx.origin, \"Only JC\");\r\n    require(agreement.state == SharedStructs.AgreementState.DealAgreed, \"Not correct state\");\r\n    require(block.timestamp > agreement.dealAgreedAt + deal.timeouts.submitResults.timeout, \"Not timed out\");\r\n    storageContract.timeoutSubmitResult(dealId);\r\n    paymentsContract.timeoutSubmitResult(\r\n      dealId,\r\n      deal.members.resourceProvider,\r\n      deal.members.jobCreator,\r\n      deal.pricing.paymentCollateral,\r\n      deal.timeouts.submitResults.collateral\r\n    );\r\n  }\r\n\r\n  // the resource provider calls this after the timeout has passed after submitting results\r\n  // and the job creator has not yet submitted their judgement on those results\r\n  // * check the RP is calling this\r\n  // * mark the deal as timedout\r\n  // * pay back the RP's results collateral\r\n  // * pay the RP the cost of the job\r\n  // * slash the JC's timeout collateral\r\n  // * slash the JC's job collateral\r\n  // * emit the event\r\n  function timeoutJudgeResult(\r\n    string memory dealId\r\n  ) public override {\r\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\r\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\r\n    require(deal.members.resourceProvider == tx.origin, \"Only RP\");\r\n    require(agreement.state == SharedStructs.AgreementState.ResultsSubmitted, \"Not correct state\");\r\n    require(block.timestamp > agreement.resultsSubmittedAt + deal.timeouts.judgeResults.timeout, \"Not timed out\");\r\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\r\n    storageContract.timeoutJudgeResult(dealId);    \r\n    paymentsContract.timeoutJudgeResult(\r\n      dealId,\r\n      deal.members.resourceProvider,\r\n      deal.members.jobCreator,\r\n      resultsCollateral,\r\n      deal.timeouts.judgeResults.collateral\r\n    );\r\n  }\r\n\r\n  // either the JC or RP call this after the timeout has passed after results being checked\r\n  // this refunds both the payment and results collateral to both the JC and RP\r\n  // * check the RP or JC is calling this\r\n  // * mark the deal as timedout\r\n  // * pay back the RP's results collateral\r\n  // * pay back the JC's paymnet collateral\r\n  // * emit the event\r\n  function timeoutMediateResult(\r\n    string memory dealId\r\n  ) public override {\r\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\r\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\r\n    require(deal.members.resourceProvider == tx.origin || deal.members.jobCreator == tx.origin, \"Only RP or JC\");\r\n    require(agreement.state == SharedStructs.AgreementState.ResultsChecked, \"Not correct state\");\r\n    require(block.timestamp > agreement.resultsSubmittedAt + deal.timeouts.judgeResults.timeout, \"Not timed out\");\r\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\r\n    storageContract.timeoutMediateResult(dealId);\r\n    paymentsContract.timeoutMediateResult(\r\n      dealId,\r\n      deal.members.resourceProvider,\r\n      deal.members.jobCreator,\r\n      deal.pricing.paymentCollateral,\r\n      resultsCollateral,\r\n      deal.pricing.mediationFee\r\n    );\r\n  }\r\n}\r\n"
    },
    "contracts/HiveMediationRandom.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./ControllerOwnable.sol\";\r\nimport \"./SharedStructs.sol\";\r\nimport \"./IHiveMediation.sol\";\r\n\r\ncontract HiveMediationRandom is ControllerOwnable, Initializable {\r\n\r\n  // keep track of which mediators were choosen for which deals\r\n  mapping(string => address) private mediators;\r\n\r\n  event MediationRequested(\r\n    string dealId,\r\n    address mediator\r\n  );\r\n\r\n  /**\r\n   * Init\r\n   */\r\n\r\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\r\n  function initialize() public initializer {\r\n    \r\n  }\r\n\r\n  // this is called by the controller contract\r\n  function mediationRequest(\r\n    SharedStructs.Deal memory deal\r\n  ) public onlyController {\r\n    uint randomIndex = uint(keccak256(abi.encodePacked(block.timestamp, deal.dealId))) % deal.members.mediators.length;\r\n    address mediator = deal.members.mediators[randomIndex];\r\n    require(mediator != address(0), \"mediator cannot be 0x0\");\r\n    mediators[deal.dealId] = mediator;\r\n    emit MediationRequested(deal.dealId, mediator);\r\n  }\r\n\r\n  function getMediator(\r\n    string memory dealId\r\n  ) public view returns(address) {\r\n    return mediators[dealId];\r\n  }\r\n\r\n  // call the controller contract as a IHiveMediationRequester\r\n  function mediationAcceptResult(\r\n    string memory dealId\r\n  ) public {\r\n    // check the tx.origin is the same mediator that was picked\r\n    require(mediators[dealId] != address(0), \"mediator cannot be 0x0\");\r\n    require(mediators[dealId] == tx.origin, \"tx.origin must be the mediator\");\r\n    // call the controller contract\r\n    IHiveMediationRequester(getControllerAddress()).mediationAcceptResult(dealId);\r\n  }\r\n\r\n  // call the controller contract as a IHiveMediationRequester\r\n  function mediationRejectResult(\r\n    string memory dealId\r\n  ) public {\r\n    // check the tx.origin is the same mediator that was picked\r\n    require(mediators[dealId] != address(0), \"mediator cannot be 0x0\");\r\n    require(mediators[dealId] == tx.origin, \"tx.origin must be the mediator\");\r\n    // call the controller contract\r\n    IHiveMediationRequester(getControllerAddress()).mediationRejectResult(dealId);\r\n  }\r\n}\r\n"
    },
    "contracts/HiveOnChainJobCreator.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./SharedStructs.sol\";\r\nimport \"./IHiveJobManager.sol\";\r\nimport \"./IHiveJobClient.sol\";\r\nimport \"./ControllerOwnable.sol\";\r\nimport \"./IHiveToken.sol\";\r\n\r\ncontract HiveOnChainJobCreator is IHiveJobManager, ControllerOwnable, Initializable {\r\n\r\n  // the token contract\r\n  // we check to see what allowance has been granted to be spent on behalf\r\n  // of the customer of a job\r\n  address private tokenAddress;\r\n  IHiveToken private tokenContract;\r\n\r\n  // the minimum amount that must be \"approved\" on the smart contract for the solver to spend\r\n  // for it to consider running a job for a client\r\n  // the solver will update this as the market pricing changes\r\n  uint256 public requiredDeposit;\r\n\r\n  // auto increment job id\r\n  uint256 public nextJobID;\r\n\r\n  // map of job id onto offer\r\n  mapping(uint256 => SharedStructs.JobOffer) private jobOffers;\r\n\r\n  event JobAdded(\r\n    uint256 id,\r\n    address calling_contract,\r\n    address payee,\r\n    string module,\r\n    string[] inputs\r\n  );\r\n\r\n  /**\r\n   * Init\r\n   */\r\n\r\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\r\n  function initialize(\r\n    address _tokenAddress\r\n  ) public initializer {\r\n    setTokenAddress(_tokenAddress);\r\n    nextJobID = 0;\r\n  }\r\n\r\n  function setTokenAddress(address _tokenAddress) public onlyOwner {\r\n    require(_tokenAddress != address(0), \"Token address\");\r\n    tokenAddress = _tokenAddress;\r\n    tokenContract = IHiveToken(tokenAddress);\r\n  }\r\n\r\n  function getTokenAddress() public view returns (address) {\r\n    return tokenAddress;\r\n  }\r\n\r\n  function setRequiredDeposit(uint256 cost) public onlyController {\r\n    require(cost > 0, \"Min deposit\");\r\n    requiredDeposit = cost;\r\n  }\r\n\r\n  function getRequiredDeposit() public view returns (uint256) {\r\n    return requiredDeposit;\r\n  }\r\n\r\n  // called by on-chain clients to make an offer for a job\r\n  // this will return a ticketID which is a unique onchain identifier for the job\r\n  function runJob(\r\n    // what is the module name we are making an offer for\r\n    string memory module,\r\n    // an array of key=value pairs that will be the inputs to the job\r\n    string[] memory inputs,\r\n    // the address of the client who is paying for the job\r\n    // they must have called the increaseAllowance function\r\n    // giving the controller (i.e. solver) permission to spend their tokens\r\n    address payee\r\n  ) public override returns (uint256) {\r\n    // this makes sure that the person paying for the job has\r\n    // already called \"approve\" on the token contract so the solver can\r\n    // work on it's behalf\r\n    require(tokenContract.allowance(payee, getControllerAddress()) >= requiredDeposit, \"Token allowance not enough\");\r\n\r\n    nextJobID = nextJobID + 1;\r\n    jobOffers[nextJobID] = SharedStructs.JobOffer(\r\n      nextJobID,\r\n      msg.sender,\r\n      payee,\r\n      module,\r\n      inputs\r\n    );\r\n    emit JobAdded(\r\n      nextJobID,\r\n      msg.sender,\r\n      payee,\r\n      module,\r\n      inputs\r\n    );\r\n\r\n    return nextJobID;\r\n  }\r\n\r\n  // this is called by the solver once we've got results out of the controller\r\n  // it will call the \"resultsAdded\" function on the original client contract\r\n  function submitResults(\r\n    uint256 id,\r\n    string memory dealId,\r\n    string memory dataId\r\n  ) public onlyController override {\r\n    SharedStructs.JobOffer storage offer = jobOffers[id];\r\n    require(offer.id != 0, \"Job not found\");\r\n    IHiveJobClient(offer.calling_contract).submitResults(\r\n      id,\r\n      dealId,\r\n      dataId\r\n    );\r\n  }\r\n}\r\n"
    },
    "contracts/HivePayments.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./IHiveToken.sol\";\r\nimport \"./ControllerOwnable.sol\";\r\nimport \"./IHivePayments.sol\";\r\n\r\n// import \"@openzeppelin/contracts/utils/Strings.sol\";\r\n// import \"hardhat/console.sol\";\r\n// console.log(\"ensureDeal\");\r\n// console.log(Strings.toString(uint256(SharedStructs.AgreementState.DealNegotiating)));\r\n// console.log(Strings.toString(uint256(agreements[dealId].state)));\r\n\r\ncontract HivePayments is ControllerOwnable, Initializable {\r\n\r\n  /**\r\n   * Types\r\n   */\r\n\r\n  // the address of the HiveToken.sol contract\r\n  address private tokenAddress;\r\n  IHiveToken private tokenContract;\r\n\r\n  // used to cut off upgrades for the remote contract\r\n  bool private canChangeTokenAddress = true;\r\n\r\n  /**\r\n   * Enums\r\n   */\r\n  enum PaymentReason {\r\n\r\n    // the money the JC puts up to pay for the job\r\n    PaymentCollateral,\r\n\r\n    // the money the RP puts up to attest it's results are correct\r\n    ResultsCollateral,\r\n\r\n    // the money the RP, JC and Mediator all put up to prevent timeouts\r\n    TimeoutCollateral,\r\n\r\n    // the money the RP gets paid for the job for running it successfully\r\n    JobPayment,\r\n\r\n    // the money the JC pays the mediator for resolving a dispute\r\n    MediationFee\r\n  }\r\n\r\n  enum PaymentDirection {\r\n\r\n    // money flowing into the contract\r\n    // i.e. we GET paid\r\n    PaidIn,\r\n\r\n    // money paid out to services\r\n    // i.e. we are PAYING\r\n    PaidOut,\r\n\r\n    // collateral that is locked up being refunded\r\n    Refunded,\r\n    \r\n    // collateral that is locked up being slashed\r\n    Slashed\r\n  }\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event Payment(\r\n    string dealId,\r\n    address payee,\r\n    uint256 amount,\r\n    PaymentReason reason,\r\n    PaymentDirection direction\r\n  );\r\n\r\n  /**\r\n   * Init\r\n   */\r\n\r\n  // used for debugging\r\n  mapping(address => string) private accountNames;\r\n\r\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\r\n  function initialize(\r\n    address _tokenAddress\r\n  ) public initializer {\r\n    setTokenAddress(_tokenAddress);\r\n\r\n    // this is only for debugging\r\n    // accountNames[address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266)] = \"admin\";\r\n    // accountNames[address(0x70997970C51812dc3A010C7d01b50e0d17dc79C8)] = \"faucet\";\r\n    // accountNames[address(0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC)] = \"solver\";\r\n    // accountNames[address(0x90F79bf6EB2c4f870365E785982E1f101E93b906)] = \"mediator\";\r\n    // accountNames[address(0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65)] = \"resource_provider\";\r\n    // accountNames[address(0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc)] = \"job_creator\";\r\n    // accountNames[address(0x976EA74026E726554dB657fA54763abd0C3a0aa9)] = \"directory\";\r\n  }\r\n\r\n  // the HiveToken.sol we are calling payinEscrow and payoutEscrow on\r\n  function setTokenAddress(address _tokenAddress) public onlyOwner {\r\n    require(_tokenAddress != address(0), \"HivePayments: Token address must be defined\");\r\n    require(canChangeTokenAddress, \"HiveToken: canChangeTokenAddress is disabled\");\r\n    tokenAddress = _tokenAddress;\r\n    tokenContract = IHiveToken(_tokenAddress);\r\n  }\r\n\r\n  function getTokenAddress() public view returns(address) {\r\n    return tokenAddress;\r\n  }\r\n\r\n  // set for canChangePaymentsAddress\r\n  function disableChangeTokenAddress() public onlyOwner {\r\n    canChangeTokenAddress = false;\r\n  }\r\n\r\n  /**\r\n   * Controller handlers\r\n   * \r\n   * these methods are called by the controller to wrap various payment\r\n   * scenarios - hence they are all onlyOwner\r\n   */\r\n\r\n  /**\r\n   * Agreements\r\n   */\r\n\r\n  // * pay in the timeout collateral\r\n  function agreeResourceProvider(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    uint256 timeoutCollateral\r\n  ) public onlyController {\r\n    // we check this here to double check who we are about to charge (the RP)\r\n    // is who signed the TX and so we can take the money\r\n    require(tx.origin == resourceProvider, \"HivePayments: Can only be called by the RP\");\r\n    _payEscrow(\r\n      dealId,\r\n      timeoutCollateral,\r\n      PaymentReason.TimeoutCollateral\r\n    );\r\n  }\r\n\r\n  // * pay in the payment collateral and timeout collateral\r\n  function agreeJobCreator(\r\n    string memory dealId,\r\n    address jobCreator,\r\n    uint256 paymentCollateral,\r\n    uint256 timeoutCollateral\r\n  ) public onlyController {\r\n    require(tx.origin == jobCreator, \"HivePayments: Can only be called by the JC\");\r\n    _payEscrow(\r\n      dealId,\r\n      paymentCollateral,\r\n      PaymentReason.PaymentCollateral\r\n    );\r\n    _payEscrow(\r\n      dealId,\r\n      timeoutCollateral,\r\n      PaymentReason.TimeoutCollateral\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Results\r\n   */\r\n\r\n  // * pay back the timeout collateral\r\n  // * pay in the results collateral\r\n  function addResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    uint256 resultsCollateral,\r\n    uint256 timeoutCollateral\r\n  ) public onlyController {\r\n    require(tx.origin == resourceProvider, \"HivePayments: Can only be called by the RP\");\r\n    _payEscrow(\r\n      dealId,\r\n      resultsCollateral,\r\n      PaymentReason.ResultsCollateral\r\n    );\r\n    _refundEscrow(\r\n      dealId,\r\n      resourceProvider,\r\n      timeoutCollateral,\r\n      PaymentReason.TimeoutCollateral\r\n    );\r\n  }\r\n\r\n  // * pay the RP the job cost\r\n  // * refund the RP the results collateral\r\n  // * refund the JC the job collateral minus the job cost\r\n  // * refund the JC the timeout collateral\r\n  function acceptResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 jobCost,\r\n    uint256 paymentCollateral,\r\n    uint256 resultsCollateral,\r\n    uint256 timeoutCollateral\r\n  ) public onlyController {\r\n    require(tx.origin == jobCreator, \"HivePayments: Can only be called by the JC\");\r\n\r\n    // what if the final job cost is more than the payment collateral?\r\n    // well - we have to cap the job cost at that collateral\r\n    // true - the RP has lost money but they agreed to the deal\r\n    uint256 actualPayment = jobCost;\r\n    uint256 jcRefund = 0;\r\n    if(jobCost > paymentCollateral) {\r\n      actualPayment = paymentCollateral;\r\n    } else {\r\n      jcRefund = paymentCollateral - jobCost;\r\n    }\r\n\r\n    // pay the RP the actualPayment\r\n    _payOut(\r\n      dealId,\r\n      jobCreator,\r\n      resourceProvider,\r\n      actualPayment,\r\n      PaymentReason.JobPayment\r\n    );\r\n\r\n    // if the job cost more than the payment collateral then we shold not go negative\r\n    // otherwise we are paying out more than the JC has put in\r\n    //\r\n    // the RP is loosing out a bit here but they agreed to doing the job\r\n    if(jcRefund > 0) {\r\n      _refundEscrow(\r\n        dealId,\r\n        jobCreator,\r\n        jcRefund,\r\n        PaymentReason.PaymentCollateral\r\n      );\r\n    }\r\n\r\n    // refund the JC timeout collateral\r\n    _refundEscrow(\r\n      dealId,\r\n      jobCreator,\r\n      timeoutCollateral,\r\n      PaymentReason.TimeoutCollateral\r\n    );\r\n\r\n    // refund the RP results collateral\r\n    _refundEscrow(\r\n      dealId,\r\n      resourceProvider,\r\n      resultsCollateral,\r\n      PaymentReason.ResultsCollateral\r\n    );\r\n  }\r\n\r\n  // * charge the JC the mediation fee\r\n  // * refund the JC the timeout collateral\r\n  function checkResult(\r\n    string memory dealId,\r\n    address jobCreator,\r\n    uint256 timeoutCollateral,\r\n    uint256 mediationFee\r\n  ) public onlyController {\r\n    require(tx.origin == jobCreator, \"HivePayments: Can only be called by the JC\");\r\n    \r\n    // the refund of the timeout collateral\r\n    _refundEscrow(\r\n      dealId,\r\n      jobCreator,\r\n      timeoutCollateral,\r\n      PaymentReason.TimeoutCollateral\r\n    );\r\n\r\n    // the payment of the mediation fee\r\n    _payEscrow(\r\n      dealId,\r\n      mediationFee,\r\n      PaymentReason.MediationFee\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Mediation\r\n   */\r\n\r\n  // * pay the RP the job cost\r\n  // * refund the RP the results collateral\r\n  // * refund the JC the job collateral minus the job cost\r\n  // * pay the mediator for mediating\r\n  function mediationAcceptResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 jobCost,\r\n    uint256 paymentCollateral,\r\n    uint256 resultsCollateral,\r\n    uint256 mediationFee\r\n  ) public onlyController {\r\n    uint256 actualPayment = jobCost;\r\n    uint256 jcRefund = 0;\r\n    if(jobCost > paymentCollateral) {\r\n      actualPayment = paymentCollateral;\r\n    } else {\r\n      jcRefund = paymentCollateral - jobCost;\r\n    }\r\n    \r\n    // pay the RP the job cost from the JC\r\n    _payOut(\r\n      dealId,\r\n      jobCreator,\r\n      resourceProvider,\r\n      actualPayment,\r\n      PaymentReason.JobPayment\r\n    );\r\n\r\n    // pay the mediator the fee from the JC\r\n    _payOut(\r\n      dealId,\r\n      jobCreator,\r\n      tx.origin,\r\n      mediationFee,\r\n      PaymentReason.MediationFee\r\n    );\r\n\r\n    // if the job cost more than the payment collateral then we shold not go negative\r\n    // otherwise we are paying out more than the JC has put in\r\n    //\r\n    // the RP is loosing out a bit here but they agreed to doing the job\r\n    if(jcRefund > 0) {\r\n\r\n      // refund the JC the diff between payment collateral and job cost\r\n      _refundEscrow(\r\n        dealId,\r\n        jobCreator,\r\n        jcRefund,\r\n        PaymentReason.PaymentCollateral\r\n      );\r\n    }\r\n\r\n    // refund the RP the results collateral\r\n    _refundEscrow(\r\n      dealId,\r\n      resourceProvider,\r\n      resultsCollateral,\r\n      PaymentReason.ResultsCollateral\r\n    );\r\n  }\r\n\r\n  // * refund the JC their payment collateral\r\n  // * slash the RP's results collateral\r\n  // * pay the mediator for mediating\r\n  function mediationRejectResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 paymentCollateral,\r\n    uint256 resultsCollateral,\r\n    uint256 mediationFee\r\n  ) public onlyController {\r\n    // refund the JC their payment collateral\r\n    _refundEscrow(\r\n      dealId,\r\n      jobCreator,\r\n      paymentCollateral,\r\n      PaymentReason.PaymentCollateral\r\n    );\r\n\r\n    // pay the mediator the fee from the JC\r\n    _payOut(\r\n      dealId,\r\n      jobCreator,\r\n      tx.origin,\r\n      mediationFee,\r\n      PaymentReason.MediationFee\r\n    );\r\n\r\n    // slash the RP\r\n    _slashEscrow(\r\n      dealId,\r\n      resourceProvider,\r\n      resultsCollateral,\r\n      PaymentReason.ResultsCollateral\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Timeouts\r\n   */\r\n  function timeoutAgreeRefundResourceProvider(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    uint256 timeoutCollateral\r\n  ) public onlyController {\r\n    require(tx.origin == resourceProvider, \"HivePayments: Can only be called by the RP\");\r\n    // the refund of the job collateral to the JC\r\n    _refundEscrow(\r\n      dealId,\r\n      resourceProvider,\r\n      timeoutCollateral,\r\n      PaymentReason.TimeoutCollateral\r\n    );\r\n  }\r\n\r\n  function timeoutAgreeRefundJobCreator(\r\n    string memory dealId,\r\n    address jobCreator,\r\n    uint256 paymentCollateral,\r\n    uint256 timeoutCollateral\r\n  ) public onlyController {\r\n    require(tx.origin == jobCreator, \"HivePayments: Can only be called by the JC\");\r\n    // the refund of the job collateral to the JC\r\n    _refundEscrow(\r\n      dealId,\r\n      jobCreator,\r\n      paymentCollateral,\r\n      PaymentReason.PaymentCollateral\r\n    );\r\n\r\n    // the refund of the job collateral to the JC\r\n    _refundEscrow(\r\n      dealId,\r\n      jobCreator,\r\n      timeoutCollateral,\r\n      PaymentReason.TimeoutCollateral\r\n    );\r\n  }\r\n\r\n  // * pay back the JC's job collateral\r\n  // * pay back the JC's timeout collateral\r\n  // * slash the RP's results collateral\r\n  function timeoutSubmitResults(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 paymentCollateral,\r\n    uint256 timeoutCollateral\r\n  ) public onlyController {\r\n    require(tx.origin == jobCreator, \"HivePayments: Can only be called by the JC\");\r\n    // the refund of the job collateral to the JC\r\n    _refundEscrow(\r\n      dealId,\r\n      jobCreator,\r\n      paymentCollateral,\r\n      PaymentReason.PaymentCollateral\r\n    );\r\n\r\n    // the refund of the job collateral to the JC\r\n    _refundEscrow(\r\n      dealId,\r\n      jobCreator,\r\n      timeoutCollateral,\r\n      PaymentReason.TimeoutCollateral\r\n    );\r\n    \r\n    // the slashing of the timeout collateral for the RP\r\n    _slashEscrow(\r\n      dealId,\r\n      resourceProvider,\r\n      timeoutCollateral,\r\n      PaymentReason.TimeoutCollateral\r\n    );\r\n  }\r\n\r\n  // * pay back the RP's results collateral\r\n  // * pay the RP the cost of the job\r\n  // * slash the JC's timeout collateral\r\n  // * slash the JC's job collateral\r\n  function timeoutJudgeResults(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 resultsCollateral,\r\n    uint256 timeoutCollateral\r\n  ) public onlyController {\r\n    require(tx.origin == resourceProvider, \"HivePayments: Can only be called by the RP\");\r\n    // the refund of the results collateral to the RP\r\n    _refundEscrow(\r\n      dealId,\r\n      resourceProvider,\r\n      resultsCollateral,\r\n      PaymentReason.ResultsCollateral\r\n    );\r\n\r\n    // the slashing of the timeout collateral for the RP\r\n    _slashEscrow(\r\n      dealId,\r\n      jobCreator,\r\n      timeoutCollateral,\r\n      PaymentReason.TimeoutCollateral\r\n    );\r\n  }\r\n\r\n  // * pay back the RP's results collateral\r\n  // * pay back the JC's payment collateral\r\n  // * pay back the JC's mediation fee\r\n  function timeoutMediateResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 paymentCollateral,\r\n    uint256 resultsCollateral,\r\n    uint256 mediationFee\r\n  ) public onlyController {\r\n    require(tx.origin == resourceProvider || tx.origin == jobCreator, \"HivePayments: Can only be called by the RP or JC\");\r\n    // the refund of the results collateral to the RP\r\n    _refundEscrow(\r\n      dealId,\r\n      resourceProvider,\r\n      resultsCollateral,\r\n      PaymentReason.ResultsCollateral\r\n    );\r\n\r\n    // the refund of the payment collateral to the JC\r\n    _refundEscrow(\r\n      dealId,\r\n      jobCreator,\r\n      paymentCollateral,\r\n      PaymentReason.PaymentCollateral\r\n    );\r\n\r\n    // the refund of the mediation fee to the JC\r\n    _refundEscrow(\r\n      dealId,\r\n      jobCreator,\r\n      mediationFee,\r\n      PaymentReason.MediationFee\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Payment utils\r\n   */\r\n\r\n\r\n  function _payEscrow(\r\n    string memory dealId,\r\n    uint256 amount,\r\n    PaymentReason reason\r\n  ) private {\r\n    // we check they have that much in their token balance before moving to tokens to us\r\n    require(tokenContract.balanceOf(tx.origin) >= amount, \"HivePayments: Insufficient balance\");\r\n\r\n    // console.log(\"_payEscrow\");\r\n    // console.log(accountNames[tx.origin]);\r\n    // console.log(amount);\r\n\r\n    bool success = tokenContract.payEscrow(amount);\r\n    require(success, \"HivePayments: Pay escrow failed\");\r\n\r\n    emit Payment(\r\n      dealId,\r\n      tx.origin,\r\n      amount,\r\n      reason,\r\n      PaymentDirection.PaidIn\r\n    );\r\n  }\r\n\r\n  function _refundEscrow(\r\n    string memory dealId,\r\n    address toAddress,\r\n    uint256 amount,\r\n    PaymentReason reason\r\n  ) private {\r\n    // console.log(\"_refundEscrow\");\r\n    // console.log(accountNames[toAddress]);\r\n    // console.log(amount);\r\n\r\n    bool success = tokenContract.refundEscrow(toAddress, amount);\r\n    require(success, \"HivePayments: Refund escrow failed\");\r\n\r\n    emit Payment(\r\n      dealId,\r\n      toAddress,\r\n      amount,\r\n      reason,\r\n      PaymentDirection.Refunded\r\n    );\r\n  }\r\n\r\n  function _payOut(\r\n    string memory dealId,\r\n    address fromAddress,\r\n    address toAddress,\r\n    uint256 amount,\r\n    PaymentReason reason\r\n  ) private {\r\n    // console.log(\"_payJob\");\r\n    // console.log(accountNames[fromAddress]);\r\n    // console.log(accountNames[toAddress]);\r\n    // console.log(amount);\r\n\r\n    bool success = tokenContract.payJob(fromAddress, toAddress, amount);\r\n    require(success, \"HivePayments: Pay job failed\");\r\n\r\n    emit Payment(\r\n      dealId,\r\n      toAddress,\r\n      amount,\r\n      reason,\r\n      PaymentDirection.PaidOut\r\n    );\r\n  }\r\n\r\n  function _slashEscrow(\r\n    string memory dealId,\r\n    address slashedAddress,\r\n    uint256 amount,\r\n    PaymentReason reason\r\n  ) private {\r\n    // console.log(\"_slashEscrow\");\r\n    // console.log(accountNames[slashedAddress]);\r\n    // console.log(amount);\r\n\r\n    bool success = tokenContract.slashEscrow(slashedAddress, amount);\r\n    require(success, \"HivePayments: Slash escrow failed\");\r\n\r\n    emit Payment(\r\n      dealId,\r\n      slashedAddress,\r\n      amount,\r\n      reason,\r\n      PaymentDirection.Slashed\r\n    );\r\n  }\r\n}\r\n"
    },
    "contracts/HivePaymentsTestable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./HivePayments.sol\";\r\n\r\ncontract HivePaymentsTestable is HivePayments {\r\n  function _checkControllerAccess() internal pure override returns (bool) {\r\n    return true;\r\n  }\r\n}\r\n"
    },
    "contracts/HiveStorage.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./SharedStructs.sol\";\r\nimport \"./ControllerOwnable.sol\";\r\n\r\ncontract HiveStorage is ControllerOwnable, Initializable {\r\n\r\n  // the address that is allowed to be the msg.sender for the payment functions\r\n  address private controllerAddress;\r\n\r\n  // used to cut off upgrades for the remote contract\r\n  bool private canChangeControllerAddress = true;\r\n\r\n  // a map of deal id -> deal\r\n  mapping(string => SharedStructs.Deal) private deals;\r\n\r\n  // a map of party -> dealid[]\r\n  mapping(address => string[]) private dealsForParty;\r\n\r\n  // a map of deal id -> agreement\r\n  mapping(string => SharedStructs.Agreement) private agreements;\r\n\r\n  // a map of deal id -> result\r\n  mapping(string => SharedStructs.Result) private results;\r\n\r\n  // a map of deal id -> result\r\n  mapping(string => SharedStructs.Result) private mediations;\r\n\r\n  event DealStateChange(\r\n    string dealId,\r\n    SharedStructs.AgreementState state\r\n  );\r\n\r\n  /**\r\n   * Init\r\n   */\r\n\r\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\r\n  function initialize() public initializer {\r\n    \r\n  }\r\n\r\n  /**\r\n   * Deals\r\n   */\r\n\r\n  function getDeal(\r\n    string memory dealId\r\n  ) public view returns (SharedStructs.Deal memory) {\r\n    return deals[dealId];\r\n  }\r\n\r\n  function getDealsForParty(\r\n    address party\r\n  ) public view returns (string[] memory) {\r\n    return dealsForParty[party];\r\n  }\r\n\r\n  function checkDealMembers(\r\n    SharedStructs.DealMembers memory members\r\n  ) private pure {\r\n    require(members.resourceProvider != address(0), \"RP missing\");\r\n    require(members.jobCreator != address(0), \"JC missing\");\r\n    require(members.solver != address(0), \"Solver missing\");\r\n    require(members.mediators.length > 0, \"Mediators <= 0\"); //TODO: make it necessary only if JC!=RP\r\n\r\n//    if (members.resourceProvider != members.jobCreator){\r\n//      //TODO: HiveController, HiveMediationRandom changes required to support 0 mediator cases.\r\n//      require(members.mediators.length > 0, \"Mediators <= 0\");\r\n//    }\r\n\r\n//    require(members.resourceProvider != members.jobCreator, \"RP / JC same\"); #Fix #119\r\n  }\r\n\r\n  function checkTimeouts(\r\n    SharedStructs.DealTimeouts memory timeouts\r\n  ) private pure {\r\n    // the cost of the agree timeout cannot be > 0 because the whole point is\r\n    // one party has not paid anything into the contract is what has timed out\r\n    require(timeouts.agree.collateral == 0, \"Agree deposit must be 0\");\r\n    // the same is true of the mediation timeout - it's cost cannot be zero\r\n    require(timeouts.mediateResults.collateral == 0, \"Mediate deposit must be 0\");\r\n  }\r\n\r\n  function compareDealMembers(\r\n    SharedStructs.DealMembers memory members1,\r\n    SharedStructs.DealMembers memory members2\r\n  ) private pure {\r\n    require(members1.resourceProvider == members2.resourceProvider, \"RP\");\r\n    require(members1.jobCreator == members2.jobCreator, \"JC\");\r\n    require(members1.solver == members2.solver, \"Solver\");\r\n    require(members1.mediators.length == members2.mediators.length, \"Mediators\");\r\n    for (uint256 i = 0; i < members1.mediators.length; i++) {\r\n      require(members1.mediators[i] == members2.mediators[i], \"Mediator\");\r\n    }\r\n  }\r\n\r\n  function compareDealTimeout(\r\n    SharedStructs.DealTimeout memory timeout1,\r\n    SharedStructs.DealTimeout memory timeout2\r\n  ) private pure {\r\n    require(timeout1.timeout == timeout2.timeout, \"Timeout\");\r\n    require(timeout1.collateral == timeout2.collateral, \"Collateral\");\r\n  }\r\n  \r\n  function compareDealTimeouts(\r\n    SharedStructs.DealTimeouts memory timeouts1,\r\n    SharedStructs.DealTimeouts memory timeouts2\r\n  ) private pure {\r\n    compareDealTimeout(timeouts1.agree, timeouts2.agree);\r\n    compareDealTimeout(timeouts1.submitResults, timeouts2.submitResults);\r\n    compareDealTimeout(timeouts1.judgeResults, timeouts2.judgeResults);\r\n    compareDealTimeout(timeouts1.mediateResults, timeouts2.mediateResults);\r\n  }\r\n\r\n  function compareDealPricing(\r\n    SharedStructs.DealPricing memory pricing1,\r\n    SharedStructs.DealPricing memory pricing2\r\n  ) private pure {\r\n    require(pricing1.instructionPrice == pricing2.instructionPrice, \"Price\");\r\n    require(pricing1.paymentCollateral == pricing2.paymentCollateral, \"Payment\");\r\n    require(pricing1.resultsCollateralMultiple == pricing2.resultsCollateralMultiple, \"Results\");\r\n    require(pricing1.mediationFee == pricing2.mediationFee, \"Mediation\");\r\n  }\r\n\r\n  function ensureDeal(\r\n    string memory dealId,\r\n    SharedStructs.DealMembers memory members,\r\n    SharedStructs.DealTimeouts memory timeouts,\r\n    SharedStructs.DealPricing memory pricing\r\n  ) public onlyController returns (SharedStructs.Deal memory) {\r\n    require(isState(dealId, SharedStructs.AgreementState.DealNegotiating), \"DealNegotiating\");\r\n    checkDealMembers(members);\r\n    checkTimeouts(timeouts);\r\n    if(hasDeal(dealId)) {\r\n      SharedStructs.Deal memory existingDeal = getDeal(dealId);\r\n      compareDealMembers(existingDeal.members, members);\r\n      compareDealTimeouts(existingDeal.timeouts, timeouts);\r\n      compareDealPricing(existingDeal.pricing, pricing);\r\n    }\r\n    else {\r\n      deals[dealId] = SharedStructs.Deal(\r\n        dealId,\r\n        members,\r\n        timeouts,\r\n        pricing\r\n      );\r\n      dealsForParty[members.resourceProvider].push(dealId);\r\n      dealsForParty[members.jobCreator].push(dealId);\r\n    }\r\n    return deals[dealId];\r\n  }\r\n\r\n  /**\r\n   * Agreements\r\n   */\r\n  \r\n  function getAgreement(\r\n    string memory dealId\r\n  ) public view returns (SharedStructs.Agreement memory) {\r\n    return agreements[dealId];\r\n  }\r\n\r\n  function agreeResourceProvider(\r\n    string memory dealId\r\n  ) public onlyController returns (SharedStructs.Agreement memory) {\r\n    require(hasDeal(dealId), \"Deal does not exist\");\r\n    require(agreements[dealId].resourceProviderAgreedAt == 0, \"RP has already agreed\");\r\n    agreements[dealId].resourceProviderAgreedAt = block.timestamp;\r\n    _maybeAgreeDeal(dealId);\r\n    return agreements[dealId];\r\n  }\r\n\r\n  function agreeJobCreator(\r\n    string memory dealId\r\n  ) public onlyController returns (SharedStructs.Agreement memory) {\r\n    require(hasDeal(dealId), \"Deal does not exist\");\r\n    require(agreements[dealId].jobCreatorAgreedAt == 0, \"JC has already agreed\");\r\n    agreements[dealId].jobCreatorAgreedAt = block.timestamp;\r\n    _maybeAgreeDeal(dealId);\r\n    return agreements[dealId];\r\n  }\r\n\r\n  /**\r\n   * Post Results\r\n   */\r\n\r\n  function getResult(\r\n    string memory dealId\r\n  ) public view returns (SharedStructs.Result memory) {\r\n    return results[dealId];\r\n  }\r\n\r\n  function addResult(\r\n    string memory dealId,\r\n    string memory resultsId,\r\n    string memory dataId,\r\n    uint256 instructionCount\r\n  ) public onlyController returns (SharedStructs.Result memory) {\r\n    require(isState(dealId, SharedStructs.AgreementState.DealAgreed), \"DealAgreed\");\r\n    agreements[dealId].resultsSubmittedAt = block.timestamp;\r\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsSubmitted);\r\n    results[dealId] = SharedStructs.Result(\r\n      dealId,\r\n      resultsId,\r\n      dataId,\r\n      instructionCount\r\n    );\r\n    return results[dealId];\r\n  }\r\n\r\n  /**\r\n   * Judge Results\r\n   */\r\n\r\n  function acceptResult(\r\n    string memory dealId\r\n  ) public onlyController {\r\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \"ResultsSubmitted\");\r\n    agreements[dealId].resultsAcceptedAt = block.timestamp;\r\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsAccepted);\r\n  }\r\n\r\n  function checkResult(\r\n    string memory dealId\r\n  ) public onlyController {\r\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \"ResultsSubmitted\");\r\n    agreements[dealId].resultsCheckedAt = block.timestamp;\r\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsChecked);\r\n  }\r\n\r\n  /**\r\n   * Mediati:\r\n   */\r\n\r\n  function mediationAcceptResult(\r\n    string memory dealId\r\n  ) public onlyController {\r\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \"ResultsChecked\");\r\n    agreements[dealId].mediationAcceptedAt = block.timestamp;\r\n    _changeAgreementState(dealId, SharedStructs.AgreementState.MediationAccepted);\r\n  }\r\n\r\n  function mediationRejectResult(\r\n    string memory dealId\r\n  ) public onlyController {\r\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \"ResultsChecked\");\r\n    agreements[dealId].mediationRejectedAt = block.timestamp;\r\n    _changeAgreementState(dealId, SharedStructs.AgreementState.MediationRejected);\r\n  }\r\n\r\n  /**\r\n   * Timeouts\r\n   */\r\n\r\n  // called because one party submitted a deal and the other party\r\n  // did not agree in time\r\n  function timeoutAgree(\r\n    string memory dealId\r\n  ) public onlyController {\r\n    require(isState(dealId, SharedStructs.AgreementState.DealNegotiating), \"DealNegotiating\");\r\n    agreements[dealId].timeoutAgreeAt = block.timestamp;\r\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutAgree);\r\n  }\r\n\r\n  // called because the JC waited too long for a result to be submitted\r\n  // and wants it's money back\r\n  function timeoutSubmitResult(\r\n    string memory dealId\r\n  ) public onlyController {\r\n    require(isState(dealId, SharedStructs.AgreementState.DealAgreed), \"DealAgreed\");\r\n    agreements[dealId].timeoutSubmitResultsAt = block.timestamp;\r\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutSubmitResults);\r\n  }\r\n\r\n  // called because the RP waited too long for a judgement of it's results\r\n  // and wants it's money back\r\n  function timeoutJudgeResult(\r\n    string memory dealId\r\n  ) public onlyController {\r\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \"ResultsSubmitted\");\r\n    agreements[dealId].timeoutJudgeResultsAt = block.timestamp;\r\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutJudgeResults);\r\n  }\r\n  // called because the RP or JC waited too long for a mediation of it's results\r\n  // and both want their money back\r\n  function timeoutMediateResult(\r\n    string memory dealId\r\n  ) public onlyController {\r\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \"ResultsChecked\");\r\n    agreements[dealId].timeoutMediateResultsAt = block.timestamp;\r\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutMediateResults);\r\n  }\r\n\r\n  /**\r\n   * Costings\r\n   */\r\n\r\n  function getJobCost(\r\n    string memory dealId\r\n  ) public view returns (uint256) {\r\n    return deals[dealId].pricing.instructionPrice * results[dealId].instructionCount;\r\n  }\r\n\r\n  function getResultsCollateral(\r\nstring memory dealId\r\n  ) public view returns (uint256) {\r\n    return deals[dealId].pricing.resultsCollateralMultiple * getJobCost(dealId);\r\n  }\r\n\r\n  /**\r\n   * Checkers\r\n   */\r\n\r\n  function hasDeal(\r\n    string memory dealId\r\n  ) public view returns (bool) {\r\n    return  bytes(getDeal(dealId).dealId).length > 0;\r\n  }\r\n\r\n  function isState(\r\n    string memory dealId,\r\n    SharedStructs.AgreementState state\r\n  ) public view returns (bool) {\r\n    // if we don't have a deal, we should check against DealNegotiating\r\n    // as this is the default state - otherwise it's impossible to check\r\n    // for isState('DealNegotiating')\r\n    if(!hasDeal(dealId)) {\r\n      return state == SharedStructs.AgreementState.DealNegotiating;\r\n    }\r\n    return agreements[dealId].state == state;\r\n  }\r\n\r\n  /**\r\n   * Utils\r\n   */\r\n\r\n  function _maybeAgreeDeal(\r\n    string memory dealId\r\n  ) private {\r\n    if(agreements[dealId].resourceProviderAgreedAt != 0 && agreements[dealId].jobCreatorAgreedAt != 0) {\r\n      agreements[dealId].dealAgreedAt = block.timestamp;\r\n      _changeAgreementState(dealId, SharedStructs.AgreementState.DealAgreed);\r\n    } else {\r\n      // this is used so we can know if a party can call an agree timeout trigger\r\n      agreements[dealId].dealCreatedAt = block.timestamp;\r\n    }\r\n  }\r\n\r\n  function _changeAgreementState(\r\n    string memory dealId,\r\n    SharedStructs.AgreementState state\r\n  ) private {\r\n    agreements[dealId].state = state;\r\n    emit DealStateChange(dealId, state);\r\n  }\r\n}\r\n"
    },
    "contracts/HiveStorageTestable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./HiveStorage.sol\";\r\n\r\ncontract HiveStorageTestable is HiveStorage {\r\n  function _checkControllerAccess() internal pure override returns (bool) {\r\n    return true;\r\n  }\r\n}\r\n"
    },
    "contracts/HiveToken.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\";\r\nimport \"./ControllerOwnable.sol\";\r\n\r\n/*\r\n  standard ERC20 token but with some additional features:\r\n\r\n   * ControllerOwnable\r\n     * for paying in, we use tx.origin so the actual payee must call the contract\r\n     * for paying out - we use the Controller Ownable feature so only the payments contract\r\n       can pay out from the escrow account\r\n   * escrowBalanceOf\r\n     * get the current escrow balance for an address\r\n   * payEscrow\r\n     * pay into the escrow account\r\n   * refundEscrow\r\n     * get refunded from the escrow account\r\n   * payJob\r\n     * reduce the \"from\" account by X amount\r\n     * actually pay that amount to the \"to\" address\r\n   * slashEscrow\r\n     * reduce the \"slashed\" account by X amount\r\n\r\n  the escrow functions are designed to be called by the payments contract\r\n\r\n   * deploy this contract as admin\r\n   * deploy the payments contract as admin and pass this address to it\r\n   * update the ControllerOwnable address of this contract to be the payments contract\r\n  \r\n  now, only the payments contract can call the escrow functions that pay out\r\n\r\n */\r\ncontract HiveToken is ControllerOwnable, ERC20, ERC20Pausable {\r\n\r\n  // keep track of the current escrow balance for each address\r\n  mapping(address => uint256) private escrowBalances;\r\n\r\n  constructor(\r\n    string memory name,\r\n    string memory symbol,\r\n    uint256 initialSupply\r\n  ) ERC20(name, symbol) {\r\n    _mint(msg.sender, initialSupply);\r\n  }\r\n\r\n  function escrowBalanceOf(\r\n    address _address\r\n  ) public view returns (uint256) {\r\n    return escrowBalances[_address];\r\n  }\r\n\r\n  // money being paid into the escrow account\r\n  function payEscrow(\r\n    uint256 amount\r\n  ) public returns (bool) {\r\n    // it's important we use tx.origin and not msg.sender here\r\n    // msg.sender will be the payments contract\r\n    // tx.origin will be the user who called the controller -> payments -> token\r\n    // i.e. the account that is actually paying into the escrow address\r\n    _transfer(tx.origin, address(this), amount);\r\n    escrowBalances[tx.origin] += amount;\r\n    return true;\r\n  }\r\n\r\n  // money being paid back from the escrow account\r\n  function refundEscrow(\r\n    address toAddress,\r\n    uint256 amount\r\n  ) public onlyController returns (bool) {\r\n    require(toAddress != address(0), \"HiveToken: toAddress cannot be zero address\");\r\n    require(escrowBalances[toAddress] >= amount, \"HiveToken: not enough funds in escrow\");\r\n    escrowBalances[toAddress] -= amount;\r\n    _transfer(address(this), toAddress, amount);\r\n    return true;\r\n  }\r\n\r\n  // pay the RP account from the JC escrow account\r\n  function payJob(\r\n    address fromAddress,\r\n    address toAddress,\r\n    uint256 amount\r\n  ) public onlyController returns (bool) {\r\n    require(escrowBalances[fromAddress] >= amount, \"HiveToken: not enough funds in escrow\");\r\n    escrowBalances[fromAddress] -= amount;\r\n    _transfer(address(this), toAddress, amount);\r\n    return true;\r\n  }\r\n\r\n  // the given party has been slashed so the money stays in the contract\r\n  // TODO: what should happen to slashed funds?\r\n  // at the moment we move them to the owner address so they are not locked\r\n  function slashEscrow(\r\n    address slashedAddress,\r\n    uint256 amount\r\n  ) public onlyController returns (bool) {\r\n    require(escrowBalances[slashedAddress] >= amount, \"HiveToken: not enough funds in escrow\");\r\n    escrowBalances[slashedAddress] -= amount;\r\n    _transfer(address(this), owner(), amount);\r\n    return true;\r\n  }\r\n\r\n  function pause() public onlyOwner {\r\n      _pause();\r\n  }\r\n\r\n  function unpause() public onlyOwner {\r\n      _unpause();\r\n  }\r\n\r\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal override(ERC20, ERC20Pausable) {\r\n      super._beforeTokenTransfer(from, to, amount);\r\n  }\r\n}\r\n"
    },
    "contracts/HiveTokenTestable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./HiveToken.sol\";\r\n\r\n// a version of HiveToken.sol that can be called by any address\r\n// so we can run unit tests\r\ncontract HiveTokenTestable is HiveToken {\r\n  constructor(\r\n    string memory name,\r\n    string memory symbol,\r\n    uint256 initialSupply\r\n  ) HiveToken(name, symbol, initialSupply) {}\r\n\r\n  function _checkControllerAccess() internal pure override returns (bool) {\r\n    return true;\r\n  }\r\n}\r\n"
    },
    "contracts/HiveUsers.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./SharedStructs.sol\";\r\nimport \"./ControllerOwnable.sol\";\r\n\r\ncontract HiveUsers is Ownable, Initializable {\r\n\r\n  // a map of user address -> user\r\n  mapping(address => SharedStructs.User) private users;\r\n\r\n  // a map of user type => user address[]\r\n  mapping(SharedStructs.ServiceType => address[]) private usersByType;\r\n\r\n  /**\r\n   * Init\r\n   */\r\n\r\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\r\n  function initialize() public initializer {\r\n    \r\n  }\r\n\r\n  /**\r\n   * Users\r\n   */\r\n\r\n  function getUser(\r\n    address userAddress\r\n  ) public view returns (SharedStructs.User memory) {\r\n    return users[userAddress];\r\n  }\r\n\r\n  function updateUser(\r\n    string memory metadataCID,\r\n    string memory url,\r\n    SharedStructs.ServiceType[] memory roles\r\n  ) public returns (SharedStructs.User memory) {\r\n    SharedStructs.User memory newUser = SharedStructs.User(\r\n      tx.origin,\r\n      metadataCID,\r\n      url,\r\n      roles\r\n    );\r\n    users[tx.origin] = newUser;\r\n    return newUser;\r\n  }\r\n\r\n  function addUserToList(\r\n    SharedStructs.ServiceType serviceType\r\n  ) public {\r\n    require(users[tx.origin].userAddress != address(0), \"User must exist\");\r\n    (, bool found) = _getUserListIndex(serviceType, tx.origin);\r\n    require(!found, \"User is already part of that list\");\r\n    require(_doesUserHaveRole(serviceType, tx.origin), \"User must have that role\");\r\n    usersByType[serviceType].push(tx.origin);\r\n  }\r\n\r\n  function removeUserFromList(\r\n    SharedStructs.ServiceType serviceType\r\n  ) public {\r\n    require(users[tx.origin].userAddress != address(0), \"User must exist\");\r\n    (uint256 index, bool found) = _getUserListIndex(serviceType, tx.origin);\r\n    require(found, \"User is not part of that list\");\r\n    for (uint256 i = index; i < usersByType[serviceType].length - 1; i++) {\r\n      usersByType[serviceType][i] = usersByType[serviceType][i + 1];\r\n    }\r\n    usersByType[serviceType].pop();\r\n  }\r\n\r\n  function showUsersInList(\r\n    SharedStructs.ServiceType serviceType\r\n  ) public view returns (address[] memory) {\r\n    return usersByType[serviceType];\r\n  }\r\n\r\n  // returns the index of the user found in the service list\r\n  // it returns 0 and false if the user is not found\r\n  function _getUserListIndex(\r\n    SharedStructs.ServiceType serviceType,\r\n    address userAddress\r\n  ) private view returns (uint256, bool) {\r\n    uint256 ret = 0;\r\n    bool found = false;\r\n    for (uint256 i = 0; i < usersByType[serviceType].length; i++) {\r\n      if (usersByType[serviceType][i] == userAddress) {\r\n        ret = i;\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    return (ret, found);\r\n  }\r\n\r\n  function _doesUserHaveRole(\r\n    SharedStructs.ServiceType serviceType,\r\n    address userAddress\r\n  ) private view returns (bool) {\r\n    bool found = false;\r\n    for (uint256 i = 0; i < users[userAddress].roles.length; i++) {\r\n      if (users[userAddress].roles[i] == serviceType) {\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    return found;\r\n  }\r\n}\r\n"
    },
    "contracts/IHiveController.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./SharedStructs.sol\";\r\n\r\ninterface IHiveController {\r\n\r\n  function agree(\r\n    string memory dealId,\r\n    SharedStructs.DealMembers memory members,\r\n    SharedStructs.DealTimeouts memory timeouts,\r\n    SharedStructs.DealPricing memory pricing\r\n  ) external returns (SharedStructs.Agreement memory);\r\n\r\n  function addResult(\r\n    string memory dealId,\r\n    string memory resultsId,\r\n    string memory dataId,\r\n    uint256 instructionCount\r\n  ) external;\r\n\r\n  function acceptResult(\r\n    string memory dealId\r\n  ) external;\r\n  \r\n  function checkResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  function mediationAcceptResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  function mediationRejectResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  function timeoutAgree(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  function timeoutSubmitResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  function timeoutJudgeResult(\r\n    string memory dealId\r\n  ) external;\r\n  \r\n  function timeoutMediateResult(\r\n    string memory dealId\r\n  ) external;\r\n}\r\n"
    },
    "contracts/IHiveJobClient.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\n// a smart contract that is running a job\r\n// it will call the IOnChainJobManager with it's job\r\n// which will end up with the resultsAdded function being called by the manager\r\ninterface IHiveJobClient {\r\n  function submitResults(\r\n    uint256 id,\r\n    string memory dealId,\r\n    string memory dataId\r\n  ) external;\r\n}\r\n"
    },
    "contracts/IHiveJobManager.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./IHiveJobClient.sol\";\r\n\r\n// the smart contract that is responsible for handling the life\r\n// cycle of a job - it will pay the registered solver to manage the job\r\n// this is the simple implementation - later we can implement the whole protocol\r\n// where the calling smart contract can decide if it wants to agree to a resource offer\r\n// and accept results\r\ninterface IHiveJobManager is IHiveJobClient {\r\n  function runJob(\r\n    string memory module,\r\n    string[] memory inputs,\r\n    address payee\r\n  ) external returns (uint256);\r\n}\r\n"
    },
    "contracts/IHiveMediation.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./SharedStructs.sol\";\r\n\r\n// this is our controller contract\r\n// it will be called by the mediation handler once a decision has been reached\r\ninterface IHiveMediationRequester {\r\n  function mediationAcceptResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  function mediationRejectResult(\r\n    string memory dealId\r\n  ) external;\r\n}\r\n\r\n// this is the contract that will handle mediating a deal\r\ninterface IHiveMediationHandler {\r\n  function mediationRequest(\r\n    SharedStructs.Deal memory deal \r\n  ) external; \r\n}\r\n"
    },
    "contracts/IHivePayments.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\ninterface IHivePayments {\r\n\r\n  /**\r\n   * Init\r\n   */\r\n\r\n  function setTokenAddress(\r\n    address _tokenAddress\r\n  ) external;\r\n\r\n  /**\r\n   * Agreements\r\n   */\r\n  function agreeResourceProvider(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    uint256 timeoutCollateral\r\n  ) external;\r\n\r\n  function agreeJobCreator(\r\n    string memory dealId,\r\n    address jobCreator,\r\n    uint256 paymentCollateral,\r\n    uint256 timeoutCollateral\r\n  ) external;\r\n\r\n  /**\r\n   * Results\r\n   */\r\n\r\n  function addResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    uint256 resultsCollateral,\r\n    uint256 timeoutCollateral\r\n  ) external;\r\n\r\n  function acceptResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 jobCost,\r\n    uint256 paymentCollateral,\r\n    uint256 resultsCollateral,\r\n    uint256 timeoutCollateral\r\n  ) external;\r\n\r\n  function checkResult(\r\n    string memory dealId,\r\n    address jobCreator,\r\n    uint256 timeoutCollateral,\r\n    uint256 mediationFee\r\n  ) external;\r\n\r\n  /**\r\n   * Mediation\r\n   */\r\n\r\n  function mediationAcceptResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 jobCost,\r\n    uint256 paymentCollateral,\r\n    uint256 resultsCollateral,\r\n    uint256 mediationFee\r\n  ) external;\r\n\r\n  function mediationRejectResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 paymentCollateral,\r\n    uint256 resultsCollateral,\r\n    uint256 mediationFee\r\n  ) external;\r\n\r\n  /**\r\n   * Timeouts\r\n   */\r\n\r\n  function timeoutAgreeRefundResourceProvider(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    uint256 timeoutCollateral\r\n  ) external;\r\n\r\n  function timeoutAgreeRefundJobCreator(\r\n    string memory dealId,\r\n    address jobCreator,\r\n    uint256 paymentCollateral,\r\n    uint256 timeoutCollateral\r\n  ) external;\r\n\r\n  function timeoutSubmitResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 paymentCollateral,\r\n    uint256 timeoutCollateral\r\n  ) external;\r\n\r\n  function timeoutJudgeResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 resultsCollateral,\r\n    uint256 timeoutCollateral\r\n  ) external;\r\n\r\n  function timeoutMediateResult(\r\n    string memory dealId,\r\n    address resourceProvider,\r\n    address jobCreator,\r\n    uint256 paymentCollateral,\r\n    uint256 resultsCollateral,\r\n    uint256 mediationFee\r\n  ) external;\r\n  \r\n}\r\n"
    },
    "contracts/IHiveStorage.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./SharedStructs.sol\";\r\n\r\ninterface IHiveStorage {\r\n  \r\n  /**\r\n   * Deals\r\n   */\r\n\r\n  function getDeal(\r\n    string memory dealId\r\n  ) external returns (SharedStructs.Deal memory);\r\n\r\n  function getDealsForParty(\r\n    address party\r\n  ) external returns (uint256[] memory);\r\n\r\n  function ensureDeal(\r\n    string memory dealId,\r\n    SharedStructs.DealMembers memory members,\r\n    SharedStructs.DealTimeouts memory timeouts,\r\n    SharedStructs.DealPricing memory pricing\r\n  ) external returns (SharedStructs.Deal memory);\r\n\r\n  /**\r\n   * Agreements\r\n   */\r\n\r\n  function getAgreement(\r\n    string memory dealId\r\n  ) external returns (SharedStructs.Agreement memory);\r\n  \r\n  function agreeResourceProvider(\r\n    string memory dealId\r\n  ) external returns (SharedStructs.Agreement memory);\r\n\r\n  function agreeJobCreator(\r\n    string memory dealId\r\n  ) external returns (SharedStructs.Agreement memory);\r\n  \r\n  /**\r\n   * Post Results\r\n   */\r\n\r\n  function getResult(\r\n    string memory dealId\r\n  ) external returns (SharedStructs.Result memory);\r\n\r\n  function addResult(\r\n    string memory dealId,\r\n    string memory resultsId,\r\n    string memory dataId,\r\n    uint256 instructionCount\r\n  ) external returns (SharedStructs.Result memory);\r\n\r\n  /**\r\n   * Judge Results\r\n   */\r\n\r\n  function acceptResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  function checkResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  /**\r\n   * Mediation\r\n   */\r\n  \r\n  function mediationAcceptResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  function mediationRejectResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  /**\r\n   * Timeouts\r\n   */\r\n  function timeoutAgree(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  function timeoutSubmitResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  function timeoutJudgeResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  function timeoutMediateResult(\r\n    string memory dealId\r\n  ) external;\r\n\r\n  /**\r\n   * Costings\r\n   */\r\n\r\n  function getJobCost(\r\n    string memory dealId\r\n  ) external returns (uint256);\r\n\r\n  function getResultsCollateral(\r\n    string memory dealId\r\n  ) external returns (uint256);\r\n  \r\n  /**\r\n   * Checkers\r\n   */\r\n\r\n  function hasDeal(\r\n    string memory dealId\r\n  ) external returns (bool);\r\n\r\n  function isState(\r\n    string memory dealId,\r\n    SharedStructs.AgreementState state\r\n  ) external returns (bool);\r\n  \r\n}\r\n"
    },
    "contracts/IHiveToken.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IHiveToken is IERC20 {\r\n  function escrowBalanceOf(\r\n    address _address\r\n  ) external returns (uint256);\r\n\r\n  function payEscrow(\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  function refundEscrow(\r\n    address toAddress,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  function payJob(\r\n    address fromAddress,\r\n    address toAddress,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  function slashEscrow(\r\n    address slashedAddress,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n}\r\n"
    },
    "contracts/IHiveUsers.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./SharedStructs.sol\";\r\n\r\ninterface IHiveUsers {\r\n\r\n  /**\r\n   * Users\r\n   */\r\n\r\n  function getUser(\r\n    address userAddress\r\n  ) external returns (SharedStructs.User memory);\r\n\r\n  function updateUser(\r\n    string memory metadataCID,\r\n    string memory url,\r\n    SharedStructs.ServiceType[] memory roles\r\n  ) external returns (SharedStructs.User memory);\r\n\r\n  // add the given user to a list of service types\r\n  // that can be easily discovered (e.g. how to list the solvers)\r\n  function addUserToList(\r\n    SharedStructs.ServiceType serviceType\r\n  ) external;\r\n\r\n  function removeUserFromList(\r\n    SharedStructs.ServiceType serviceType\r\n  ) external;\r\n\r\n  function showUsersInList(\r\n    SharedStructs.ServiceType serviceType\r\n  ) external returns (address[] memory);\r\n  \r\n}\r\n"
    },
    "contracts/SharedStructs.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.6;\r\n\r\nlibrary SharedStructs {\r\n\r\n  enum ServiceType {\r\n    Solver,\r\n    Mediator,\r\n    ResourceProvider,\r\n    JobCreator\r\n  }\r\n\r\n  enum AgreementState {\r\n\r\n    // the two parties have not yet both agreed to the deal\r\n    DealNegotiating,\r\n\r\n    // both parties have agreed\r\n    DealAgreed,\r\n\r\n    // results have been submitted by the RP\r\n    ResultsSubmitted,\r\n\r\n    // the JC has accepted the results\r\n    ResultsAccepted,\r\n\r\n    // the JC has checked the results\r\n    ResultsChecked,\r\n\r\n    // a mediator has accepted the results\r\n    MediationAccepted,\r\n\r\n    // a mediator has rejected the results\r\n    MediationRejected,\r\n\r\n    // this means the counter-party did not agree to the deal in time\r\n    TimeoutAgree,\r\n\r\n    // this means the RP did not submit results in time\r\n    TimeoutSubmitResults,\r\n\r\n    // this means the JC did not accept or reject results in time\r\n    TimeoutJudgeResults,\r\n\r\n    // this means the mediator did not accept or submit judgement in time\r\n    TimeoutMediateResults\r\n\r\n  }\r\n\r\n  // we map addresses onto infomation about the user\r\n  struct User {\r\n    address userAddress;\r\n    // the CID of information for this user\r\n    string metadataCID;\r\n    string url;\r\n    ServiceType[] roles;\r\n  }\r\n\r\n  // the various addresses involved in runnig a deal\r\n  struct DealMembers {\r\n    // the address of the solver service that the RP and JC have agreed to use\r\n    address solver;\r\n    // the addresses of the RP and JC that have agreed to this deal\r\n    address jobCreator;\r\n    address resourceProvider;\r\n    // the list of mediators that the RP and JC have agreed to use\r\n    address[] mediators;\r\n  }\r\n\r\n  // a timeout represents the agreed amount of time and the penalty\r\n  // that is applied if the timeout is exceeded  \r\n  struct DealTimeout {\r\n    uint256 timeout;\r\n    uint256 collateral;\r\n  }\r\n  \r\n  // the various forms of timeout a deal can have\r\n  struct DealTimeouts { \r\n    DealTimeout agree;\r\n    DealTimeout submitResults;\r\n    DealTimeout judgeResults;\r\n    DealTimeout mediateResults;\r\n  }\r\n\r\n  // configure the cost of a deal\r\n  struct DealPricing {\r\n  // agreed price per instruction\r\n    uint256 instructionPrice;\r\n\r\n    // the collateral that the JC has put up to pay for the job\r\n    // the final cost of the job will be deducted from this\r\n    uint256 paymentCollateral;\r\n\r\n    // how much collateral the RP will post to attest it's results are correct\r\n    // this is a multiple of the cost of the job which is known at results\r\n    // submission time\r\n    uint256 resultsCollateralMultiple;\r\n\r\n    // how much is the JC willing to pay the mediator to resolve disputes\r\n    uint256 mediationFee;\r\n  }\r\n\r\n  // a Deal forms the information that is agreed between both parties\r\n  // both parties must have called \"agree_deal\" with the exact\r\n  // same parameters before the deal is considered valid\r\n  // a Deal is immutable - nothing about it can be updated\r\n  struct Deal {\r\n    // the CID of the Deal document on IPFS (and directory service)\r\n    // this contains the job spec, the job offer and the resource offer\r\n    string dealId;\r\n\r\n    // who is participating in this deal\r\n    DealMembers members;\r\n    \r\n    // the timeout settings for a deal\r\n    DealTimeouts timeouts;\r\n\r\n    // the pricing settings for a deal\r\n    DealPricing pricing;    \r\n  }\r\n\r\n  // what the RP submits back once having run the job\r\n  // this is also immutable\r\n  struct Result {\r\n    // the id of the deal that this result is for\r\n    string dealId;\r\n\r\n    // the CID of the results on IPFS (and directory service)\r\n    // NOTE - this is not the CID of actual results data rather\r\n    // of the JSON object reporting that data\r\n    string resultsId;\r\n\r\n    // this is the actual lower level data CID\r\n    string dataId;\r\n\r\n    // how many instructions were executed by the RP\r\n    uint256 instructionCount;\r\n  }\r\n\r\n  // an agreement keeps track of the state of a deal and it's fields can be mutated\r\n  struct Agreement {\r\n    // the current state of the agreement\r\n    AgreementState state;\r\n\r\n    uint256 resourceProviderAgreedAt;\r\n    uint256 jobCreatorAgreedAt;\r\n    uint256 dealCreatedAt;\r\n    uint256 dealAgreedAt;\r\n\r\n    uint256 resultsSubmittedAt;\r\n    uint256 resultsAcceptedAt;\r\n    uint256 resultsCheckedAt;\r\n\r\n    uint256 mediationAcceptedAt;\r\n    uint256 mediationRejectedAt;\r\n\r\n    uint256 timeoutAgreeAt;\r\n    uint256 timeoutSubmitResultsAt;\r\n    uint256 timeoutJudgeResultsAt;\r\n    uint256 timeoutMediateResultsAt;\r\n  }\r\n\r\n  struct JobOffer {\r\n    uint256 id;\r\n    \r\n    // this is the contract that will be triggered\r\n    // once there are some results\r\n    address calling_contract;\r\n\r\n    // this is the address that is paying for the job\r\n    // they must have called approve on the token contract\r\n    // and granted the solver address the number of tokens\r\n    // required\r\n    address payee;\r\n\r\n    // the job spec\r\n    string module;\r\n    string[] inputs;\r\n  }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}