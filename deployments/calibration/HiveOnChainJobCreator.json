{
  "address": "0x2aFccEab15841E0f6B3d96F874ECbD5679846EC5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "calling_contract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "module",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "inputs",
          "type": "string[]"
        }
      ],
      "name": "JobAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "disableChangeControllerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getControllerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequiredDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextJobID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "module",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "inputs",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "runJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controllerAddress",
          "type": "address"
        }
      ],
      "name": "setControllerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "setRequiredDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "setTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dataId",
          "type": "string"
        }
      ],
      "name": "submitResults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe394d81c472084acbefa9b1b04ae21bb7cb847bcd52f7245f867dfcb088f411",
  "receipt": {
    "to": null,
    "from": "0x823531B7c7843D8c3821B19D70cbFb6173b9Cb02",
    "contractAddress": "0x2aFccEab15841E0f6B3d96F874ECbD5679846EC5",
    "transactionIndex": 2,
    "gasUsed": "81988757",
    "logsBloom": "0x040000000000400000080000804000100005004804000100418000000002020000400020000000000000a000009000000a00081004000200000000000001248000410200201010008100000900000003000100040120040000080000000000010000000012002602088000000408080401002080000000001880003002000140003000200800012000d82040080200000208208208008088000800004020004100a0000110180000000001000004008020e00100000000000200000000080009000000020000004004000010010400009c0400060002042002008100010020100000800000080040000008610000010804100070408214180000200205008000",
    "blockHash": "0x95ecc770ab4f2b8ee173be17cb0ebfbafb13a99cb6687b172cf91c2ec46d0b5f",
    "transactionHash": "0xfe394d81c472084acbefa9b1b04ae21bb7cb847bcd52f7245f867dfcb088f411",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 1380715,
        "transactionHash": "0xfe394d81c472084acbefa9b1b04ae21bb7cb847bcd52f7245f867dfcb088f411",
        "address": "0x2aFccEab15841E0f6B3d96F874ECbD5679846EC5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000823531b7c7843d8c3821b19d70cbfb6173b9cb02"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x95ecc770ab4f2b8ee173be17cb0ebfbafb13a99cb6687b172cf91c2ec46d0b5f"
      }
    ],
    "blockNumber": 1380715,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b1c846de1a2fdbebc0425659c174617e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"calling_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"inputs\",\"type\":\"string[]\"}],\"name\":\"JobAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"disableChangeControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextJobID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"module\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"inputs\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"runJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"}],\"name\":\"setControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"setRequiredDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"}],\"name\":\"submitResults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address)\":{\"notice\":\"Init\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HiveOnChainJobCreator.sol\":\"HiveOnChainJobCreator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/ControllerOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// as well as being ownable (i.e. our admin wallet)\\n// this contract has a modifier called onlyController\\n// it works the same way as Ownable but only the Owner\\n// can change the controller address so it gives us a way of\\n// re-pointing contracts if needed\\ncontract ControllerOwnable is Ownable {\\n\\n  // the address of the controller that is allowed to call functions\\n  address private controllerAddress;\\n\\n  // used to \\\"freeze\\\" the controller address - even the admin cannot\\n  // change it from this point onwards\\n  bool private canChangeControllerAddress = true;\\n\\n  modifier onlyController() {\\n    _checkControllerAccess();\\n    _;\\n  }\\n\\n  function _checkControllerAccess() internal view virtual returns (bool) {\\n    require(controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(_msgSender() == controllerAddress, \\\"ControllerOwnable: Only the controller can call this method\\\");\\n    return true;\\n  }\\n\\n  function setControllerAddress(address _controllerAddress) public onlyOwner {\\n    require(_controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(canChangeControllerAddress, \\\"ControllerOwnable: canChangeControllerAddress is disabled\\\");\\n    controllerAddress = _controllerAddress;\\n  }\\n\\n  function getControllerAddress() public view returns (address) {\\n    return controllerAddress;\\n  }\\n\\n  function disableChangeControllerAddress() public onlyOwner {\\n    canChangeControllerAddress = false;\\n  }\\n}\\n\",\"keccak256\":\"0xecfd8b0beb12340f51cefee5e121932fa7aee0a41fb7d0233966419d153ef429\",\"license\":\"Apache-2.0\"},\"contracts/HiveOnChainJobCreator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\nimport \\\"./IHiveJobManager.sol\\\";\\nimport \\\"./IHiveJobClient.sol\\\";\\nimport \\\"./ControllerOwnable.sol\\\";\\nimport \\\"./IHiveToken.sol\\\";\\n\\ncontract HiveOnChainJobCreator is IHiveJobManager, ControllerOwnable, Initializable {\\n\\n  // the token contract\\n  // we check to see what allowance has been granted to be spent on behalf\\n  // of the customer of a job\\n  address private tokenAddress;\\n  IHiveToken private tokenContract;\\n\\n  // the minimum amount that must be \\\"approved\\\" on the smart contract for the solver to spend\\n  // for it to consider running a job for a client\\n  // the solver will update this as the market pricing changes\\n  uint256 public requiredDeposit;\\n\\n  // auto increment job id\\n  uint256 public nextJobID;\\n\\n  // map of job id onto offer\\n  mapping(uint256 => SharedStructs.JobOffer) private jobOffers;\\n\\n  event JobAdded(\\n    uint256 id,\\n    address calling_contract,\\n    address payee,\\n    string module,\\n    string[] inputs\\n  );\\n\\n  /**\\n   * Init\\n   */\\n\\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n  function initialize(\\n    address _tokenAddress\\n  ) public initializer {\\n    setTokenAddress(_tokenAddress);\\n    nextJobID = 0;\\n  }\\n\\n  function setTokenAddress(address _tokenAddress) public onlyOwner {\\n    require(_tokenAddress != address(0), \\\"Token address\\\");\\n    tokenAddress = _tokenAddress;\\n    tokenContract = IHiveToken(tokenAddress);\\n  }\\n\\n  function getTokenAddress() public view returns (address) {\\n    return tokenAddress;\\n  }\\n\\n  function setRequiredDeposit(uint256 cost) public onlyController {\\n    require(cost > 0, \\\"Min deposit\\\");\\n    requiredDeposit = cost;\\n  }\\n\\n  function getRequiredDeposit() public view returns (uint256) {\\n    return requiredDeposit;\\n  }\\n\\n  // called by on-chain clients to make an offer for a job\\n  // this will return a ticketID which is a unique onchain identifier for the job\\n  function runJob(\\n    // what is the module name we are making an offer for\\n    string memory module,\\n    // an array of key=value pairs that will be the inputs to the job\\n    string[] memory inputs,\\n    // the address of the client who is paying for the job\\n    // they must have called the increaseAllowance function\\n    // giving the controller (i.e. solver) permission to spend their tokens\\n    address payee\\n  ) public override returns (uint256) {\\n    // this makes sure that the person paying for the job has\\n    // already called \\\"approve\\\" on the token contract so the solver can\\n    // work on it's behalf\\n    require(tokenContract.allowance(payee, getControllerAddress()) >= requiredDeposit, \\\"Token allowance not enough\\\");\\n\\n    nextJobID = nextJobID + 1;\\n    jobOffers[nextJobID] = SharedStructs.JobOffer(\\n      nextJobID,\\n      msg.sender,\\n      payee,\\n      module,\\n      inputs\\n    );\\n    emit JobAdded(\\n      nextJobID,\\n      msg.sender,\\n      payee,\\n      module,\\n      inputs\\n    );\\n\\n    return nextJobID;\\n  }\\n\\n  // this is called by the solver once we've got results out of the controller\\n  // it will call the \\\"resultsAdded\\\" function on the original client contract\\n  function submitResults(\\n    uint256 id,\\n    string memory dealId,\\n    string memory dataId\\n  ) public onlyController override {\\n    SharedStructs.JobOffer storage offer = jobOffers[id];\\n    require(offer.id != 0, \\\"Job not found\\\");\\n    IHiveJobClient(offer.calling_contract).submitResults(\\n      id,\\n      dealId,\\n      dataId\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x29a71916efa8605360763ca112eabc9e9d65f8edb922f1d6e7c242c26f714124\",\"license\":\"Apache-2.0\"},\"contracts/IHiveJobClient.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\n// a smart contract that is running a job\\n// it will call the IOnChainJobManager with it's job\\n// which will end up with the resultsAdded function being called by the manager\\ninterface IHiveJobClient {\\n  function submitResults(\\n    uint256 id,\\n    string memory dealId,\\n    string memory dataId\\n  ) external;\\n}\\n\",\"keccak256\":\"0x6bc01ec73e0d66c324f796205269c80a977f5c8c7600085f7fea176ec7c2e408\",\"license\":\"Apache-2.0\"},\"contracts/IHiveJobManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IHiveJobClient.sol\\\";\\n\\n// the smart contract that is responsible for handling the life\\n// cycle of a job - it will pay the registered solver to manage the job\\n// this is the simple implementation - later we can implement the whole protocol\\n// where the calling smart contract can decide if it wants to agree to a resource offer\\n// and accept results\\ninterface IHiveJobManager is IHiveJobClient {\\n  function runJob(\\n    string memory module,\\n    string[] memory inputs,\\n    address payee\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x866f902b000281daa1bc7abfa8f9c9c8328a708dac4e6f19706ff49e863f5b6c\",\"license\":\"Apache-2.0\"},\"contracts/IHiveToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IHiveToken is IERC20 {\\n  function escrowBalanceOf(\\n    address _address\\n  ) external returns (uint256);\\n\\n  function payEscrow(\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function refundEscrow(\\n    address toAddress,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function payJob(\\n    address fromAddress,\\n    address toAddress,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function slashEscrow(\\n    address slashedAddress,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x782c53d21be5284b5aaf0ea9b8695ec6727391a09f6912a64c59fefee679d836\",\"license\":\"Apache-2.0\"},\"contracts/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nlibrary SharedStructs {\\n\\n  enum ServiceType {\\n    Solver,\\n    Mediator,\\n    ResourceProvider,\\n    JobCreator\\n  }\\n\\n  enum AgreementState {\\n\\n    // the two parties have not yet both agreed to the deal\\n    DealNegotiating,\\n\\n    // both parties have agreed\\n    DealAgreed,\\n\\n    // results have been submitted by the RP\\n    ResultsSubmitted,\\n\\n    // the JC has accepted the results\\n    ResultsAccepted,\\n\\n    // the JC has checked the results\\n    ResultsChecked,\\n\\n    // a mediator has accepted the results\\n    MediationAccepted,\\n\\n    // a mediator has rejected the results\\n    MediationRejected,\\n\\n    // this means the counter-party did not agree to the deal in time\\n    TimeoutAgree,\\n\\n    // this means the RP did not submit results in time\\n    TimeoutSubmitResults,\\n\\n    // this means the JC did not accept or reject results in time\\n    TimeoutJudgeResults,\\n\\n    // this means the mediator did not accept or submit judgement in time\\n    TimeoutMediateResults\\n\\n  }\\n\\n  // we map addresses onto infomation about the user\\n  struct User {\\n    address userAddress;\\n    // the CID of information for this user\\n    string metadataCID;\\n    string url;\\n    ServiceType[] roles;\\n  }\\n\\n  // the various addresses involved in runnig a deal\\n  struct DealMembers {\\n    // the address of the solver service that the RP and JC have agreed to use\\n    address solver;\\n    // the addresses of the RP and JC that have agreed to this deal\\n    address jobCreator;\\n    address resourceProvider;\\n    // the list of mediators that the RP and JC have agreed to use\\n    address[] mediators;\\n  }\\n\\n  // a timeout represents the agreed amount of time and the penalty\\n  // that is applied if the timeout is exceeded  \\n  struct DealTimeout {\\n    uint256 timeout;\\n    uint256 collateral;\\n  }\\n  \\n  // the various forms of timeout a deal can have\\n  struct DealTimeouts { \\n    DealTimeout agree;\\n    DealTimeout submitResults;\\n    DealTimeout judgeResults;\\n    DealTimeout mediateResults;\\n  }\\n\\n  // configure the cost of a deal\\n  struct DealPricing {\\n  // agreed price per instruction\\n    uint256 instructionPrice;\\n\\n    // the collateral that the JC has put up to pay for the job\\n    // the final cost of the job will be deducted from this\\n    uint256 paymentCollateral;\\n\\n    // how much collateral the RP will post to attest it's results are correct\\n    // this is a multiple of the cost of the job which is known at results\\n    // submission time\\n    uint256 resultsCollateralMultiple;\\n\\n    // how much is the JC willing to pay the mediator to resolve disputes\\n    uint256 mediationFee;\\n  }\\n\\n  // a Deal forms the information that is agreed between both parties\\n  // both parties must have called \\\"agree_deal\\\" with the exact\\n  // same parameters before the deal is considered valid\\n  // a Deal is immutable - nothing about it can be updated\\n  struct Deal {\\n    // the CID of the Deal document on IPFS (and directory service)\\n    // this contains the job spec, the job offer and the resource offer\\n    string dealId;\\n\\n    // who is participating in this deal\\n    DealMembers members;\\n    \\n    // the timeout settings for a deal\\n    DealTimeouts timeouts;\\n\\n    // the pricing settings for a deal\\n    DealPricing pricing;    \\n  }\\n\\n  // what the RP submits back once having run the job\\n  // this is also immutable\\n  struct Result {\\n    // the id of the deal that this result is for\\n    string dealId;\\n\\n    // the CID of the results on IPFS (and directory service)\\n    // NOTE - this is not the CID of actual results data rather\\n    // of the JSON object reporting that data\\n    string resultsId;\\n\\n    // this is the actual lower level data CID\\n    string dataId;\\n\\n    // how many instructions were executed by the RP\\n    uint256 instructionCount;\\n  }\\n\\n  // an agreement keeps track of the state of a deal and it's fields can be mutated\\n  struct Agreement {\\n    // the current state of the agreement\\n    AgreementState state;\\n\\n    uint256 resourceProviderAgreedAt;\\n    uint256 jobCreatorAgreedAt;\\n    uint256 dealCreatedAt;\\n    uint256 dealAgreedAt;\\n\\n    uint256 resultsSubmittedAt;\\n    uint256 resultsAcceptedAt;\\n    uint256 resultsCheckedAt;\\n\\n    uint256 mediationAcceptedAt;\\n    uint256 mediationRejectedAt;\\n\\n    uint256 timeoutAgreeAt;\\n    uint256 timeoutSubmitResultsAt;\\n    uint256 timeoutJudgeResultsAt;\\n    uint256 timeoutMediateResultsAt;\\n  }\\n\\n  struct JobOffer {\\n    uint256 id;\\n    \\n    // this is the contract that will be triggered\\n    // once there are some results\\n    address calling_contract;\\n\\n    // this is the address that is paying for the job\\n    // they must have called approve on the token contract\\n    // and granted the solver address the number of tokens\\n    // required\\n    address payee;\\n\\n    // the job spec\\n    string module;\\n    string[] inputs;\\n  }\\n}\\n\",\"keccak256\":\"0x17ae1fe0274d61f5460caee95e214371a378a3e49730e5bdc4833506de99fcb6\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405260018060146101000a81548160ff02191690831515021790555034801561002a57600080fd5b5061004761003c61004c60201b60201c565b61005460201b60201c565b610118565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611eb2806101276000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a470295811610097578063d2a715c011610066578063d2a715c014610226578063f2fde38b14610244578063f3d3d44814610260578063fb7cfdd71461027c576100f5565b8063a4702958146101b2578063c4d66de8146101bc578063c57380a2146101d8578063c75555fa146101f6576100f5565b806358e56db4116100d357806358e56db4146101505780636c0f1f581461016e578063715018a61461018a5780638da5cb5b14610194576100f5565b806310fe9ae8146100fa57806326a4e8d2146101185780634c526c7614610134575b600080fd5b61010261029a565b60405161010f9190610eef565b60405180910390f35b610132600480360381019061012d9190610f4a565b6102c4565b005b61014e60048036038101906101499190610fad565b6103e2565b005b610158610438565b6040516101659190610fe9565b60405180910390f35b6101886004803603810190610183919061114a565b610442565b005b610192610542565b005b61019c610556565b6040516101a99190610eef565b60405180910390f35b6101ba61057f565b005b6101d660048036038101906101d19190610f4a565b6105a4565b005b6101e06106ef565b6040516101ed9190610eef565b60405180910390f35b610210600480360381019061020b91906112bb565b610719565b60405161021d9190610fe9565b60405180910390f35b61022e61099e565b60405161023b9190610fe9565b60405180910390f35b61025e60048036038101906102599190610f4a565b6109a4565b005b61027a60048036038101906102759190610f4a565b610a27565b005b610284610b31565b6040516102919190610fe9565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102cc610b37565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361033b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610332906113a3565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6103ea610bb5565b506000811161042e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104259061140f565b60405180910390fd5b8060048190555050565b6000600454905090565b61044a610bb5565b50600060066000858152602001908152602001600020905060008160000154036104a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a09061147b565b60405180910390fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c0f1f588585856040518463ffffffff1660e01b815260040161050a93929190611509565b600060405180830381600087803b15801561052457600080fd5b505af1158015610538573d6000803e3d6000fd5b5050505050505050565b61054a610b37565b6105546000610ce5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610587610b37565b6000600160146101000a81548160ff021916908315150217905550565b6000600160169054906101000a900460ff161590508080156105d7575060018060159054906101000a900460ff1660ff16105b8061060557506105e630610da9565b158015610604575060018060159054906101000a900460ff1660ff16145b5b610644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063b906115c0565b60405180910390fd5b60018060156101000a81548160ff021916908360ff16021790555080156106805760018060166101000a81548160ff0219169083151502179055505b610689826102c4565b600060058190555080156106eb576000600160166101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516106e29190611632565b60405180910390a15b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600454600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e846107656106ef565b6040518363ffffffff1660e01b815260040161078292919061164d565b602060405180830381865afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c3919061168b565b1015610804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fb90611704565b60405180910390fd5b60016005546108139190611753565b6005819055506040518060a0016040528060055481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152506006600060055481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190816109309190611989565b50608082015181600401908051906020019061094d929190610dd4565b509050507faa171d38d08c39622dbd189ddd0a5c0cf3ea10eeda0c7d4c2c75d13fcc4fe14a6005543384878760405161098a959493929190611b67565b60405180910390a160055490509392505050565b60055481565b6109ac610b37565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1290611c3a565b60405180910390fd5b610a2481610ce5565b50565b610a2f610b37565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9590611ccc565b60405180910390fd5b600160149054906101000a900460ff16610aed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae490611d5e565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b610b3f610dcc565b73ffffffffffffffffffffffffffffffffffffffff16610b5d610556565b73ffffffffffffffffffffffffffffffffffffffff1614610bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610baa90611dca565b60405180910390fd5b565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90611ccc565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c88610dcc565b73ffffffffffffffffffffffffffffffffffffffff1614610cde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd590611e5c565b60405180910390fd5b6001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b828054828255906000526020600020908101928215610e1c579160200282015b82811115610e1b578251829081610e0b9190611989565b5091602001919060010190610df4565b5b509050610e299190610e2d565b5090565b5b80821115610e4d5760008181610e449190610e51565b50600101610e2e565b5090565b508054610e5d906117b6565b6000825580601f10610e6f5750610e8e565b601f016020900490600052602060002090810190610e8d9190610e91565b5b50565b5b80821115610eaa576000816000905550600101610e92565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ed982610eae565b9050919050565b610ee981610ece565b82525050565b6000602082019050610f046000830184610ee0565b92915050565b6000604051905090565b600080fd5b600080fd5b610f2781610ece565b8114610f3257600080fd5b50565b600081359050610f4481610f1e565b92915050565b600060208284031215610f6057610f5f610f14565b5b6000610f6e84828501610f35565b91505092915050565b6000819050919050565b610f8a81610f77565b8114610f9557600080fd5b50565b600081359050610fa781610f81565b92915050565b600060208284031215610fc357610fc2610f14565b5b6000610fd184828501610f98565b91505092915050565b610fe381610f77565b82525050565b6000602082019050610ffe6000830184610fda565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110578261100e565b810181811067ffffffffffffffff821117156110765761107561101f565b5b80604052505050565b6000611089610f0a565b9050611095828261104e565b919050565b600067ffffffffffffffff8211156110b5576110b461101f565b5b6110be8261100e565b9050602081019050919050565b82818337600083830152505050565b60006110ed6110e88461109a565b61107f565b90508281526020810184848401111561110957611108611009565b5b6111148482856110cb565b509392505050565b600082601f83011261113157611130611004565b5b81356111418482602086016110da565b91505092915050565b60008060006060848603121561116357611162610f14565b5b600061117186828701610f98565b935050602084013567ffffffffffffffff81111561119257611191610f19565b5b61119e8682870161111c565b925050604084013567ffffffffffffffff8111156111bf576111be610f19565b5b6111cb8682870161111c565b9150509250925092565b600067ffffffffffffffff8211156111f0576111ef61101f565b5b602082029050602081019050919050565b600080fd5b6000611219611214846111d5565b61107f565b9050808382526020820190506020840283018581111561123c5761123b611201565b5b835b8181101561128357803567ffffffffffffffff81111561126157611260611004565b5b80860161126e898261111c565b8552602085019450505060208101905061123e565b5050509392505050565b600082601f8301126112a2576112a1611004565b5b81356112b2848260208601611206565b91505092915050565b6000806000606084860312156112d4576112d3610f14565b5b600084013567ffffffffffffffff8111156112f2576112f1610f19565b5b6112fe8682870161111c565b935050602084013567ffffffffffffffff81111561131f5761131e610f19565b5b61132b8682870161128d565b925050604061133c86828701610f35565b9150509250925092565b600082825260208201905092915050565b7f546f6b656e206164647265737300000000000000000000000000000000000000600082015250565b600061138d600d83611346565b915061139882611357565b602082019050919050565b600060208201905081810360008301526113bc81611380565b9050919050565b7f4d696e206465706f736974000000000000000000000000000000000000000000600082015250565b60006113f9600b83611346565b9150611404826113c3565b602082019050919050565b60006020820190508181036000830152611428816113ec565b9050919050565b7f4a6f62206e6f7420666f756e6400000000000000000000000000000000000000600082015250565b6000611465600d83611346565b91506114708261142f565b602082019050919050565b6000602082019050818103600083015261149481611458565b9050919050565b600081519050919050565b60005b838110156114c45780820151818401526020810190506114a9565b60008484015250505050565b60006114db8261149b565b6114e58185611346565b93506114f58185602086016114a6565b6114fe8161100e565b840191505092915050565b600060608201905061151e6000830186610fda565b818103602083015261153081856114d0565b9050818103604083015261154481846114d0565b9050949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006115aa602e83611346565b91506115b58261154e565b604082019050919050565b600060208201905081810360008301526115d98161159d565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061161c611617611612846115e0565b6115f7565b6115ea565b9050919050565b61162c81611601565b82525050565b60006020820190506116476000830184611623565b92915050565b60006040820190506116626000830185610ee0565b61166f6020830184610ee0565b9392505050565b60008151905061168581610f81565b92915050565b6000602082840312156116a1576116a0610f14565b5b60006116af84828501611676565b91505092915050565b7f546f6b656e20616c6c6f77616e6365206e6f7420656e6f756768000000000000600082015250565b60006116ee601a83611346565b91506116f9826116b8565b602082019050919050565b6000602082019050818103600083015261171d816116e1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061175e82610f77565b915061176983610f77565b925082820190508082111561178157611780611724565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806117ce57607f821691505b6020821081036117e1576117e0611787565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026118497fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261180c565b611853868361180c565b95508019841693508086168417925050509392505050565b600061188661188161187c84610f77565b6115f7565b610f77565b9050919050565b6000819050919050565b6118a08361186b565b6118b46118ac8261188d565b848454611819565b825550505050565b600090565b6118c96118bc565b6118d4818484611897565b505050565b5b818110156118f8576118ed6000826118c1565b6001810190506118da565b5050565b601f82111561193d5761190e816117e7565b611917846117fc565b81016020851015611926578190505b61193a611932856117fc565b8301826118d9565b50505b505050565b600082821c905092915050565b600061196060001984600802611942565b1980831691505092915050565b6000611979838361194f565b9150826002028217905092915050565b6119928261149b565b67ffffffffffffffff8111156119ab576119aa61101f565b5b6119b582546117b6565b6119c08282856118fc565b600060209050601f8311600181146119f357600084156119e1578287015190505b6119eb858261196d565b865550611a53565b601f198416611a01866117e7565b60005b82811015611a2957848901518255600182019150602085019450602081019050611a04565b86831015611a465784890151611a42601f89168261194f565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611aa38261149b565b611aad8185611a87565b9350611abd8185602086016114a6565b611ac68161100e565b840191505092915050565b6000611add8383611a98565b905092915050565b6000602082019050919050565b6000611afd82611a5b565b611b078185611a66565b935083602082028501611b1985611a77565b8060005b85811015611b555784840389528151611b368582611ad1565b9450611b4183611ae5565b925060208a01995050600181019050611b1d565b50829750879550505050505092915050565b600060a082019050611b7c6000830188610fda565b611b896020830187610ee0565b611b966040830186610ee0565b8181036060830152611ba881856114d0565b90508181036080830152611bbc8184611af2565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611c24602683611346565b9150611c2f82611bc8565b604082019050919050565b60006020820190508181036000830152611c5381611c17565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a20436f6e74726f6c6c657220616460008201527f6472657373206d75737420626520646566696e65640000000000000000000000602082015250565b6000611cb6603583611346565b9150611cc182611c5a565b604082019050919050565b60006020820190508181036000830152611ce581611ca9565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a2063616e4368616e6765436f6e7460008201527f726f6c6c6572416464726573732069732064697361626c656400000000000000602082015250565b6000611d48603983611346565b9150611d5382611cec565b604082019050919050565b60006020820190508181036000830152611d7781611d3b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611db4602083611346565b9150611dbf82611d7e565b602082019050919050565b60006020820190508181036000830152611de381611da7565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a204f6e6c792074686520636f6e7460008201527f726f6c6c65722063616e2063616c6c2074686973206d6574686f640000000000602082015250565b6000611e46603b83611346565b9150611e5182611dea565b604082019050919050565b60006020820190508181036000830152611e7581611e39565b905091905056fea26469706673582212205534f11db26136afeb272df9aa51ae2fffccf844dbcc237e6fe2142632ee958764736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a470295811610097578063d2a715c011610066578063d2a715c014610226578063f2fde38b14610244578063f3d3d44814610260578063fb7cfdd71461027c576100f5565b8063a4702958146101b2578063c4d66de8146101bc578063c57380a2146101d8578063c75555fa146101f6576100f5565b806358e56db4116100d357806358e56db4146101505780636c0f1f581461016e578063715018a61461018a5780638da5cb5b14610194576100f5565b806310fe9ae8146100fa57806326a4e8d2146101185780634c526c7614610134575b600080fd5b61010261029a565b60405161010f9190610eef565b60405180910390f35b610132600480360381019061012d9190610f4a565b6102c4565b005b61014e60048036038101906101499190610fad565b6103e2565b005b610158610438565b6040516101659190610fe9565b60405180910390f35b6101886004803603810190610183919061114a565b610442565b005b610192610542565b005b61019c610556565b6040516101a99190610eef565b60405180910390f35b6101ba61057f565b005b6101d660048036038101906101d19190610f4a565b6105a4565b005b6101e06106ef565b6040516101ed9190610eef565b60405180910390f35b610210600480360381019061020b91906112bb565b610719565b60405161021d9190610fe9565b60405180910390f35b61022e61099e565b60405161023b9190610fe9565b60405180910390f35b61025e60048036038101906102599190610f4a565b6109a4565b005b61027a60048036038101906102759190610f4a565b610a27565b005b610284610b31565b6040516102919190610fe9565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102cc610b37565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361033b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610332906113a3565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6103ea610bb5565b506000811161042e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104259061140f565b60405180910390fd5b8060048190555050565b6000600454905090565b61044a610bb5565b50600060066000858152602001908152602001600020905060008160000154036104a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a09061147b565b60405180910390fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c0f1f588585856040518463ffffffff1660e01b815260040161050a93929190611509565b600060405180830381600087803b15801561052457600080fd5b505af1158015610538573d6000803e3d6000fd5b5050505050505050565b61054a610b37565b6105546000610ce5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610587610b37565b6000600160146101000a81548160ff021916908315150217905550565b6000600160169054906101000a900460ff161590508080156105d7575060018060159054906101000a900460ff1660ff16105b8061060557506105e630610da9565b158015610604575060018060159054906101000a900460ff1660ff16145b5b610644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063b906115c0565b60405180910390fd5b60018060156101000a81548160ff021916908360ff16021790555080156106805760018060166101000a81548160ff0219169083151502179055505b610689826102c4565b600060058190555080156106eb576000600160166101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516106e29190611632565b60405180910390a15b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600454600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e846107656106ef565b6040518363ffffffff1660e01b815260040161078292919061164d565b602060405180830381865afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c3919061168b565b1015610804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fb90611704565b60405180910390fd5b60016005546108139190611753565b6005819055506040518060a0016040528060055481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152506006600060055481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190816109309190611989565b50608082015181600401908051906020019061094d929190610dd4565b509050507faa171d38d08c39622dbd189ddd0a5c0cf3ea10eeda0c7d4c2c75d13fcc4fe14a6005543384878760405161098a959493929190611b67565b60405180910390a160055490509392505050565b60055481565b6109ac610b37565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1290611c3a565b60405180910390fd5b610a2481610ce5565b50565b610a2f610b37565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9590611ccc565b60405180910390fd5b600160149054906101000a900460ff16610aed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae490611d5e565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60045481565b610b3f610dcc565b73ffffffffffffffffffffffffffffffffffffffff16610b5d610556565b73ffffffffffffffffffffffffffffffffffffffff1614610bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610baa90611dca565b60405180910390fd5b565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90611ccc565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c88610dcc565b73ffffffffffffffffffffffffffffffffffffffff1614610cde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd590611e5c565b60405180910390fd5b6001905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b828054828255906000526020600020908101928215610e1c579160200282015b82811115610e1b578251829081610e0b9190611989565b5091602001919060010190610df4565b5b509050610e299190610e2d565b5090565b5b80821115610e4d5760008181610e449190610e51565b50600101610e2e565b5090565b508054610e5d906117b6565b6000825580601f10610e6f5750610e8e565b601f016020900490600052602060002090810190610e8d9190610e91565b5b50565b5b80821115610eaa576000816000905550600101610e92565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ed982610eae565b9050919050565b610ee981610ece565b82525050565b6000602082019050610f046000830184610ee0565b92915050565b6000604051905090565b600080fd5b600080fd5b610f2781610ece565b8114610f3257600080fd5b50565b600081359050610f4481610f1e565b92915050565b600060208284031215610f6057610f5f610f14565b5b6000610f6e84828501610f35565b91505092915050565b6000819050919050565b610f8a81610f77565b8114610f9557600080fd5b50565b600081359050610fa781610f81565b92915050565b600060208284031215610fc357610fc2610f14565b5b6000610fd184828501610f98565b91505092915050565b610fe381610f77565b82525050565b6000602082019050610ffe6000830184610fda565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110578261100e565b810181811067ffffffffffffffff821117156110765761107561101f565b5b80604052505050565b6000611089610f0a565b9050611095828261104e565b919050565b600067ffffffffffffffff8211156110b5576110b461101f565b5b6110be8261100e565b9050602081019050919050565b82818337600083830152505050565b60006110ed6110e88461109a565b61107f565b90508281526020810184848401111561110957611108611009565b5b6111148482856110cb565b509392505050565b600082601f83011261113157611130611004565b5b81356111418482602086016110da565b91505092915050565b60008060006060848603121561116357611162610f14565b5b600061117186828701610f98565b935050602084013567ffffffffffffffff81111561119257611191610f19565b5b61119e8682870161111c565b925050604084013567ffffffffffffffff8111156111bf576111be610f19565b5b6111cb8682870161111c565b9150509250925092565b600067ffffffffffffffff8211156111f0576111ef61101f565b5b602082029050602081019050919050565b600080fd5b6000611219611214846111d5565b61107f565b9050808382526020820190506020840283018581111561123c5761123b611201565b5b835b8181101561128357803567ffffffffffffffff81111561126157611260611004565b5b80860161126e898261111c565b8552602085019450505060208101905061123e565b5050509392505050565b600082601f8301126112a2576112a1611004565b5b81356112b2848260208601611206565b91505092915050565b6000806000606084860312156112d4576112d3610f14565b5b600084013567ffffffffffffffff8111156112f2576112f1610f19565b5b6112fe8682870161111c565b935050602084013567ffffffffffffffff81111561131f5761131e610f19565b5b61132b8682870161128d565b925050604061133c86828701610f35565b9150509250925092565b600082825260208201905092915050565b7f546f6b656e206164647265737300000000000000000000000000000000000000600082015250565b600061138d600d83611346565b915061139882611357565b602082019050919050565b600060208201905081810360008301526113bc81611380565b9050919050565b7f4d696e206465706f736974000000000000000000000000000000000000000000600082015250565b60006113f9600b83611346565b9150611404826113c3565b602082019050919050565b60006020820190508181036000830152611428816113ec565b9050919050565b7f4a6f62206e6f7420666f756e6400000000000000000000000000000000000000600082015250565b6000611465600d83611346565b91506114708261142f565b602082019050919050565b6000602082019050818103600083015261149481611458565b9050919050565b600081519050919050565b60005b838110156114c45780820151818401526020810190506114a9565b60008484015250505050565b60006114db8261149b565b6114e58185611346565b93506114f58185602086016114a6565b6114fe8161100e565b840191505092915050565b600060608201905061151e6000830186610fda565b818103602083015261153081856114d0565b9050818103604083015261154481846114d0565b9050949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006115aa602e83611346565b91506115b58261154e565b604082019050919050565b600060208201905081810360008301526115d98161159d565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061161c611617611612846115e0565b6115f7565b6115ea565b9050919050565b61162c81611601565b82525050565b60006020820190506116476000830184611623565b92915050565b60006040820190506116626000830185610ee0565b61166f6020830184610ee0565b9392505050565b60008151905061168581610f81565b92915050565b6000602082840312156116a1576116a0610f14565b5b60006116af84828501611676565b91505092915050565b7f546f6b656e20616c6c6f77616e6365206e6f7420656e6f756768000000000000600082015250565b60006116ee601a83611346565b91506116f9826116b8565b602082019050919050565b6000602082019050818103600083015261171d816116e1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061175e82610f77565b915061176983610f77565b925082820190508082111561178157611780611724565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806117ce57607f821691505b6020821081036117e1576117e0611787565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026118497fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261180c565b611853868361180c565b95508019841693508086168417925050509392505050565b600061188661188161187c84610f77565b6115f7565b610f77565b9050919050565b6000819050919050565b6118a08361186b565b6118b46118ac8261188d565b848454611819565b825550505050565b600090565b6118c96118bc565b6118d4818484611897565b505050565b5b818110156118f8576118ed6000826118c1565b6001810190506118da565b5050565b601f82111561193d5761190e816117e7565b611917846117fc565b81016020851015611926578190505b61193a611932856117fc565b8301826118d9565b50505b505050565b600082821c905092915050565b600061196060001984600802611942565b1980831691505092915050565b6000611979838361194f565b9150826002028217905092915050565b6119928261149b565b67ffffffffffffffff8111156119ab576119aa61101f565b5b6119b582546117b6565b6119c08282856118fc565b600060209050601f8311600181146119f357600084156119e1578287015190505b6119eb858261196d565b865550611a53565b601f198416611a01866117e7565b60005b82811015611a2957848901518255600182019150602085019450602081019050611a04565b86831015611a465784890151611a42601f89168261194f565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611aa38261149b565b611aad8185611a87565b9350611abd8185602086016114a6565b611ac68161100e565b840191505092915050565b6000611add8383611a98565b905092915050565b6000602082019050919050565b6000611afd82611a5b565b611b078185611a66565b935083602082028501611b1985611a77565b8060005b85811015611b555784840389528151611b368582611ad1565b9450611b4183611ae5565b925060208a01995050600181019050611b1d565b50829750879550505050505092915050565b600060a082019050611b7c6000830188610fda565b611b896020830187610ee0565b611b966040830186610ee0565b8181036060830152611ba881856114d0565b90508181036080830152611bbc8184611af2565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611c24602683611346565b9150611c2f82611bc8565b604082019050919050565b60006020820190508181036000830152611c5381611c17565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a20436f6e74726f6c6c657220616460008201527f6472657373206d75737420626520646566696e65640000000000000000000000602082015250565b6000611cb6603583611346565b9150611cc182611c5a565b604082019050919050565b60006020820190508181036000830152611ce581611ca9565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a2063616e4368616e6765436f6e7460008201527f726f6c6c6572416464726573732069732064697361626c656400000000000000602082015250565b6000611d48603983611346565b9150611d5382611cec565b604082019050919050565b60006020820190508181036000830152611d7781611d3b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611db4602083611346565b9150611dbf82611d7e565b602082019050919050565b60006020820190508181036000830152611de381611da7565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a204f6e6c792074686520636f6e7460008201527f726f6c6c65722063616e2063616c6c2074686973206d6574686f640000000000602082015250565b6000611e46603b83611346565b9150611e5182611dea565b604082019050919050565b60006020820190508181036000830152611e7581611e39565b905091905056fea26469706673582212205534f11db26136afeb272df9aa51ae2fffccf844dbcc237e6fe2142632ee958764736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address)": {
        "notice": "Init"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1483,
        "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
        "label": "controllerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1486,
        "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
        "label": "canChangeControllerAddress",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6,
        "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
        "label": "_initialized",
        "offset": 21,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
        "label": "_initializing",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3040,
        "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3043,
        "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
        "label": "tokenContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IHiveToken)6250"
      },
      {
        "astId": 3045,
        "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
        "label": "requiredDeposit",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3047,
        "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
        "label": "nextJobID",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3052,
        "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
        "label": "jobOffers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(JobOffer)6428_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IHiveToken)6250": {
        "encoding": "inplace",
        "label": "contract IHiveToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(JobOffer)6428_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SharedStructs.JobOffer)",
        "numberOfBytes": "32",
        "value": "t_struct(JobOffer)6428_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(JobOffer)6428_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.JobOffer",
        "members": [
          {
            "astId": 6418,
            "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6420,
            "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
            "label": "calling_contract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6422,
            "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
            "label": "payee",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6424,
            "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
            "label": "module",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 6427,
            "contract": "contracts/HiveOnChainJobCreator.sol:HiveOnChainJobCreator",
            "label": "inputs",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}