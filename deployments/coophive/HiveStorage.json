{
  "address": "0xe166A5787a663445465789c218f9b9CBb3583260",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum SharedStructs.AgreementState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "DealStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "acceptResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "resultsId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dataId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "instructionCount",
          "type": "uint256"
        }
      ],
      "name": "addResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "resultsId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "instructionCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Result",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "agreeJobCreator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SharedStructs.AgreementState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resourceProviderAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobCreatorAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealCreatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsSubmittedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCheckedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationRejectedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutAgreeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutSubmitResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutJudgeResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutMediateResultsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "agreeResourceProvider",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SharedStructs.AgreementState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resourceProviderAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobCreatorAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealCreatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsSubmittedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCheckedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationRejectedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutAgreeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutSubmitResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutJudgeResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutMediateResultsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "checkResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableChangeControllerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "solver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "jobCreator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "resourceProvider",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "mediators",
              "type": "address[]"
            }
          ],
          "internalType": "struct SharedStructs.DealMembers",
          "name": "members",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "agree",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "submitResults",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "judgeResults",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "mediateResults",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharedStructs.DealTimeouts",
          "name": "timeouts",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "instructionPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCollateralMultiple",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.DealPricing",
          "name": "pricing",
          "type": "tuple"
        }
      ],
      "name": "ensureDeal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "solver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "jobCreator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "resourceProvider",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "mediators",
                  "type": "address[]"
                }
              ],
              "internalType": "struct SharedStructs.DealMembers",
              "name": "members",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "agree",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "submitResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "judgeResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "mediateResults",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeouts",
              "name": "timeouts",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "instructionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentCollateral",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "resultsCollateralMultiple",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mediationFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealPricing",
              "name": "pricing",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharedStructs.Deal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getAgreement",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SharedStructs.AgreementState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resourceProviderAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobCreatorAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealCreatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsSubmittedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCheckedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationRejectedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutAgreeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutSubmitResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutJudgeResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutMediateResultsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getControllerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getDeal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "solver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "jobCreator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "resourceProvider",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "mediators",
                  "type": "address[]"
                }
              ],
              "internalType": "struct SharedStructs.DealMembers",
              "name": "members",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "agree",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "submitResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "judgeResults",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "timeout",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct SharedStructs.DealTimeout",
                  "name": "mediateResults",
                  "type": "tuple"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeouts",
              "name": "timeouts",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "instructionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentCollateral",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "resultsCollateralMultiple",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mediationFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealPricing",
              "name": "pricing",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharedStructs.Deal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "getDealsForParty",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getJobCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "dealId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "resultsId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "instructionCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Result",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "getResultsCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "hasDeal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "internalType": "enum SharedStructs.AgreementState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "isState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "mediationAcceptResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "mediationRejectResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controllerAddress",
          "type": "address"
        }
      ],
      "name": "setControllerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutAgree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutJudgeResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutMediateResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutSubmitResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x26a86598a7dbe417ce8aefc435948bcbc3edcee1a5ac081841c1adb3302fee9f",
  "receipt": {
    "to": null,
    "from": "0x823531B7c7843D8c3821B19D70cbFb6173b9Cb02",
    "contractAddress": "0xe166A5787a663445465789c218f9b9CBb3583260",
    "transactionIndex": 0,
    "gasUsed": "4577140",
    "logsBloom": "0x
    "blockHash": "0xf8fca124df1d94f1ad2986b90b799214b3e45444aa61934dc9509f45239da1a4",
    "transactionHash": "0x26a86598a7dbe417ce8aefc435948bcbc3edcee1a5ac081841c1adb3302fee9f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10717,
        "transactionHash": "0x26a86598a7dbe417ce8aefc435948bcbc3edcee1a5ac081841c1adb3302fee9f",
        "address": "0xe166A5787a663445465789c218f9b9CBb3583260",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000823531b7c7843d8c3821b19d70cbfb6173b9cb02"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf8fca124df1d94f1ad2986b90b799214b3e45444aa61934dc9509f45239da1a4"
      }
    ],
    "blockNumber": 10717,
    "cumulativeGasUsed": "4577140",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab0f00af5c684f8beb74f63719b99652",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"DealStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"acceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"name\":\"addResult\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Result\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"agreeJobCreator\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealCreatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAgreeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"agreeResourceProvider\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealCreatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAgreeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"checkResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableChangeControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"internalType\":\"struct SharedStructs.DealMembers\",\"name\":\"members\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"agree\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"submitResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"judgeResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"mediateResults\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.DealTimeouts\",\"name\":\"timeouts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealPricing\",\"name\":\"pricing\",\"type\":\"tuple\"}],\"name\":\"ensureDeal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"internalType\":\"struct SharedStructs.DealMembers\",\"name\":\"members\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"agree\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"submitResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"judgeResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"mediateResults\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.DealTimeouts\",\"name\":\"timeouts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealPricing\",\"name\":\"pricing\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.Deal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getAgreement\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealCreatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAgreeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getDeal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"internalType\":\"struct SharedStructs.DealMembers\",\"name\":\"members\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"agree\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"submitResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"judgeResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"mediateResults\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.DealTimeouts\",\"name\":\"timeouts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealPricing\",\"name\":\"pricing\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.Deal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"getDealsForParty\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getJobCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getResult\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Result\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"getResultsCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"hasDeal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"isState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"mediationAcceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"mediationRejectResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"}],\"name\":\"setControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutAgree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutJudgeResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutMediateResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutSubmitResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptResult(string)\":{\"notice\":\"Judge Results\"},\"getAgreement(string)\":{\"notice\":\"Agreements\"},\"getDeal(string)\":{\"notice\":\"Deals\"},\"getJobCost(string)\":{\"notice\":\"Costings\"},\"getResult(string)\":{\"notice\":\"Post Results\"},\"hasDeal(string)\":{\"notice\":\"Checkers\"},\"initialize()\":{\"notice\":\"Init\"},\"mediationAcceptResult(string)\":{\"notice\":\"Mediati:\"},\"timeoutAgree(string)\":{\"notice\":\"Timeouts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HiveStorage.sol\":\"HiveStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/ControllerOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// as well as being ownable (i.e. our admin wallet)\\n// this contract has a modifier called onlyController\\n// it works the same way as Ownable but only the Owner\\n// can change the controller address so it gives us a way of\\n// re-pointing contracts if needed\\ncontract ControllerOwnable is Ownable {\\n\\n  // the address of the controller that is allowed to call functions\\n  address private controllerAddress;\\n\\n  // used to \\\"freeze\\\" the controller address - even the admin cannot\\n  // change it from this point onwards\\n  bool private canChangeControllerAddress = true;\\n\\n  modifier onlyController() {\\n    _checkControllerAccess();\\n    _;\\n  }\\n\\n  function _checkControllerAccess() internal view virtual returns (bool) {\\n    require(controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(_msgSender() == controllerAddress, \\\"ControllerOwnable: Only the controller can call this method\\\");\\n    return true;\\n  }\\n\\n  function setControllerAddress(address _controllerAddress) public onlyOwner {\\n    require(_controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(canChangeControllerAddress, \\\"ControllerOwnable: canChangeControllerAddress is disabled\\\");\\n    controllerAddress = _controllerAddress;\\n  }\\n\\n  function getControllerAddress() public view returns (address) {\\n    return controllerAddress;\\n  }\\n\\n  function disableChangeControllerAddress() public onlyOwner {\\n    canChangeControllerAddress = false;\\n  }\\n}\\n\",\"keccak256\":\"0xecfd8b0beb12340f51cefee5e121932fa7aee0a41fb7d0233966419d153ef429\",\"license\":\"Apache-2.0\"},\"contracts/HiveStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\nimport \\\"./ControllerOwnable.sol\\\";\\n\\ncontract HiveStorage is ControllerOwnable, Initializable {\\n\\n  // the address that is allowed to be the msg.sender for the payment functions\\n  address private controllerAddress;\\n\\n  // used to cut off upgrades for the remote contract\\n  bool private canChangeControllerAddress = true;\\n\\n  // a map of deal id -> deal\\n  mapping(string => SharedStructs.Deal) private deals;\\n\\n  // a map of party -> dealid[]\\n  mapping(address => string[]) private dealsForParty;\\n\\n  // a map of deal id -> agreement\\n  mapping(string => SharedStructs.Agreement) private agreements;\\n\\n  // a map of deal id -> result\\n  mapping(string => SharedStructs.Result) private results;\\n\\n  // a map of deal id -> result\\n  mapping(string => SharedStructs.Result) private mediations;\\n\\n  event DealStateChange(\\n    string dealId,\\n    SharedStructs.AgreementState state\\n  );\\n\\n  /**\\n   * Init\\n   */\\n\\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n  function initialize() public initializer {\\n    \\n  }\\n\\n  /**\\n   * Deals\\n   */\\n\\n  function getDeal(\\n    string memory dealId\\n  ) public view returns (SharedStructs.Deal memory) {\\n    return deals[dealId];\\n  }\\n\\n  function getDealsForParty(\\n    address party\\n  ) public view returns (string[] memory) {\\n    return dealsForParty[party];\\n  }\\n\\n  function checkDealMembers(\\n    SharedStructs.DealMembers memory members\\n  ) private pure {\\n    require(members.resourceProvider != address(0), \\\"RP missing\\\");\\n    require(members.jobCreator != address(0), \\\"JC missing\\\");\\n    require(members.solver != address(0), \\\"Solver missing\\\");\\n    require(members.mediators.length > 0, \\\"Mediators <= 0\\\"); //TODO: make it necessary only if JC!=RP\\n\\n//    if (members.resourceProvider != members.jobCreator){\\n//      //TODO: HiveController, HiveMediationRandom changes required to support 0 mediator cases.\\n//      require(members.mediators.length > 0, \\\"Mediators <= 0\\\");\\n//    }\\n\\n//    require(members.resourceProvider != members.jobCreator, \\\"RP / JC same\\\"); #Fix #119\\n  }\\n\\n  function checkTimeouts(\\n    SharedStructs.DealTimeouts memory timeouts\\n  ) private pure {\\n    // the cost of the agree timeout cannot be > 0 because the whole point is\\n    // one party has not paid anything into the contract is what has timed out\\n    require(timeouts.agree.collateral == 0, \\\"Agree deposit must be 0\\\");\\n    // the same is true of the mediation timeout - it's cost cannot be zero\\n    require(timeouts.mediateResults.collateral == 0, \\\"Mediate deposit must be 0\\\");\\n  }\\n\\n  function compareDealMembers(\\n    SharedStructs.DealMembers memory members1,\\n    SharedStructs.DealMembers memory members2\\n  ) private pure {\\n    require(members1.resourceProvider == members2.resourceProvider, \\\"RP\\\");\\n    require(members1.jobCreator == members2.jobCreator, \\\"JC\\\");\\n    require(members1.solver == members2.solver, \\\"Solver\\\");\\n    require(members1.mediators.length == members2.mediators.length, \\\"Mediators\\\");\\n    for (uint256 i = 0; i < members1.mediators.length; i++) {\\n      require(members1.mediators[i] == members2.mediators[i], \\\"Mediator\\\");\\n    }\\n  }\\n\\n  function compareDealTimeout(\\n    SharedStructs.DealTimeout memory timeout1,\\n    SharedStructs.DealTimeout memory timeout2\\n  ) private pure {\\n    require(timeout1.timeout == timeout2.timeout, \\\"Timeout\\\");\\n    require(timeout1.collateral == timeout2.collateral, \\\"Collateral\\\");\\n  }\\n  \\n  function compareDealTimeouts(\\n    SharedStructs.DealTimeouts memory timeouts1,\\n    SharedStructs.DealTimeouts memory timeouts2\\n  ) private pure {\\n    compareDealTimeout(timeouts1.agree, timeouts2.agree);\\n    compareDealTimeout(timeouts1.submitResults, timeouts2.submitResults);\\n    compareDealTimeout(timeouts1.judgeResults, timeouts2.judgeResults);\\n    compareDealTimeout(timeouts1.mediateResults, timeouts2.mediateResults);\\n  }\\n\\n  function compareDealPricing(\\n    SharedStructs.DealPricing memory pricing1,\\n    SharedStructs.DealPricing memory pricing2\\n  ) private pure {\\n    require(pricing1.instructionPrice == pricing2.instructionPrice, \\\"Price\\\");\\n    require(pricing1.paymentCollateral == pricing2.paymentCollateral, \\\"Payment\\\");\\n    require(pricing1.resultsCollateralMultiple == pricing2.resultsCollateralMultiple, \\\"Results\\\");\\n    require(pricing1.mediationFee == pricing2.mediationFee, \\\"Mediation\\\");\\n  }\\n\\n  function ensureDeal(\\n    string memory dealId,\\n    SharedStructs.DealMembers memory members,\\n    SharedStructs.DealTimeouts memory timeouts,\\n    SharedStructs.DealPricing memory pricing\\n  ) public onlyController returns (SharedStructs.Deal memory) {\\n    require(isState(dealId, SharedStructs.AgreementState.DealNegotiating), \\\"DealNegotiating\\\");\\n    checkDealMembers(members);\\n    checkTimeouts(timeouts);\\n    if(hasDeal(dealId)) {\\n      SharedStructs.Deal memory existingDeal = getDeal(dealId);\\n      compareDealMembers(existingDeal.members, members);\\n      compareDealTimeouts(existingDeal.timeouts, timeouts);\\n      compareDealPricing(existingDeal.pricing, pricing);\\n    }\\n    else {\\n      deals[dealId] = SharedStructs.Deal(\\n        dealId,\\n        members,\\n        timeouts,\\n        pricing\\n      );\\n      dealsForParty[members.resourceProvider].push(dealId);\\n      dealsForParty[members.jobCreator].push(dealId);\\n    }\\n    return deals[dealId];\\n  }\\n\\n  /**\\n   * Agreements\\n   */\\n  \\n  function getAgreement(\\n    string memory dealId\\n  ) public view returns (SharedStructs.Agreement memory) {\\n    return agreements[dealId];\\n  }\\n\\n  function agreeResourceProvider(\\n    string memory dealId\\n  ) public onlyController returns (SharedStructs.Agreement memory) {\\n    require(hasDeal(dealId), \\\"Deal does not exist\\\");\\n    require(agreements[dealId].resourceProviderAgreedAt == 0, \\\"RP has already agreed\\\");\\n    agreements[dealId].resourceProviderAgreedAt = block.timestamp;\\n    _maybeAgreeDeal(dealId);\\n    return agreements[dealId];\\n  }\\n\\n  function agreeJobCreator(\\n    string memory dealId\\n  ) public onlyController returns (SharedStructs.Agreement memory) {\\n    require(hasDeal(dealId), \\\"Deal does not exist\\\");\\n    require(agreements[dealId].jobCreatorAgreedAt == 0, \\\"JC has already agreed\\\");\\n    agreements[dealId].jobCreatorAgreedAt = block.timestamp;\\n    _maybeAgreeDeal(dealId);\\n    return agreements[dealId];\\n  }\\n\\n  /**\\n   * Post Results\\n   */\\n\\n  function getResult(\\n    string memory dealId\\n  ) public view returns (SharedStructs.Result memory) {\\n    return results[dealId];\\n  }\\n\\n  function addResult(\\n    string memory dealId,\\n    string memory resultsId,\\n    string memory dataId,\\n    uint256 instructionCount\\n  ) public onlyController returns (SharedStructs.Result memory) {\\n    require(isState(dealId, SharedStructs.AgreementState.DealAgreed), \\\"DealAgreed\\\");\\n    agreements[dealId].resultsSubmittedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsSubmitted);\\n    results[dealId] = SharedStructs.Result(\\n      dealId,\\n      resultsId,\\n      dataId,\\n      instructionCount\\n    );\\n    return results[dealId];\\n  }\\n\\n  /**\\n   * Judge Results\\n   */\\n\\n  function acceptResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    agreements[dealId].resultsAcceptedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsAccepted);\\n  }\\n\\n  function checkResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    agreements[dealId].resultsCheckedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.ResultsChecked);\\n  }\\n\\n  /**\\n   * Mediati:\\n   */\\n\\n  function mediationAcceptResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \\\"ResultsChecked\\\");\\n    agreements[dealId].mediationAcceptedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.MediationAccepted);\\n  }\\n\\n  function mediationRejectResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \\\"ResultsChecked\\\");\\n    agreements[dealId].mediationRejectedAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.MediationRejected);\\n  }\\n\\n  /**\\n   * Timeouts\\n   */\\n\\n  // called because one party submitted a deal and the other party\\n  // did not agree in time\\n  function timeoutAgree(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.DealNegotiating), \\\"DealNegotiating\\\");\\n    agreements[dealId].timeoutAgreeAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutAgree);\\n  }\\n\\n  // called because the JC waited too long for a result to be submitted\\n  // and wants it's money back\\n  function timeoutSubmitResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.DealAgreed), \\\"DealAgreed\\\");\\n    agreements[dealId].timeoutSubmitResultsAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutSubmitResults);\\n  }\\n\\n  // called because the RP waited too long for a judgement of it's results\\n  // and wants it's money back\\n  function timeoutJudgeResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    agreements[dealId].timeoutJudgeResultsAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutJudgeResults);\\n  }\\n  // called because the RP or JC waited too long for a mediation of it's results\\n  // and both want their money back\\n  function timeoutMediateResult(\\n    string memory dealId\\n  ) public onlyController {\\n    require(isState(dealId, SharedStructs.AgreementState.ResultsChecked), \\\"ResultsChecked\\\");\\n    agreements[dealId].timeoutMediateResultsAt = block.timestamp;\\n    _changeAgreementState(dealId, SharedStructs.AgreementState.TimeoutMediateResults);\\n  }\\n\\n  /**\\n   * Costings\\n   */\\n\\n  function getJobCost(\\n    string memory dealId\\n  ) public view returns (uint256) {\\n    return deals[dealId].pricing.instructionPrice * results[dealId].instructionCount;\\n  }\\n\\n  function getResultsCollateral(\\nstring memory dealId\\n  ) public view returns (uint256) {\\n    return deals[dealId].pricing.resultsCollateralMultiple * getJobCost(dealId);\\n  }\\n\\n  /**\\n   * Checkers\\n   */\\n\\n  function hasDeal(\\n    string memory dealId\\n  ) public view returns (bool) {\\n    return  bytes(getDeal(dealId).dealId).length > 0;\\n  }\\n\\n  function isState(\\n    string memory dealId,\\n    SharedStructs.AgreementState state\\n  ) public view returns (bool) {\\n    // if we don't have a deal, we should check against DealNegotiating\\n    // as this is the default state - otherwise it's impossible to check\\n    // for isState('DealNegotiating')\\n    if(!hasDeal(dealId)) {\\n      return state == SharedStructs.AgreementState.DealNegotiating;\\n    }\\n    return agreements[dealId].state == state;\\n  }\\n\\n  /**\\n   * Utils\\n   */\\n\\n  function _maybeAgreeDeal(\\n    string memory dealId\\n  ) private {\\n    if(agreements[dealId].resourceProviderAgreedAt != 0 && agreements[dealId].jobCreatorAgreedAt != 0) {\\n      agreements[dealId].dealAgreedAt = block.timestamp;\\n      _changeAgreementState(dealId, SharedStructs.AgreementState.DealAgreed);\\n    } else {\\n      // this is used so we can know if a party can call an agree timeout trigger\\n      agreements[dealId].dealCreatedAt = block.timestamp;\\n    }\\n  }\\n\\n  function _changeAgreementState(\\n    string memory dealId,\\n    SharedStructs.AgreementState state\\n  ) private {\\n    agreements[dealId].state = state;\\n    emit DealStateChange(dealId, state);\\n  }\\n}\\n\",\"keccak256\":\"0xaa0b2283a75f55ceec65cb97b65b8e10a755b2e72e98e0cd5340a55aee53f3e9\",\"license\":\"Apache-2.0\"},\"contracts/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nlibrary SharedStructs {\\n\\n  enum ServiceType {\\n    Solver,\\n    Mediator,\\n    ResourceProvider,\\n    JobCreator\\n  }\\n\\n  enum AgreementState {\\n\\n    // the two parties have not yet both agreed to the deal\\n    DealNegotiating,\\n\\n    // both parties have agreed\\n    DealAgreed,\\n\\n    // results have been submitted by the RP\\n    ResultsSubmitted,\\n\\n    // the JC has accepted the results\\n    ResultsAccepted,\\n\\n    // the JC has checked the results\\n    ResultsChecked,\\n\\n    // a mediator has accepted the results\\n    MediationAccepted,\\n\\n    // a mediator has rejected the results\\n    MediationRejected,\\n\\n    // this means the counter-party did not agree to the deal in time\\n    TimeoutAgree,\\n\\n    // this means the RP did not submit results in time\\n    TimeoutSubmitResults,\\n\\n    // this means the JC did not accept or reject results in time\\n    TimeoutJudgeResults,\\n\\n    // this means the mediator did not accept or submit judgement in time\\n    TimeoutMediateResults\\n\\n  }\\n\\n  // we map addresses onto infomation about the user\\n  struct User {\\n    address userAddress;\\n    // the CID of information for this user\\n    string metadataCID;\\n    string url;\\n    ServiceType[] roles;\\n  }\\n\\n  // the various addresses involved in runnig a deal\\n  struct DealMembers {\\n    // the address of the solver service that the RP and JC have agreed to use\\n    address solver;\\n    // the addresses of the RP and JC that have agreed to this deal\\n    address jobCreator;\\n    address resourceProvider;\\n    // the list of mediators that the RP and JC have agreed to use\\n    address[] mediators;\\n  }\\n\\n  // a timeout represents the agreed amount of time and the penalty\\n  // that is applied if the timeout is exceeded  \\n  struct DealTimeout {\\n    uint256 timeout;\\n    uint256 collateral;\\n  }\\n  \\n  // the various forms of timeout a deal can have\\n  struct DealTimeouts { \\n    DealTimeout agree;\\n    DealTimeout submitResults;\\n    DealTimeout judgeResults;\\n    DealTimeout mediateResults;\\n  }\\n\\n  // configure the cost of a deal\\n  struct DealPricing {\\n  // agreed price per instruction\\n    uint256 instructionPrice;\\n\\n    // the collateral that the JC has put up to pay for the job\\n    // the final cost of the job will be deducted from this\\n    uint256 paymentCollateral;\\n\\n    // how much collateral the RP will post to attest it's results are correct\\n    // this is a multiple of the cost of the job which is known at results\\n    // submission time\\n    uint256 resultsCollateralMultiple;\\n\\n    // how much is the JC willing to pay the mediator to resolve disputes\\n    uint256 mediationFee;\\n  }\\n\\n  // a Deal forms the information that is agreed between both parties\\n  // both parties must have called \\\"agree_deal\\\" with the exact\\n  // same parameters before the deal is considered valid\\n  // a Deal is immutable - nothing about it can be updated\\n  struct Deal {\\n    // the CID of the Deal document on IPFS (and directory service)\\n    // this contains the job spec, the job offer and the resource offer\\n    string dealId;\\n\\n    // who is participating in this deal\\n    DealMembers members;\\n    \\n    // the timeout settings for a deal\\n    DealTimeouts timeouts;\\n\\n    // the pricing settings for a deal\\n    DealPricing pricing;    \\n  }\\n\\n  // what the RP submits back once having run the job\\n  // this is also immutable\\n  struct Result {\\n    // the id of the deal that this result is for\\n    string dealId;\\n\\n    // the CID of the results on IPFS (and directory service)\\n    // NOTE - this is not the CID of actual results data rather\\n    // of the JSON object reporting that data\\n    string resultsId;\\n\\n    // this is the actual lower level data CID\\n    string dataId;\\n\\n    // how many instructions were executed by the RP\\n    uint256 instructionCount;\\n  }\\n\\n  // an agreement keeps track of the state of a deal and it's fields can be mutated\\n  struct Agreement {\\n    // the current state of the agreement\\n    AgreementState state;\\n\\n    uint256 resourceProviderAgreedAt;\\n    uint256 jobCreatorAgreedAt;\\n    uint256 dealCreatedAt;\\n    uint256 dealAgreedAt;\\n\\n    uint256 resultsSubmittedAt;\\n    uint256 resultsAcceptedAt;\\n    uint256 resultsCheckedAt;\\n\\n    uint256 mediationAcceptedAt;\\n    uint256 mediationRejectedAt;\\n\\n    uint256 timeoutAgreeAt;\\n    uint256 timeoutSubmitResultsAt;\\n    uint256 timeoutJudgeResultsAt;\\n    uint256 timeoutMediateResultsAt;\\n  }\\n\\n  struct JobOffer {\\n    uint256 id;\\n    \\n    // this is the contract that will be triggered\\n    // once there are some results\\n    address calling_contract;\\n\\n    // this is the address that is paying for the job\\n    // they must have called approve on the token contract\\n    // and granted the solver address the number of tokens\\n    // required\\n    address payee;\\n\\n    // the job spec\\n    string module;\\n    string[] inputs;\\n  }\\n}\\n\",\"keccak256\":\"0x17ae1fe0274d61f5460caee95e214371a378a3e49730e5bdc4833506de99fcb6\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80638224ce5f116100f9578063cdd82d1d11610097578063e850be3711610071578063e850be37146104dc578063ec95b967146104f8578063f2fde38b14610528578063f3d3d44814610544576101a9565b8063cdd82d1d14610460578063e707918014610490578063e7b957d1146104c0576101a9565b8063a4702958116100d3578063a4702958146103d8578063a6370b0e146103e2578063b050e74b14610412578063c57380a214610442576101a9565b80638224ce5f1461036e578063824518aa1461039e5780638da5cb5b146103ba576101a9565b8063498cc70d1161016657806373db5c6a1161014057806373db5c6a146102fc578063795f9abf1461032c57806380ffdfe0146103485780638129fc1c14610364576101a9565b8063498cc70d146102a6578063511a9f68146102d6578063715018a6146102f2576101a9565b806311d5af33146101ae5780632244ad2b146101de578063297f9e551461020e5780633955548e1461022a5780633c4135da1461025a57806346834d1e1461028a575b600080fd5b6101c860048036038101906101c391906130fd565b610560565b6040516101d5919061327c565b60405180910390f35b6101f860048036038101906101f391906133d3565b610678565b6040516102059190613437565b60405180910390f35b610228600480360381019061022391906133d3565b610691565b005b610244600480360381019061023f9190613488565b610718565b60405161025191906135c3565b60405180910390f35b610274600480360381019061026f91906133d3565b610a25565b604051610281919061377c565b60405180910390f35b6102a4600480360381019061029f91906133d3565b610bff565b005b6102c060048036038101906102bb91906133d3565b610c86565b6040516102cd91906135c3565b60405180910390f35b6102f060048036038101906102eb91906133d3565b610e7e565b005b6102fa610f05565b005b610316600480360381019061031191906133d3565b610f19565b60405161032391906137a7565b60405180910390f35b610346600480360381019061034191906133d3565b610f73565b005b610362600480360381019061035d91906133d3565b610ffa565b005b61036c611081565b005b610388600480360381019061038391906133d3565b6111ba565b60405161039591906137a7565b60405180910390f35b6103b860048036038101906103b391906133d3565b6111fb565b005b6103c2611282565b6040516103cf91906137d1565b60405180910390f35b6103e06112ab565b005b6103fc60048036038101906103f79190613a93565b6112d0565b6040516104099190613d9b565b60405180910390f35b61042c60048036038101906104279190613de2565b6119dd565b6040516104399190613437565b60405180910390f35b61044a611a79565b60405161045791906137d1565b60405180910390f35b61047a600480360381019061047591906133d3565b611aa3565b604051610487919061377c565b60405180910390f35b6104aa60048036038101906104a591906133d3565b611b99565b6040516104b79190613d9b565b60405180910390f35b6104da60048036038101906104d591906133d3565b611ef7565b005b6104f660048036038101906104f191906133d3565b611f7e565b005b610512600480360381019061050d91906133d3565b612005565b60405161051f919061377c565b60405180910390f35b610542600480360381019061053d91906130fd565b6121df565b005b61055e600480360381019061055991906130fd565b612262565b005b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561066d5783829060005260206000200180546105e090613e6d565b80601f016020809104026020016040519081016040528092919081815260200182805461060c90613e6d565b80156106595780601f1061062e57610100808354040283529160200191610659565b820191906000526020600020905b81548152906001019060200180831161063c57829003601f168201915b5050505050815260200190600101906105c1565b505050509050919050565b60008061068483611b99565b6000015151119050919050565b61069961236c565b506106a58160026119dd565b6106e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106db90613efb565b60405180910390fd5b426005826040516106f59190613f57565b90815260200160405180910390206006018190555061071581600361249c565b50565b610720612e15565b61072861236c565b506107348560016119dd565b610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a90613fba565b60405180910390fd5b426005866040516107849190613f57565b9081526020016040518091039020600501819055506107a485600261249c565b6040518060800160405280868152602001858152602001848152602001838152506006866040516107d59190613f57565b908152602001604051809103902060008201518160000190816107f89190614186565b50602082015181600101908161080e9190614186565b5060408201518160020190816108249190614186565b50606082015181600301559050506006856040516108429190613f57565b908152602001604051809103902060405180608001604052908160008201805461086b90613e6d565b80601f016020809104026020016040519081016040528092919081815260200182805461089790613e6d565b80156108e45780601f106108b9576101008083540402835291602001916108e4565b820191906000526020600020905b8154815290600101906020018083116108c757829003601f168201915b505050505081526020016001820180546108fd90613e6d565b80601f016020809104026020016040519081016040528092919081815260200182805461092990613e6d565b80156109765780601f1061094b57610100808354040283529160200191610976565b820191906000526020600020905b81548152906001019060200180831161095957829003601f168201915b5050505050815260200160028201805461098f90613e6d565b80601f01602080910402602001604051908101604052809291908181526020018280546109bb90613e6d565b8015610a085780601f106109dd57610100808354040283529160200191610a08565b820191906000526020600020905b8154815290600101906020018083116109eb57829003601f168201915b505050505081526020016003820154815250509050949350505050565b610a2d612e3d565b610a3561236c565b50610a3f82610678565b610a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a75906142a4565b60405180910390fd5b6000600583604051610a909190613f57565b90815260200160405180910390206002015414610ae2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad990614310565b60405180910390fd5b42600583604051610af39190613f57565b908152602001604051809103902060020181905550610b1182612522565b600582604051610b219190613f57565b9081526020016040518091039020604051806101c00160405290816000820160009054906101000a900460ff16600a811115610b6057610b5f6135e5565b5b600a811115610b7257610b716135e5565b5b8152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820154815250509050919050565b610c0761236c565b50610c138160026119dd565b610c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4990613efb565b60405180910390fd5b42600582604051610c639190613f57565b908152602001604051809103902060070181905550610c8381600461249c565b50565b610c8e612e15565b600682604051610c9e9190613f57565b9081526020016040518091039020604051806080016040529081600082018054610cc790613e6d565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf390613e6d565b8015610d405780601f10610d1557610100808354040283529160200191610d40565b820191906000526020600020905b815481529060010190602001808311610d2357829003601f168201915b50505050508152602001600182018054610d5990613e6d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8590613e6d565b8015610dd25780601f10610da757610100808354040283529160200191610dd2565b820191906000526020600020905b815481529060010190602001808311610db557829003601f168201915b50505050508152602001600282018054610deb90613e6d565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1790613e6d565b8015610e645780601f10610e3957610100808354040283529160200191610e64565b820191906000526020600020905b815481529060010190602001808311610e4757829003601f168201915b505050505081526020016003820154815250509050919050565b610e8661236c565b50610e928160016119dd565b610ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec890613fba565b60405180910390fd5b42600582604051610ee29190613f57565b9081526020016040518091039020600b0181905550610f0281600861249c565b50565b610f0d6125db565b610f176000612659565b565b6000600682604051610f2b9190613f57565b908152602001604051809103902060030154600383604051610f4d9190613f57565b9081526020016040518091039020600d0160000154610f6c919061435f565b9050919050565b610f7b61236c565b50610f878160006119dd565b610fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbd906143ed565b60405180910390fd5b42600582604051610fd79190613f57565b9081526020016040518091039020600a0181905550610ff781600761249c565b50565b61100261236c565b5061100e8160046119dd565b61104d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104490614459565b60405180910390fd5b4260058260405161105e9190613f57565b90815260200160405180910390206009018190555061107e81600661249c565b50565b6000600160169054906101000a900460ff161590508080156110b4575060018060159054906101000a900460ff1660ff16105b806110e257506110c33061271d565b1580156110e1575060018060159054906101000a900460ff1660ff16145b5b611121576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611118906144eb565b60405180910390fd5b60018060156101000a81548160ff021916908360ff160217905550801561115d5760018060166101000a81548160ff0219169083151502179055505b80156111b7576000600160166101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516111ae9190614553565b60405180910390a15b50565b60006111c582610f19565b6003836040516111d59190613f57565b9081526020016040518091039020600d01600201546111f4919061435f565b9050919050565b61120361236c565b5061120f8160046119dd565b61124e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124590614459565b60405180910390fd5b4260058260405161125f9190613f57565b90815260200160405180910390206008018190555061127f81600561249c565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6112b36125db565b6000600160146101000a81548160ff021916908315150217905550565b6112d8612ebe565b6112e061236c565b506112ec8560006119dd565b61132b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611322906143ed565b60405180910390fd5b61133484612740565b61133d836128e4565b61134685610678565b1561138857600061135686611b99565b905061136681602001518661297d565b611374816040015185612bfd565b611382816060015184612c49565b50611684565b6040518060800160405280868152602001858152602001848152602001838152506003866040516113b99190613f57565b908152602001604051809103902060008201518160000190816113dc9190614186565b5060208201518160010160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190805190602001906114d7929190612ef8565b505050604082015181600501600082015181600001600082015181600001556020820151816001015550506020820151816002016000820151816000015560208201518160010155505060408201518160040160008201518160000155602082015181600101555050606082015181600601600082015181600001556020820151816001015550505050606082015181600d0160008201518160000155602082015181600101556040820151816002015560608201518160030155505090505060046000856040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208590806001815401808255809150506001900390600052602060002001600090919091909150908161160c9190614186565b5060046000856020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020859080600181540180825580915050600190039060005260206000200160009091909190915090816116829190614186565b505b6003856040516116949190613f57565b90815260200160405180910390206040518060800160405290816000820180546116bd90613e6d565b80601f01602080910402602001604051908101604052809291908181526020018280546116e990613e6d565b80156117365780601f1061170b57610100808354040283529160200191611736565b820191906000526020600020905b81548152906001019060200180831161171957829003601f168201915b50505050508152602001600182016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054806020026020016040519081016040528092919081815260200182805480156118d657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161188c575b5050505050815250508152602001600582016040518060800160405290816000820160405180604001604052908160008201548152602001600182015481525050815260200160028201604051806040016040529081600082015481526020016001820154815250508152602001600482016040518060400160405290816000820154815260200160018201548152505081526020016006820160405180604001604052908160008201548152602001600182015481525050815250508152602001600d8201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050815250509050949350505050565b60006119e883610678565b611a1b576000600a811115611a00576119ff6135e5565b5b82600a811115611a1357611a126135e5565b5b149050611a73565b81600a811115611a2e57611a2d6135e5565b5b600584604051611a3e9190613f57565b908152602001604051809103902060000160009054906101000a900460ff16600a811115611a6f57611a6e6135e5565b5b1490505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611aab612e3d565b600582604051611abb9190613f57565b9081526020016040518091039020604051806101c00160405290816000820160009054906101000a900460ff16600a811115611afa57611af96135e5565b5b600a811115611b0c57611b0b6135e5565b5b8152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820154815250509050919050565b611ba1612ebe565b600382604051611bb19190613f57565b9081526020016040518091039020604051806080016040529081600082018054611bda90613e6d565b80601f0160208091040260200160405190810160405280929190818152602001828054611c0690613e6d565b8015611c535780601f10611c2857610100808354040283529160200191611c53565b820191906000526020600020905b815481529060010190602001808311611c3657829003601f168201915b50505050508152602001600182016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805480602002602001604051908101604052809291908181526020018280548015611df357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611da9575b5050505050815250508152602001600582016040518060800160405290816000820160405180604001604052908160008201548152602001600182015481525050815260200160028201604051806040016040529081600082015481526020016001820154815250508152602001600482016040518060400160405290816000820154815260200160018201548152505081526020016006820160405180604001604052908160008201548152602001600182015481525050815250508152602001600d8201604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050815250509050919050565b611eff61236c565b50611f0b8160046119dd565b611f4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4190614459565b60405180910390fd5b42600582604051611f5b9190613f57565b9081526020016040518091039020600d0181905550611f7b81600a61249c565b50565b611f8661236c565b50611f928160026119dd565b611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc890613efb565b60405180910390fd5b42600582604051611fe29190613f57565b9081526020016040518091039020600c018190555061200281600961249c565b50565b61200d612e3d565b61201561236c565b5061201f82610678565b61205e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612055906142a4565b60405180910390fd5b60006005836040516120709190613f57565b908152602001604051809103902060010154146120c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b9906145ba565b60405180910390fd5b426005836040516120d39190613f57565b9081526020016040518091039020600101819055506120f182612522565b6005826040516121019190613f57565b9081526020016040518091039020604051806101c00160405290816000820160009054906101000a900460ff16600a8111156121405761213f6135e5565b5b600a811115612152576121516135e5565b5b8152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152602001600d820154815250509050919050565b6121e76125db565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224d9061464c565b60405180910390fd5b61225f81612659565b50565b61226a6125db565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036122d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d0906146de565b60405180910390fd5b600160149054906101000a900460ff16612328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231f90614770565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036123fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f5906146de565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661243f612d75565b73ffffffffffffffffffffffffffffffffffffffff1614612495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248c90614802565b60405180910390fd5b6001905090565b806005836040516124ad9190613f57565b908152602001604051809103902060000160006101000a81548160ff0219169083600a8111156124e0576124df6135e5565b5b02179055507f10ca3d89184491f5d8de422bd36534abe6eb4b4aa1429a261bdb5ff1dd9ac386828260405161251692919061486a565b60405180910390a15050565b60006005826040516125349190613f57565b90815260200160405180910390206001015414158015612576575060006005826040516125619190613f57565b90815260200160405180910390206002015414155b156125b1574260058260405161258c9190613f57565b9081526020016040518091039020600401819055506125ac81600161249c565b6125d8565b426005826040516125c29190613f57565b9081526020016040518091039020600301819055505b50565b6125e3612d75565b73ffffffffffffffffffffffffffffffffffffffff16612601611282565b73ffffffffffffffffffffffffffffffffffffffff1614612657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264e906148e6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16036127b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127aa90614952565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603612826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281d906149be565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1603612899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289090614a2a565b60405180910390fd5b6000816060015151116128e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d890614a96565b60405180910390fd5b50565b60008160000151602001511461292f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292690614b02565b60405180910390fd5b60008160600151602001511461297a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297190614b6e565b60405180910390fd5b50565b806040015173ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff16146129f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ea90614bda565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff1614612a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6090614c46565b60405180910390fd5b806000015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1614612adf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad690614cb2565b60405180910390fd5b80606001515182606001515114612b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2290614d1e565b60405180910390fd5b60005b826060015151811015612bf85781606001518181518110612b5257612b51614d3e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1683606001518281518110612b8757612b86614d3e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614612be5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bdc90614db9565b60405180910390fd5b8080612bf090614dd9565b915050612b2e565b505050565b612c0f82600001518260000151612d7d565b612c2182602001518260200151612d7d565b612c3382604001518260400151612d7d565b612c4582606001518260600151612d7d565b5050565b8060000151826000015114612c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8a90614e6d565b60405180910390fd5b8060200151826020015114612cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd490614ed9565b60405180910390fd5b8060400151826040015114612d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1e90614f45565b60405180910390fd5b8060600151826060015114612d71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6890614fb1565b60405180910390fd5b5050565b600033905090565b8060000151826000015114612dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dbe9061501d565b60405180910390fd5b8060200151826020015114612e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0890615089565b60405180910390fd5b5050565b6040518060800160405280606081526020016060815260200160608152602001600081525090565b604051806101c001604052806000600a811115612e5d57612e5c6135e5565b5b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806080016040528060608152602001612ed8612f82565b8152602001612ee5612fec565b8152602001612ef261302c565b81525090565b828054828255906000526020600020908101928215612f71579160200282015b82811115612f705782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612f18565b5b509050612f7e9190613054565b5090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518060800160405280612fff613071565b815260200161300c613071565b8152602001613019613071565b8152602001613026613071565b81525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b5b8082111561306d576000816000905550600101613055565b5090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006130ca8261309f565b9050919050565b6130da816130bf565b81146130e557600080fd5b50565b6000813590506130f7816130d1565b92915050565b60006020828403121561311357613112613095565b5b6000613121848285016130e8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613190578082015181840152602081019050613175565b60008484015250505050565b6000601f19601f8301169050919050565b60006131b882613156565b6131c28185613161565b93506131d2818560208601613172565b6131db8161319c565b840191505092915050565b60006131f283836131ad565b905092915050565b6000602082019050919050565b60006132128261312a565b61321c8185613135565b93508360208202850161322e85613146565b8060005b8581101561326a578484038952815161324b85826131e6565b9450613256836131fa565b925060208a01995050600181019050613232565b50829750879550505050505092915050565b600060208201905081810360008301526132968184613207565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132e08261319c565b810181811067ffffffffffffffff821117156132ff576132fe6132a8565b5b80604052505050565b600061331261308b565b905061331e82826132d7565b919050565b600067ffffffffffffffff82111561333e5761333d6132a8565b5b6133478261319c565b9050602081019050919050565b82818337600083830152505050565b600061337661337184613323565b613308565b905082815260208101848484011115613392576133916132a3565b5b61339d848285613354565b509392505050565b600082601f8301126133ba576133b961329e565b5b81356133ca848260208601613363565b91505092915050565b6000602082840312156133e9576133e8613095565b5b600082013567ffffffffffffffff8111156134075761340661309a565b5b613413848285016133a5565b91505092915050565b60008115159050919050565b6134318161341c565b82525050565b600060208201905061344c6000830184613428565b92915050565b6000819050919050565b61346581613452565b811461347057600080fd5b50565b6000813590506134828161345c565b92915050565b600080600080608085870312156134a2576134a1613095565b5b600085013567ffffffffffffffff8111156134c0576134bf61309a565b5b6134cc878288016133a5565b945050602085013567ffffffffffffffff8111156134ed576134ec61309a565b5b6134f9878288016133a5565b935050604085013567ffffffffffffffff81111561351a5761351961309a565b5b613526878288016133a5565b925050606061353787828801613473565b91505092959194509250565b61354c81613452565b82525050565b6000608083016000830151848203600086015261356f82826131ad565b9150506020830151848203602086015261358982826131ad565b915050604083015184820360408601526135a382826131ad565b91505060608301516135b86060860182613543565b508091505092915050565b600060208201905081810360008301526135dd8184613552565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b8110613625576136246135e5565b5b50565b600081905061363682613614565b919050565b600061364682613628565b9050919050565b6136568161363b565b82525050565b6101c082016000820151613673600085018261364d565b5060208201516136866020850182613543565b5060408201516136996040850182613543565b5060608201516136ac6060850182613543565b5060808201516136bf6080850182613543565b5060a08201516136d260a0850182613543565b5060c08201516136e560c0850182613543565b5060e08201516136f860e0850182613543565b5061010082015161370d610100850182613543565b50610120820151613722610120850182613543565b50610140820151613737610140850182613543565b5061016082015161374c610160850182613543565b50610180820151613761610180850182613543565b506101a08201516137766101a0850182613543565b50505050565b60006101c082019050613792600083018461365c565b92915050565b6137a181613452565b82525050565b60006020820190506137bc6000830184613798565b92915050565b6137cb816130bf565b82525050565b60006020820190506137e660008301846137c2565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115613811576138106132a8565b5b602082029050602081019050919050565b600080fd5b600061383a613835846137f6565b613308565b9050808382526020820190506020840283018581111561385d5761385c613822565b5b835b81811015613886578061387288826130e8565b84526020840193505060208101905061385f565b5050509392505050565b600082601f8301126138a5576138a461329e565b5b81356138b5848260208601613827565b91505092915050565b6000608082840312156138d4576138d36137ec565b5b6138de6080613308565b905060006138ee848285016130e8565b6000830152506020613902848285016130e8565b6020830152506040613916848285016130e8565b604083015250606082013567ffffffffffffffff81111561393a576139396137f1565b5b61394684828501613890565b60608301525092915050565b600060408284031215613968576139676137ec565b5b6139726040613308565b9050600061398284828501613473565b600083015250602061399684828501613473565b60208301525092915050565b600061010082840312156139b9576139b86137ec565b5b6139c36080613308565b905060006139d384828501613952565b60008301525060406139e784828501613952565b60208301525060806139fb84828501613952565b60408301525060c0613a0f84828501613952565b60608301525092915050565b600060808284031215613a3157613a306137ec565b5b613a3b6080613308565b90506000613a4b84828501613473565b6000830152506020613a5f84828501613473565b6020830152506040613a7384828501613473565b6040830152506060613a8784828501613473565b60608301525092915050565b6000806000806101c08587031215613aae57613aad613095565b5b600085013567ffffffffffffffff811115613acc57613acb61309a565b5b613ad8878288016133a5565b945050602085013567ffffffffffffffff811115613af957613af861309a565b5b613b05878288016138be565b9350506040613b16878288016139a2565b925050610140613b2887828801613a1b565b91505092959194509250565b613b3d816130bf565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613b7b8383613b34565b60208301905092915050565b6000602082019050919050565b6000613b9f82613b43565b613ba98185613b4e565b9350613bb483613b5f565b8060005b83811015613be5578151613bcc8882613b6f565b9750613bd783613b87565b925050600181019050613bb8565b5085935050505092915050565b6000608083016000830151613c0a6000860182613b34565b506020830151613c1d6020860182613b34565b506040830151613c306040860182613b34565b5060608301518482036060860152613c488282613b94565b9150508091505092915050565b604082016000820151613c6b6000850182613543565b506020820151613c7e6020850182613543565b50505050565b61010082016000820151613c9b6000850182613c55565b506020820151613cae6040850182613c55565b506040820151613cc16080850182613c55565b506060820151613cd460c0850182613c55565b50505050565b608082016000820151613cf06000850182613543565b506020820151613d036020850182613543565b506040820151613d166040850182613543565b506060820151613d296060850182613543565b50505050565b60006101c0830160008301518482036000860152613d4d82826131ad565b91505060208301518482036020860152613d678282613bf2565b9150506040830151613d7c6040860182613c84565b506060830151613d90610140860182613cda565b508091505092915050565b60006020820190508181036000830152613db58184613d2f565b905092915050565b600b8110613dca57600080fd5b50565b600081359050613ddc81613dbd565b92915050565b60008060408385031215613df957613df8613095565b5b600083013567ffffffffffffffff811115613e1757613e1661309a565b5b613e23858286016133a5565b9250506020613e3485828601613dcd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613e8557607f821691505b602082108103613e9857613e97613e3e565b5b50919050565b600082825260208201905092915050565b7f526573756c74735375626d697474656400000000000000000000000000000000600082015250565b6000613ee5601083613e9e565b9150613ef082613eaf565b602082019050919050565b60006020820190508181036000830152613f1481613ed8565b9050919050565b600081905092915050565b6000613f3182613156565b613f3b8185613f1b565b9350613f4b818560208601613172565b80840191505092915050565b6000613f638284613f26565b915081905092915050565b7f4465616c41677265656400000000000000000000000000000000000000000000600082015250565b6000613fa4600a83613e9e565b9150613faf82613f6e565b602082019050919050565b60006020820190508181036000830152613fd381613f97565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261403c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613fff565b6140468683613fff565b95508019841693508086168417925050509392505050565b6000819050919050565b600061408361407e61407984613452565b61405e565b613452565b9050919050565b6000819050919050565b61409d83614068565b6140b16140a98261408a565b84845461400c565b825550505050565b600090565b6140c66140b9565b6140d1818484614094565b505050565b5b818110156140f5576140ea6000826140be565b6001810190506140d7565b5050565b601f82111561413a5761410b81613fda565b61411484613fef565b81016020851015614123578190505b61413761412f85613fef565b8301826140d6565b50505b505050565b600082821c905092915050565b600061415d6000198460080261413f565b1980831691505092915050565b6000614176838361414c565b9150826002028217905092915050565b61418f82613156565b67ffffffffffffffff8111156141a8576141a76132a8565b5b6141b28254613e6d565b6141bd8282856140f9565b600060209050601f8311600181146141f057600084156141de578287015190505b6141e8858261416a565b865550614250565b601f1984166141fe86613fda565b60005b8281101561422657848901518255600182019150602085019450602081019050614201565b86831015614243578489015161423f601f89168261414c565b8355505b6001600288020188555050505b505050505050565b7f4465616c20646f6573206e6f7420657869737400000000000000000000000000600082015250565b600061428e601383613e9e565b915061429982614258565b602082019050919050565b600060208201905081810360008301526142bd81614281565b9050919050565b7f4a432068617320616c7265616479206167726565640000000000000000000000600082015250565b60006142fa601583613e9e565b9150614305826142c4565b602082019050919050565b60006020820190508181036000830152614329816142ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061436a82613452565b915061437583613452565b925082820261438381613452565b9150828204841483151761439a57614399614330565b5b5092915050565b7f4465616c4e65676f74696174696e670000000000000000000000000000000000600082015250565b60006143d7600f83613e9e565b91506143e2826143a1565b602082019050919050565b60006020820190508181036000830152614406816143ca565b9050919050565b7f526573756c7473436865636b6564000000000000000000000000000000000000600082015250565b6000614443600e83613e9e565b915061444e8261440d565b602082019050919050565b6000602082019050818103600083015261447281614436565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006144d5602e83613e9e565b91506144e082614479565b604082019050919050565b60006020820190508181036000830152614504816144c8565b9050919050565b6000819050919050565b600060ff82169050919050565b600061453d6145386145338461450b565b61405e565b614515565b9050919050565b61454d81614522565b82525050565b60006020820190506145686000830184614544565b92915050565b7f52502068617320616c7265616479206167726565640000000000000000000000600082015250565b60006145a4601583613e9e565b91506145af8261456e565b602082019050919050565b600060208201905081810360008301526145d381614597565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614636602683613e9e565b9150614641826145da565b604082019050919050565b6000602082019050818103600083015261466581614629565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a20436f6e74726f6c6c657220616460008201527f6472657373206d75737420626520646566696e65640000000000000000000000602082015250565b60006146c8603583613e9e565b91506146d38261466c565b604082019050919050565b600060208201905081810360008301526146f7816146bb565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a2063616e4368616e6765436f6e7460008201527f726f6c6c6572416464726573732069732064697361626c656400000000000000602082015250565b600061475a603983613e9e565b9150614765826146fe565b604082019050919050565b600060208201905081810360008301526147898161474d565b9050919050565b7f436f6e74726f6c6c65724f776e61626c653a204f6e6c792074686520636f6e7460008201527f726f6c6c65722063616e2063616c6c2074686973206d6574686f640000000000602082015250565b60006147ec603b83613e9e565b91506147f782614790565b604082019050919050565b6000602082019050818103600083015261481b816147df565b9050919050565b600061482d82613156565b6148378185613e9e565b9350614847818560208601613172565b6148508161319c565b840191505092915050565b6148648161363b565b82525050565b600060408201905081810360008301526148848185614822565b9050614893602083018461485b565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006148d0602083613e9e565b91506148db8261489a565b602082019050919050565b600060208201905081810360008301526148ff816148c3565b9050919050565b7f5250206d697373696e6700000000000000000000000000000000000000000000600082015250565b600061493c600a83613e9e565b915061494782614906565b602082019050919050565b6000602082019050818103600083015261496b8161492f565b9050919050565b7f4a43206d697373696e6700000000000000000000000000000000000000000000600082015250565b60006149a8600a83613e9e565b91506149b382614972565b602082019050919050565b600060208201905081810360008301526149d78161499b565b9050919050565b7f536f6c766572206d697373696e67000000000000000000000000000000000000600082015250565b6000614a14600e83613e9e565b9150614a1f826149de565b602082019050919050565b60006020820190508181036000830152614a4381614a07565b9050919050565b7f4d65646961746f7273203c3d2030000000000000000000000000000000000000600082015250565b6000614a80600e83613e9e565b9150614a8b82614a4a565b602082019050919050565b60006020820190508181036000830152614aaf81614a73565b9050919050565b7f4167726565206465706f736974206d7573742062652030000000000000000000600082015250565b6000614aec601783613e9e565b9150614af782614ab6565b602082019050919050565b60006020820190508181036000830152614b1b81614adf565b9050919050565b7f4d656469617465206465706f736974206d757374206265203000000000000000600082015250565b6000614b58601983613e9e565b9150614b6382614b22565b602082019050919050565b60006020820190508181036000830152614b8781614b4b565b9050919050565b7f5250000000000000000000000000000000000000000000000000000000000000600082015250565b6000614bc4600283613e9e565b9150614bcf82614b8e565b602082019050919050565b60006020820190508181036000830152614bf381614bb7565b9050919050565b7f4a43000000000000000000000000000000000000000000000000000000000000600082015250565b6000614c30600283613e9e565b9150614c3b82614bfa565b602082019050919050565b60006020820190508181036000830152614c5f81614c23565b9050919050565b7f536f6c7665720000000000000000000000000000000000000000000000000000600082015250565b6000614c9c600683613e9e565b9150614ca782614c66565b602082019050919050565b60006020820190508181036000830152614ccb81614c8f565b9050919050565b7f4d65646961746f72730000000000000000000000000000000000000000000000600082015250565b6000614d08600983613e9e565b9150614d1382614cd2565b602082019050919050565b60006020820190508181036000830152614d3781614cfb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4d65646961746f72000000000000000000000000000000000000000000000000600082015250565b6000614da3600883613e9e565b9150614dae82614d6d565b602082019050919050565b60006020820190508181036000830152614dd281614d96565b9050919050565b6000614de482613452565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614e1657614e15614330565b5b600182019050919050565b7f5072696365000000000000000000000000000000000000000000000000000000600082015250565b6000614e57600583613e9e565b9150614e6282614e21565b602082019050919050565b60006020820190508181036000830152614e8681614e4a565b9050919050565b7f5061796d656e7400000000000000000000000000000000000000000000000000600082015250565b6000614ec3600783613e9e565b9150614ece82614e8d565b602082019050919050565b60006020820190508181036000830152614ef281614eb6565b9050919050565b7f526573756c747300000000000000000000000000000000000000000000000000600082015250565b6000614f2f600783613e9e565b9150614f3a82614ef9565b602082019050919050565b60006020820190508181036000830152614f5e81614f22565b9050919050565b7f4d6564696174696f6e0000000000000000000000000000000000000000000000600082015250565b6000614f9b600983613e9e565b9150614fa682614f65565b602082019050919050565b60006020820190508181036000830152614fca81614f8e565b9050919050565b7f54696d656f757400000000000000000000000000000000000000000000000000600082015250565b6000615007600783613e9e565b915061501282614fd1565b602082019050919050565b6000602082019050818103600083015261503681614ffa565b9050919050565b7f436f6c6c61746572616c00000000000000000000000000000000000000000000600082015250565b6000615073600a83613e9e565b915061507e8261503d565b602082019050919050565b600060208201905081810360008301526150a281615066565b905091905056fea26469706673582212206a56f96d96948c3037b5db6f6a792bea07bd6e9be4697d33ab798a20f9cbab3a64736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptResult(string)": {
        "notice": "Judge Results"
      },
      "getAgreement(string)": {
        "notice": "Agreements"
      },
      "getDeal(string)": {
        "notice": "Deals"
      },
      "getJobCost(string)": {
        "notice": "Costings"
      },
      "getResult(string)": {
        "notice": "Post Results"
      },
      "hasDeal(string)": {
        "notice": "Checkers"
      },
      "initialize()": {
        "notice": "Init"
      },
      "mediationAcceptResult(string)": {
        "notice": "Mediati:"
      },
      "timeoutAgree(string)": {
        "notice": "Timeouts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 648,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "controllerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 651,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "canChangeControllerAddress",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "_initialized",
        "offset": 21,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "_initializing",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 741,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "controllerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 744,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "canChangeControllerAddress",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 749,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "deals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Deal)1865_storage)"
      },
      {
        "astId": 754,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "dealsForParty",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 759,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "agreements",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Agreement)1904_storage)"
      },
      {
        "astId": 764,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "results",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Result)1874_storage)"
      },
      {
        "astId": 769,
        "contract": "contracts/HiveStorage.sol:HiveStorage",
        "label": "mediations",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Result)1874_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(AgreementState)1805": {
        "encoding": "inplace",
        "label": "enum SharedStructs.AgreementState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Agreement)1904_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SharedStructs.Agreement)",
        "numberOfBytes": "32",
        "value": "t_struct(Agreement)1904_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Deal)1865_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SharedStructs.Deal)",
        "numberOfBytes": "32",
        "value": "t_struct(Deal)1865_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Result)1874_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SharedStructs.Result)",
        "numberOfBytes": "32",
        "value": "t_struct(Result)1874_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agreement)1904_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.Agreement",
        "members": [
          {
            "astId": 1877,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(AgreementState)1805"
          },
          {
            "astId": 1879,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "resourceProviderAgreedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1881,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "jobCreatorAgreedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1883,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "dealCreatedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1885,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "dealAgreedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1887,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "resultsSubmittedAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1889,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "resultsAcceptedAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1891,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "resultsCheckedAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1893,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "mediationAcceptedAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1895,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "mediationRejectedAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1897,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "timeoutAgreeAt",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1899,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "timeoutSubmitResultsAt",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 1901,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "timeoutJudgeResultsAt",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 1903,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "timeoutMediateResultsAt",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Deal)1865_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.Deal",
        "members": [
          {
            "astId": 1855,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "dealId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1858,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "members",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(DealMembers)1826_storage"
          },
          {
            "astId": 1861,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "timeouts",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(DealTimeouts)1844_storage"
          },
          {
            "astId": 1864,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "pricing",
            "offset": 0,
            "slot": "13",
            "type": "t_struct(DealPricing)1853_storage"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(DealMembers)1826_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealMembers",
        "members": [
          {
            "astId": 1818,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "solver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1820,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "jobCreator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1822,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "resourceProvider",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1825,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "mediators",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DealPricing)1853_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealPricing",
        "members": [
          {
            "astId": 1846,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "instructionPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1848,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "paymentCollateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1850,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "resultsCollateralMultiple",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1852,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "mediationFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DealTimeout)1831_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealTimeout",
        "members": [
          {
            "astId": 1828,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "timeout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1830,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "collateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DealTimeouts)1844_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.DealTimeouts",
        "members": [
          {
            "astId": 1834,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "agree",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(DealTimeout)1831_storage"
          },
          {
            "astId": 1837,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "submitResults",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(DealTimeout)1831_storage"
          },
          {
            "astId": 1840,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "judgeResults",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(DealTimeout)1831_storage"
          },
          {
            "astId": 1843,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "mediateResults",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(DealTimeout)1831_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Result)1874_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.Result",
        "members": [
          {
            "astId": 1867,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "dealId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1869,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "resultsId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1871,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "dataId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1873,
            "contract": "contracts/HiveStorage.sol:HiveStorage",
            "label": "instructionCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}