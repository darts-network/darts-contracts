{
  "address": "0x6E3367a17B8E63c8c89410536B91E82092f0a5f3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "dataId",
          "type": "string"
        }
      ],
      "name": "JobCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "JobCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_jobID",
          "type": "uint256"
        }
      ],
      "name": "getJobResult",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_jobManagerAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "runCowsay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_jobManagerAddress",
          "type": "address"
        }
      ],
      "name": "setJobManagerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dataId",
          "type": "string"
        }
      ],
      "name": "submitResults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde3f8225c94c2196eabcc726027ae1229663aff9257fccbd71c49b9cfc671c4f",
  "receipt": {
    "to": null,
    "from": "0x823531B7c7843D8c3821B19D70cbFb6173b9Cb02",
    "contractAddress": "0x6E3367a17B8E63c8c89410536B91E82092f0a5f3",
    "transactionIndex": 37,
    "gasUsed": "1241242",
    "logsBloom": "0x
    "blockHash": "0xee8a4f9cbdd0dfe2a8ef88373d7a90dc0b4d3e57e11d22d7703f366f1a6519bf",
    "transactionHash": "0xde3f8225c94c2196eabcc726027ae1229663aff9257fccbd71c49b9cfc671c4f",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 5351315,
        "transactionHash": "0xde3f8225c94c2196eabcc726027ae1229663aff9257fccbd71c49b9cfc671c4f",
        "address": "0x6E3367a17B8E63c8c89410536B91E82092f0a5f3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000823531b7c7843d8c3821b19d70cbfb6173b9cb02"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0xee8a4f9cbdd0dfe2a8ef88373d7a90dc0b4d3e57e11d22d7703f366f1a6519bf"
      }
    ],
    "blockNumber": 5351315,
    "cumulativeGasUsed": "4802864",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b1c846de1a2fdbebc0425659c174617e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"}],\"name\":\"JobCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"JobCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jobID\",\"type\":\"uint256\"}],\"name\":\"getJobResult\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jobManagerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"runCowsay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jobManagerAddress\",\"type\":\"address\"}],\"name\":\"setJobManagerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"}],\"name\":\"submitResults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExampleClient.sol\":\"ExampleClient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/ExampleClient.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./IHiveJobManager.sol\\\";\\nimport \\\"./IHiveJobClient.sol\\\";\\n\\ncontract ExampleClient is Ownable, Initializable, IHiveJobClient {\\n\\n  address private jobManagerAddress;\\n  IHiveJobManager private jobManagerContract;\\n\\n  mapping(uint256 => string) private jobResults;\\n\\n  event JobCreated(\\n    uint256 id,\\n    string message\\n  );\\n\\n  event JobCompleted(\\n    uint256 id,\\n    string dealId,\\n    string dataId\\n  );\\n\\n  function initialize(address _jobManagerAddress) public initializer {\\n    setJobManagerAddress(_jobManagerAddress);\\n  }\\n\\n  function setJobManagerAddress(address _jobManagerAddress) public onlyOwner {\\n    require(_jobManagerAddress != address(0), \\\"Job manager address\\\");\\n    jobManagerAddress = _jobManagerAddress;\\n    jobManagerContract = IHiveJobManager(jobManagerAddress);\\n  }\\n\\n  function getJobResult(uint256 _jobID) public view returns (string memory) {\\n    return jobResults[_jobID];\\n  }\\n\\n  function runCowsay(\\n    string memory message\\n  ) public {\\n    string[] memory inputs = new string[](1);\\n    inputs[0] = string(abi.encodePacked(\\\"Message=\\\", message));\\n    uint256 id = jobManagerContract.runJob(\\n      \\\"cowsay:v0.0.1\\\",\\n      inputs,\\n      msg.sender\\n    );\\n\\n    emit JobCreated(\\n      id,\\n      message\\n    );\\n  }\\n\\n  function submitResults(\\n    uint256 id,\\n    string memory dealId,\\n    string memory dataId\\n  ) public override {\\n    jobResults[id] = dataId;\\n    emit JobCompleted(\\n      id,\\n      dealId,\\n      dataId\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x1d06541030961712d8a36c4a23e7e65ed04dcdb8a231703130ecf7c5712cb776\",\"license\":\"Apache-2.0\"},\"contracts/IHiveJobClient.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\n// a smart contract that is running a job\\n// it will call the IOnChainJobManager with it's job\\n// which will end up with the resultsAdded function being called by the manager\\ninterface IHiveJobClient {\\n  function submitResults(\\n    uint256 id,\\n    string memory dealId,\\n    string memory dataId\\n  ) external;\\n}\\n\",\"keccak256\":\"0x6bc01ec73e0d66c324f796205269c80a977f5c8c7600085f7fea176ec7c2e408\",\"license\":\"Apache-2.0\"},\"contracts/IHiveJobManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IHiveJobClient.sol\\\";\\n\\n// the smart contract that is responsible for handling the life\\n// cycle of a job - it will pay the registered solver to manage the job\\n// this is the simple implementation - later we can implement the whole protocol\\n// where the calling smart contract can decide if it wants to agree to a resource offer\\n// and accept results\\ninterface IHiveJobManager is IHiveJobClient {\\n  function runJob(\\n    string memory module,\\n    string[] memory inputs,\\n    address payee\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x866f902b000281daa1bc7abfa8f9c9c8328a708dac4e6f19706ff49e863f5b6c\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61150f8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c4d66de81161005b578063c4d66de814610101578063cabc00d11461011d578063ec67df4c14610139578063f2fde38b1461015557610088565b80633b89dcab1461008d5780636c0f1f58146100bd578063715018a6146100d95780638da5cb5b146100e3575b600080fd5b6100a760048036038101906100a291906108c5565b610171565b6040516100b49190610982565b60405180910390f35b6100d760048036038101906100d29190610ad9565b610216565b005b6100e1610277565b005b6100eb61028b565b6040516100f89190610ba5565b60405180910390f35b61011b60048036038101906101169190610bec565b6102b4565b005b61013760048036038101906101329190610c19565b6103f9565b005b610153600480360381019061014e9190610bec565b61056d565b005b61016f600480360381019061016a9190610bec565b61068b565b005b606060036000838152602001908152602001600020805461019190610c91565b80601f01602080910402602001604051908101604052809291908181526020018280546101bd90610c91565b801561020a5780601f106101df5761010080835404028352916020019161020a565b820191906000526020600020905b8154815290600101906020018083116101ed57829003601f168201915b50505050509050919050565b806003600085815260200190815260200160002090816102369190610e6e565b507f3849c58b4b39b379bddc5973e71a10ded174f54140916d81986c7eec092e5c4283838360405161026a93929190610f4f565b60405180910390a1505050565b61027f61070e565b610289600061078c565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060159054906101000a900460ff161590508080156102e757506001600060149054906101000a900460ff1660ff16105b8061031657506102f630610850565b15801561031557506001600060149054906101000a900460ff1660ff16145b5b610355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034c90611006565b60405180910390fd5b6001600060146101000a81548160ff021916908360ff1602179055508015610393576001600060156101000a81548160ff0219169083151502179055505b61039c8261056d565b80156103f55760008060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516103ec919061106e565b60405180910390a15b5050565b6000600167ffffffffffffffff811115610416576104156109ae565b5b60405190808252806020026020018201604052801561044957816020015b60608152602001906001900390816104345790505b5090508160405160200161045d9190611111565b604051602081830303815290604052816000815181106104805761047f611133565b5b60200260200101819052506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c75555fa83336040518363ffffffff1660e01b81526004016104ea9291906112ba565b6020604051808303816000875af1158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052d9190611312565b90507fb63f0fdfb200b05c8b95fb4dcf8f8abd30f0b6884d532792e705afab4f37380a818460405161056092919061133f565b60405180910390a1505050565b61057561070e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db906113bb565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61069361070e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f99061144d565b60405180910390fd5b61070b8161078c565b50565b610716610873565b73ffffffffffffffffffffffffffffffffffffffff1661073461028b565b73ffffffffffffffffffffffffffffffffffffffff161461078a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610781906114b9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108a28161088f565b81146108ad57600080fd5b50565b6000813590506108bf81610899565b92915050565b6000602082840312156108db576108da610885565b5b60006108e9848285016108b0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561092c578082015181840152602081019050610911565b60008484015250505050565b6000601f19601f8301169050919050565b6000610954826108f2565b61095e81856108fd565b935061096e81856020860161090e565b61097781610938565b840191505092915050565b6000602082019050818103600083015261099c8184610949565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109e682610938565b810181811067ffffffffffffffff82111715610a0557610a046109ae565b5b80604052505050565b6000610a1861087b565b9050610a2482826109dd565b919050565b600067ffffffffffffffff821115610a4457610a436109ae565b5b610a4d82610938565b9050602081019050919050565b82818337600083830152505050565b6000610a7c610a7784610a29565b610a0e565b905082815260208101848484011115610a9857610a976109a9565b5b610aa3848285610a5a565b509392505050565b600082601f830112610ac057610abf6109a4565b5b8135610ad0848260208601610a69565b91505092915050565b600080600060608486031215610af257610af1610885565b5b6000610b00868287016108b0565b935050602084013567ffffffffffffffff811115610b2157610b2061088a565b5b610b2d86828701610aab565b925050604084013567ffffffffffffffff811115610b4e57610b4d61088a565b5b610b5a86828701610aab565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8f82610b64565b9050919050565b610b9f81610b84565b82525050565b6000602082019050610bba6000830184610b96565b92915050565b610bc981610b84565b8114610bd457600080fd5b50565b600081359050610be681610bc0565b92915050565b600060208284031215610c0257610c01610885565b5b6000610c1084828501610bd7565b91505092915050565b600060208284031215610c2f57610c2e610885565b5b600082013567ffffffffffffffff811115610c4d57610c4c61088a565b5b610c5984828501610aab565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ca957607f821691505b602082108103610cbc57610cbb610c62565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610d247fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ce7565b610d2e8683610ce7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d6b610d66610d618461088f565b610d46565b61088f565b9050919050565b6000819050919050565b610d8583610d50565b610d99610d9182610d72565b848454610cf4565b825550505050565b600090565b610dae610da1565b610db9818484610d7c565b505050565b5b81811015610ddd57610dd2600082610da6565b600181019050610dbf565b5050565b601f821115610e2257610df381610cc2565b610dfc84610cd7565b81016020851015610e0b578190505b610e1f610e1785610cd7565b830182610dbe565b50505b505050565b600082821c905092915050565b6000610e4560001984600802610e27565b1980831691505092915050565b6000610e5e8383610e34565b9150826002028217905092915050565b610e77826108f2565b67ffffffffffffffff811115610e9057610e8f6109ae565b5b610e9a8254610c91565b610ea5828285610de1565b600060209050601f831160018114610ed85760008415610ec6578287015190505b610ed08582610e52565b865550610f38565b601f198416610ee686610cc2565b60005b82811015610f0e57848901518255600182019150602085019450602081019050610ee9565b86831015610f2b5784890151610f27601f891682610e34565b8355505b6001600288020188555050505b505050505050565b610f498161088f565b82525050565b6000606082019050610f646000830186610f40565b8181036020830152610f768185610949565b90508181036040830152610f8a8184610949565b9050949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610ff0602e836108fd565b9150610ffb82610f94565b604082019050919050565b6000602082019050818103600083015261101f81610fe3565b9050919050565b6000819050919050565b600060ff82169050919050565b600061105861105361104e84611026565b610d46565b611030565b9050919050565b6110688161103d565b82525050565b6000602082019050611083600083018461105f565b92915050565b600081905092915050565b7f4d6573736167653d000000000000000000000000000000000000000000000000600082015250565b60006110ca600883611089565b91506110d582611094565b600882019050919050565b60006110eb826108f2565b6110f58185611089565b935061110581856020860161090e565b80840191505092915050565b600061111c826110bd565b915061112882846110e0565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f636f777361793a76302e302e3100000000000000000000000000000000000000600082015250565b6000611198600d836108fd565b91506111a382611162565b602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006111f6826108f2565b61120081856111da565b935061121081856020860161090e565b61121981610938565b840191505092915050565b600061123083836111eb565b905092915050565b6000602082019050919050565b6000611250826111ae565b61125a81856111b9565b93508360208202850161126c856111ca565b8060005b858110156112a857848403895281516112898582611224565b945061129483611238565b925060208a01995050600181019050611270565b50829750879550505050505092915050565b600060608201905081810360008301526112d38161118b565b905081810360208301526112e78185611245565b90506112f66040830184610b96565b9392505050565b60008151905061130c81610899565b92915050565b60006020828403121561132857611327610885565b5b6000611336848285016112fd565b91505092915050565b60006040820190506113546000830185610f40565b81810360208301526113668184610949565b90509392505050565b7f4a6f62206d616e61676572206164647265737300000000000000000000000000600082015250565b60006113a56013836108fd565b91506113b08261136f565b602082019050919050565b600060208201905081810360008301526113d481611398565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006114376026836108fd565b9150611442826113db565b604082019050919050565b600060208201905081810360008301526114668161142a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006114a36020836108fd565b91506114ae8261146d565b602082019050919050565b600060208201905081810360008301526114d281611496565b905091905056fea2646970667358221220f3d6ccf7546b76eaa92777415189784ba6c1df7b34f59000908b80afc9e86c1e64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063c4d66de81161005b578063c4d66de814610101578063cabc00d11461011d578063ec67df4c14610139578063f2fde38b1461015557610088565b80633b89dcab1461008d5780636c0f1f58146100bd578063715018a6146100d95780638da5cb5b146100e3575b600080fd5b6100a760048036038101906100a291906108c5565b610171565b6040516100b49190610982565b60405180910390f35b6100d760048036038101906100d29190610ad9565b610216565b005b6100e1610277565b005b6100eb61028b565b6040516100f89190610ba5565b60405180910390f35b61011b60048036038101906101169190610bec565b6102b4565b005b61013760048036038101906101329190610c19565b6103f9565b005b610153600480360381019061014e9190610bec565b61056d565b005b61016f600480360381019061016a9190610bec565b61068b565b005b606060036000838152602001908152602001600020805461019190610c91565b80601f01602080910402602001604051908101604052809291908181526020018280546101bd90610c91565b801561020a5780601f106101df5761010080835404028352916020019161020a565b820191906000526020600020905b8154815290600101906020018083116101ed57829003601f168201915b50505050509050919050565b806003600085815260200190815260200160002090816102369190610e6e565b507f3849c58b4b39b379bddc5973e71a10ded174f54140916d81986c7eec092e5c4283838360405161026a93929190610f4f565b60405180910390a1505050565b61027f61070e565b610289600061078c565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060159054906101000a900460ff161590508080156102e757506001600060149054906101000a900460ff1660ff16105b8061031657506102f630610850565b15801561031557506001600060149054906101000a900460ff1660ff16145b5b610355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034c90611006565b60405180910390fd5b6001600060146101000a81548160ff021916908360ff1602179055508015610393576001600060156101000a81548160ff0219169083151502179055505b61039c8261056d565b80156103f55760008060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516103ec919061106e565b60405180910390a15b5050565b6000600167ffffffffffffffff811115610416576104156109ae565b5b60405190808252806020026020018201604052801561044957816020015b60608152602001906001900390816104345790505b5090508160405160200161045d9190611111565b604051602081830303815290604052816000815181106104805761047f611133565b5b60200260200101819052506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c75555fa83336040518363ffffffff1660e01b81526004016104ea9291906112ba565b6020604051808303816000875af1158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052d9190611312565b90507fb63f0fdfb200b05c8b95fb4dcf8f8abd30f0b6884d532792e705afab4f37380a818460405161056092919061133f565b60405180910390a1505050565b61057561070e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db906113bb565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61069361070e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f99061144d565b60405180910390fd5b61070b8161078c565b50565b610716610873565b73ffffffffffffffffffffffffffffffffffffffff1661073461028b565b73ffffffffffffffffffffffffffffffffffffffff161461078a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610781906114b9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108a28161088f565b81146108ad57600080fd5b50565b6000813590506108bf81610899565b92915050565b6000602082840312156108db576108da610885565b5b60006108e9848285016108b0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561092c578082015181840152602081019050610911565b60008484015250505050565b6000601f19601f8301169050919050565b6000610954826108f2565b61095e81856108fd565b935061096e81856020860161090e565b61097781610938565b840191505092915050565b6000602082019050818103600083015261099c8184610949565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109e682610938565b810181811067ffffffffffffffff82111715610a0557610a046109ae565b5b80604052505050565b6000610a1861087b565b9050610a2482826109dd565b919050565b600067ffffffffffffffff821115610a4457610a436109ae565b5b610a4d82610938565b9050602081019050919050565b82818337600083830152505050565b6000610a7c610a7784610a29565b610a0e565b905082815260208101848484011115610a9857610a976109a9565b5b610aa3848285610a5a565b509392505050565b600082601f830112610ac057610abf6109a4565b5b8135610ad0848260208601610a69565b91505092915050565b600080600060608486031215610af257610af1610885565b5b6000610b00868287016108b0565b935050602084013567ffffffffffffffff811115610b2157610b2061088a565b5b610b2d86828701610aab565b925050604084013567ffffffffffffffff811115610b4e57610b4d61088a565b5b610b5a86828701610aab565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8f82610b64565b9050919050565b610b9f81610b84565b82525050565b6000602082019050610bba6000830184610b96565b92915050565b610bc981610b84565b8114610bd457600080fd5b50565b600081359050610be681610bc0565b92915050565b600060208284031215610c0257610c01610885565b5b6000610c1084828501610bd7565b91505092915050565b600060208284031215610c2f57610c2e610885565b5b600082013567ffffffffffffffff811115610c4d57610c4c61088a565b5b610c5984828501610aab565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ca957607f821691505b602082108103610cbc57610cbb610c62565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610d247fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ce7565b610d2e8683610ce7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d6b610d66610d618461088f565b610d46565b61088f565b9050919050565b6000819050919050565b610d8583610d50565b610d99610d9182610d72565b848454610cf4565b825550505050565b600090565b610dae610da1565b610db9818484610d7c565b505050565b5b81811015610ddd57610dd2600082610da6565b600181019050610dbf565b5050565b601f821115610e2257610df381610cc2565b610dfc84610cd7565b81016020851015610e0b578190505b610e1f610e1785610cd7565b830182610dbe565b50505b505050565b600082821c905092915050565b6000610e4560001984600802610e27565b1980831691505092915050565b6000610e5e8383610e34565b9150826002028217905092915050565b610e77826108f2565b67ffffffffffffffff811115610e9057610e8f6109ae565b5b610e9a8254610c91565b610ea5828285610de1565b600060209050601f831160018114610ed85760008415610ec6578287015190505b610ed08582610e52565b865550610f38565b601f198416610ee686610cc2565b60005b82811015610f0e57848901518255600182019150602085019450602081019050610ee9565b86831015610f2b5784890151610f27601f891682610e34565b8355505b6001600288020188555050505b505050505050565b610f498161088f565b82525050565b6000606082019050610f646000830186610f40565b8181036020830152610f768185610949565b90508181036040830152610f8a8184610949565b9050949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610ff0602e836108fd565b9150610ffb82610f94565b604082019050919050565b6000602082019050818103600083015261101f81610fe3565b9050919050565b6000819050919050565b600060ff82169050919050565b600061105861105361104e84611026565b610d46565b611030565b9050919050565b6110688161103d565b82525050565b6000602082019050611083600083018461105f565b92915050565b600081905092915050565b7f4d6573736167653d000000000000000000000000000000000000000000000000600082015250565b60006110ca600883611089565b91506110d582611094565b600882019050919050565b60006110eb826108f2565b6110f58185611089565b935061110581856020860161090e565b80840191505092915050565b600061111c826110bd565b915061112882846110e0565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f636f777361793a76302e302e3100000000000000000000000000000000000000600082015250565b6000611198600d836108fd565b91506111a382611162565b602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006111f6826108f2565b61120081856111da565b935061121081856020860161090e565b61121981610938565b840191505092915050565b600061123083836111eb565b905092915050565b6000602082019050919050565b6000611250826111ae565b61125a81856111b9565b93508360208202850161126c856111ca565b8060005b858110156112a857848403895281516112898582611224565b945061129483611238565b925060208a01995050600181019050611270565b50829750879550505050505092915050565b600060608201905081810360008301526112d38161118b565b905081810360208301526112e78185611245565b90506112f66040830184610b96565b9392505050565b60008151905061130c81610899565b92915050565b60006020828403121561132857611327610885565b5b6000611336848285016112fd565b91505092915050565b60006040820190506113546000830185610f40565b81810360208301526113668184610949565b90509392505050565b7f4a6f62206d616e61676572206164647265737300000000000000000000000000600082015250565b60006113a56013836108fd565b91506113b08261136f565b602082019050919050565b600060208201905081810360008301526113d481611398565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006114376026836108fd565b9150611442826113db565b604082019050919050565b600060208201905081810360008301526114668161142a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006114a36020836108fd565b91506114ae8261146d565b602082019050919050565b600060208201905081810360008301526114d281611496565b905091905056fea2646970667358221220f3d6ccf7546b76eaa92777415189784ba6c1df7b34f59000908b80afc9e86c1e64736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/ExampleClient.sol:ExampleClient",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/ExampleClient.sol:ExampleClient",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/ExampleClient.sol:ExampleClient",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1579,
        "contract": "contracts/ExampleClient.sol:ExampleClient",
        "label": "jobManagerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1582,
        "contract": "contracts/ExampleClient.sol:ExampleClient",
        "label": "jobManagerContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IHiveJobManager)5853"
      },
      {
        "astId": 1586,
        "contract": "contracts/ExampleClient.sol:ExampleClient",
        "label": "jobResults",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IHiveJobManager)5853": {
        "encoding": "inplace",
        "label": "contract IHiveJobManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}