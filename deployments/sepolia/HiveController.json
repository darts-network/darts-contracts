{
  "address": "0x23a57766dbE135799cEb617e548F7d2C79410424",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "acceptResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "resultsId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dataId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "instructionCount",
          "type": "uint256"
        }
      ],
      "name": "addResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "solver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "jobCreator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "resourceProvider",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "mediators",
              "type": "address[]"
            }
          ],
          "internalType": "struct SharedStructs.DealMembers",
          "name": "members",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "agree",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "submitResults",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "judgeResults",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SharedStructs.DealTimeout",
              "name": "mediateResults",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharedStructs.DealTimeouts",
          "name": "timeouts",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "instructionPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCollateralMultiple",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.DealPricing",
          "name": "pricing",
          "type": "tuple"
        }
      ],
      "name": "agree",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum SharedStructs.AgreementState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "resourceProviderAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jobCreatorAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealCreatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dealAgreedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsSubmittedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resultsCheckedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationAcceptedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mediationRejectedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutAgreeAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutSubmitResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutJudgeResultsAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeoutMediateResultsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct SharedStructs.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "checkResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getJobCreatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMediationAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsersAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storageAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usersAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mediationAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_jobCreatorAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "mediationAcceptResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "mediationRejectResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_jobCreatorAddress",
          "type": "address"
        }
      ],
      "name": "setJobCreatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mediationAddress",
          "type": "address"
        }
      ],
      "name": "setMediationAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentsAddress",
          "type": "address"
        }
      ],
      "name": "setPaymentsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storageAddress",
          "type": "address"
        }
      ],
      "name": "setStorageAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usersAddress",
          "type": "address"
        }
      ],
      "name": "setUsersAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutAgree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutJudgeResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutMediateResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dealId",
          "type": "string"
        }
      ],
      "name": "timeoutSubmitResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2dcc556877aa6e2d183dcd667897d9ede89197d0a6bb33f564fe0947cf067416",
  "receipt": {
    "to": null,
    "from": "0x823531B7c7843D8c3821B19D70cbFb6173b9Cb02",
    "contractAddress": "0x23a57766dbE135799cEb617e548F7d2C79410424",
    "transactionIndex": 44,
    "gasUsed": "5034963",
    "logsBloom": "0x
    "blockHash": "0x20db744b6765fb1e076f40288f6a09be897665723d771fc78b102dcce9edd64b",
    "transactionHash": "0x2dcc556877aa6e2d183dcd667897d9ede89197d0a6bb33f564fe0947cf067416",
    "logs": [
      {
        "transactionIndex": 44,
        "blockNumber": 5351320,
        "transactionHash": "0x2dcc556877aa6e2d183dcd667897d9ede89197d0a6bb33f564fe0947cf067416",
        "address": "0x23a57766dbE135799cEb617e548F7d2C79410424",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000823531b7c7843d8c3821b19d70cbfb6173b9cb02"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0x20db744b6765fb1e076f40288f6a09be897665723d771fc78b102dcce9edd64b"
      }
    ],
    "blockNumber": 5351320,
    "cumulativeGasUsed": "9874441",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "307e99467c93b07847c05baad373a2e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"acceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"resultsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"name\":\"addResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mediators\",\"type\":\"address[]\"}],\"internalType\":\"struct SharedStructs.DealMembers\",\"name\":\"members\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"agree\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"submitResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"judgeResults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealTimeout\",\"name\":\"mediateResults\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedStructs.DealTimeouts\",\"name\":\"timeouts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.DealPricing\",\"name\":\"pricing\",\"type\":\"tuple\"}],\"name\":\"agree\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealCreatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAgreeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"checkResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJobCreatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMediationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mediationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jobCreatorAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"mediationAcceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"mediationRejectResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jobCreatorAddress\",\"type\":\"address\"}],\"name\":\"setJobCreatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mediationAddress\",\"type\":\"address\"}],\"name\":\"setMediationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentsAddress\",\"type\":\"address\"}],\"name\":\"setPaymentsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"}],\"name\":\"setStorageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usersAddress\",\"type\":\"address\"}],\"name\":\"setUsersAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutAgree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutJudgeResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutMediateResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealId\",\"type\":\"string\"}],\"name\":\"timeoutSubmitResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addResult(string,string,string,uint256)\":{\"notice\":\"Results\"},\"agree(string,(address,address,address,address[]),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),(uint256,uint256,uint256,uint256))\":{\"notice\":\"Agreements\"},\"initialize(address,address,address,address,address)\":{\"notice\":\"Init\"},\"mediationAcceptResult(string)\":{\"notice\":\"Mediation\"},\"timeoutAgree(string)\":{\"notice\":\"Timeouts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HiveController.sol\":\"HiveController\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/HiveController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\nimport \\\"./IHiveController.sol\\\";\\nimport \\\"./IHiveStorage.sol\\\";\\nimport \\\"./IHivePayments.sol\\\";\\nimport \\\"./IHiveMediation.sol\\\";\\n\\ncontract HiveController is IHiveController, Ownable, Initializable {\\n\\n  /**\\n   * Types\\n   */\\n  \\n  address private storageAddress;\\n  address private userAddress;\\n  address private paymentsAddress;\\n  address private mediationAddress;\\n  address private jobCreatorAddress;\\n\\n  IHiveStorage private storageContract;\\n  IHivePayments private paymentsContract;\\n  IHiveMediationHandler private mediationContract;\\n\\n  /**\\n   * Init\\n   */\\n\\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n  function initialize(\\n    address _storageAddress,\\n    address _usersAddress,\\n    address _paymentsAddress,\\n    address _mediationAddress,\\n    address _jobCreatorAddress\\n  ) public initializer {\\n    setStorageAddress(_storageAddress);\\n    setUsersAddress(_usersAddress);\\n    setPaymentsAddress(_paymentsAddress);\\n    setMediationAddress(_mediationAddress);\\n    setJobCreatorAddress(_jobCreatorAddress);\\n  }\\n\\n  function setStorageAddress(address _storageAddress) public onlyOwner {\\n    require(_storageAddress != address(0), \\\"Storage address\\\");\\n    storageAddress = _storageAddress;\\n    storageContract = IHiveStorage(storageAddress);\\n  }\\n\\n  function getStorageAddress() public view returns(address) {\\n    return storageAddress;\\n  }\\n\\n  function setUsersAddress(address _usersAddress) public onlyOwner {\\n    require(_usersAddress != address(0), \\\"Users address\\\");\\n    userAddress = _usersAddress;\\n  }\\n\\n  function getUsersAddress() public view returns(address) {\\n    return userAddress;\\n  }\\n\\n  function setPaymentsAddress(address _paymentsAddress) public onlyOwner {\\n    require(_paymentsAddress != address(0), \\\"Payments address\\\");\\n    paymentsAddress = _paymentsAddress;\\n    paymentsContract = IHivePayments(_paymentsAddress);\\n  }\\n\\n  function getPaymentsAddress() public view returns(address) {\\n    return paymentsAddress;\\n  }\\n\\n  function setMediationAddress(address _mediationAddress) public onlyOwner {\\n    require(_mediationAddress != address(0), \\\"Mediation address\\\");\\n    mediationAddress = _mediationAddress;\\n    mediationContract = IHiveMediationHandler(_mediationAddress);\\n  }\\n\\n  function getMediationAddress() public view returns(address) {\\n    return mediationAddress;\\n  }\\n\\n  function setJobCreatorAddress(address _jobCreatorAddress) public onlyOwner {\\n    require(_jobCreatorAddress != address(0), \\\"JobCreator address\\\");\\n    jobCreatorAddress = _jobCreatorAddress;\\n  }\\n\\n  function getJobCreatorAddress() public view returns(address) {\\n    return jobCreatorAddress;\\n  }\\n\\n  /**\\n   * Agreements\\n   */\\n\\n  // * create the deal if not exists\\n  // * otherwise compare the values to ensure 2 sided agreement\\n  // * check the RP or JC is calling this\\n  // * if RP:\\n  //    * mark the deal as RP agreed\\n  //    * pay in the timeout collateral\\n  // * if JC:\\n  //    * mark the deal as JC agreed\\n  //    * pay in the payment collateral and timeout collateral\\n  // * if both sides have agreed then mark the deal as agreed\\n  // * emit the event\\n  function agree(\\n    string memory dealId,\\n    SharedStructs.DealMembers memory members,\\n    SharedStructs.DealTimeouts memory timeouts,\\n    SharedStructs.DealPricing memory pricing\\n  ) public override returns (SharedStructs.Agreement memory) {\\n    SharedStructs.Deal memory deal = storageContract.ensureDeal(\\n      dealId,\\n      members,\\n      timeouts,\\n      pricing\\n    );\\n    bool isResourceProvider = tx.origin == deal.members.resourceProvider;\\n    bool isJobCreator = tx.origin == deal.members.jobCreator;\\n    require(isResourceProvider || isJobCreator, \\\"Only RP / JC\\\");\\n\\n    if(isResourceProvider) {\\n      storageContract.agreeResourceProvider(dealId);\\n      paymentsContract.agreeResourceProvider(\\n        dealId,\\n        deal.members.resourceProvider,\\n        deal.timeouts.submitResults.collateral\\n      );\\n    }\\n    else if(isJobCreator) {\\n      storageContract.agreeJobCreator(dealId);\\n      paymentsContract.agreeJobCreator(\\n        dealId,\\n        deal.members.jobCreator,\\n        deal.pricing.paymentCollateral,\\n        // the JC paus the judge results collateral\\n        deal.timeouts.judgeResults.collateral\\n      );\\n    }\\n    return storageContract.getAgreement(dealId);\\n  }\\n\\n  /**\\n   * Results\\n   */\\n\\n  // * check the RP is calling this\\n  // * mark the deal as results submitted\\n  // * calculate the cost of the job\\n  // * calculate the job collateral based on the multiple\\n  // * work out the difference between the timeout and results collateral\\n  // * pay the difference into / out of the contract to the RP\\n  // * emit the event\\n  function addResult(\\n    string memory dealId,\\n    string memory resultsId,\\n    // this is the CID of the actual data\\n    // otherwise onchain clients cannot know the actual data they want to fetch\\n    string memory dataId,\\n    uint256 instructionCount\\n  ) public override {\\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.DealAgreed), \\\"DealAgreed\\\");\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    require(deal.members.resourceProvider == tx.origin, \\\"Only RP\\\");\\n\\n    storageContract.addResult(\\n      dealId,\\n      resultsId,\\n      dataId,\\n      instructionCount\\n    );\\n\\n    // how many multiple of the job cost must the RP put up as collateral\\n    // we need to do this after having added the result otherwise\\n    // we don't know the instruction count\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n\\n    paymentsContract.addResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      resultsCollateral,\\n      // this is the RP adding a results so they get their submit results timeout collateral back\\n      deal.timeouts.submitResults.collateral\\n    );\\n  }\\n\\n  // * check the JC is calling this\\n  // * check we are in Submitted state\\n  // * mark the deal as results accepted\\n  // * calculate the cost of the job\\n  // * deduct the cost of the job from the JC payment collateral\\n  // * pay the RP the cost of the job\\n  // * refund the RP the results collateral\\n  // * refund the JC the job collateral minus the cost\\n  // * refund the JC the timeout collateral\\n  function acceptResult(\\n    string memory dealId\\n  ) public override {\\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    require(deal.members.jobCreator == tx.origin, \\\"Only JC\\\");\\n    \\n    uint256 jobCost = storageContract.getJobCost(dealId);\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n\\n    storageContract.acceptResult(dealId);\\n    paymentsContract.acceptResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      jobCost,\\n      deal.pricing.paymentCollateral,\\n      resultsCollateral,\\n      // this is the JC judging their result so they get their timeout collateral back\\n      deal.timeouts.judgeResults.collateral\\n    );\\n  }\\n\\n  // * check the JC is calling this\\n  // * check we are in Submitted state\\n  // * check the mediator is in the list of RP trusted mediators\\n  // * mark the deal as results checked\\n  // * charge the JC the mediation fee\\n  // * refund the JC the timeout collateral\\n  // * emit the Mediation event so the mediator kicks in\\n  function checkResult(\\n    string memory dealId\\n  ) public override {\\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsSubmitted), \\\"ResultsSubmitted\\\");\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    require(deal.members.jobCreator == tx.origin, \\\"Only JC\\\");\\n\\n    // this function will require that the mediator is in the RP's list of trusted mediators\\n    storageContract.checkResult(dealId);\\n    paymentsContract.checkResult(\\n      dealId,\\n      deal.members.jobCreator,\\n      // this is the JC judging their result so they get their timeout collateral back\\n      deal.timeouts.judgeResults.collateral,\\n      deal.pricing.mediationFee\\n    );\\n\\n    // trigger the mediation process by calling the contract\\n    mediationContract.mediationRequest(deal);\\n  }\\n\\n  /**\\n   * Mediation\\n   */\\n\\n  // the mediator calls this to say that the resource provider did the correct job\\n  // * check the state is ResultsChecked\\n  // * check the mediator is calling this\\n  // * mark the deal as mediation accepted\\n  // * refund the JC what is left from the payment collateral (if any)\\n  // * pay the RP the cost of the job\\n  // * refund the RP the results collateral\\n  // * pay the mediator for mediating\\n  function mediationAcceptResult(\\n    string memory dealId\\n  ) public override {\\n    require(mediationAddress == _msgSender(), \\\"Only mediation\\\");\\n    require(_canMediateResult(dealId), \\\"Cannot mediate\\\");\\n    \\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    uint256 jobCost = storageContract.getJobCost(dealId);\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n\\n    storageContract.mediationAcceptResult(dealId);\\n    paymentsContract.mediationAcceptResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      jobCost,\\n      deal.pricing.paymentCollateral,\\n      resultsCollateral,\\n      deal.pricing.mediationFee\\n    );\\n  }\\n\\n  // the mediator calls this to say that the resource provider did the bad job\\n  // * check the state is ResultsChecked\\n  // * check the mediator is calling this\\n  // * mark the deal as mediation rejected\\n  // * refund the JC their payment collateral\\n  // * slash the RP's results collateral\\n  // * pay the mediator for mediating\\n  function mediationRejectResult(\\n    string memory dealId\\n  ) public override {\\n    // only the current mediation contract can call this\\n    require(mediationAddress == _msgSender(), \\\"Only mediation\\\");\\n    require(_canMediateResult(dealId), \\\"Cannot mediate\\\");\\n\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n\\n    storageContract.mediationRejectResult(dealId);\\n    paymentsContract.mediationRejectResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      deal.pricing.paymentCollateral,\\n      resultsCollateral,\\n      deal.pricing.mediationFee\\n    );\\n  }\\n\\n  function _canMediateResult(\\n    string memory dealId \\n  ) private returns (bool) {\\n    require(storageContract.isState(dealId, SharedStructs.AgreementState.ResultsChecked), \\\"ResultsChecked\\\");\\n    return true;\\n  }\\n\\n  /**\\n   * Timeouts\\n   */\\n\\n  function timeoutAgree(\\n    string memory dealId\\n  ) public override {\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\\n    require(deal.members.jobCreator == tx.origin || deal.members.resourceProvider == tx.origin, \\\"Only JC or RP\\\");\\n    require(agreement.state == SharedStructs.AgreementState.DealNegotiating, \\\"Not correct state\\\");\\n    require(block.timestamp > agreement.dealCreatedAt + deal.timeouts.agree.timeout, \\\"Not timed out\\\");\\n    storageContract.timeoutAgree(dealId);\\n    if (agreement.resourceProviderAgreedAt > 0) {\\n      // this is an RP refund\\n      paymentsContract.timeoutAgreeRefundResourceProvider(\\n        dealId,\\n        deal.members.resourceProvider,\\n        deal.timeouts.submitResults.collateral\\n      );\\n    } else if (agreement.jobCreatorAgreedAt > 0) {\\n      // this is an JC refund\\n      paymentsContract.timeoutAgreeRefundJobCreator(\\n        dealId,\\n        deal.members.jobCreator,\\n        deal.pricing.paymentCollateral,\\n        deal.timeouts.submitResults.collateral\\n      );\\n    }\\n  }\\n\\n  // the job creator calls this after the timeout has passed and there are no results submitted\\n  // * check the JC is calling this\\n  // * mark the deal as timedout\\n  // * pay back the JC's job collateral\\n  // * slash the RP's results collateral\\n  // * emit the event\\n  function timeoutSubmitResult(\\n    string memory dealId\\n  ) public override {\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\\n    require(deal.members.jobCreator == tx.origin, \\\"Only JC\\\");\\n    require(agreement.state == SharedStructs.AgreementState.DealAgreed, \\\"Not correct state\\\");\\n    require(block.timestamp > agreement.dealAgreedAt + deal.timeouts.submitResults.timeout, \\\"Not timed out\\\");\\n    storageContract.timeoutSubmitResult(dealId);\\n    paymentsContract.timeoutSubmitResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      deal.pricing.paymentCollateral,\\n      deal.timeouts.submitResults.collateral\\n    );\\n  }\\n\\n  // the resource provider calls this after the timeout has passed after submitting results\\n  // and the job creator has not yet submitted their judgement on those results\\n  // * check the RP is calling this\\n  // * mark the deal as timedout\\n  // * pay back the RP's results collateral\\n  // * pay the RP the cost of the job\\n  // * slash the JC's timeout collateral\\n  // * slash the JC's job collateral\\n  // * emit the event\\n  function timeoutJudgeResult(\\n    string memory dealId\\n  ) public override {\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\\n    require(deal.members.resourceProvider == tx.origin, \\\"Only RP\\\");\\n    require(agreement.state == SharedStructs.AgreementState.ResultsSubmitted, \\\"Not correct state\\\");\\n    require(block.timestamp > agreement.resultsSubmittedAt + deal.timeouts.judgeResults.timeout, \\\"Not timed out\\\");\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n    storageContract.timeoutJudgeResult(dealId);    \\n    paymentsContract.timeoutJudgeResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      resultsCollateral,\\n      deal.timeouts.judgeResults.collateral\\n    );\\n  }\\n\\n  // either the JC or RP call this after the timeout has passed after results being checked\\n  // this refunds both the payment and results collateral to both the JC and RP\\n  // * check the RP or JC is calling this\\n  // * mark the deal as timedout\\n  // * pay back the RP's results collateral\\n  // * pay back the JC's paymnet collateral\\n  // * emit the event\\n  function timeoutMediateResult(\\n    string memory dealId\\n  ) public override {\\n    SharedStructs.Deal memory deal = storageContract.getDeal(dealId);\\n    SharedStructs.Agreement memory agreement = storageContract.getAgreement(dealId);\\n    require(deal.members.resourceProvider == tx.origin || deal.members.jobCreator == tx.origin, \\\"Only RP or JC\\\");\\n    require(agreement.state == SharedStructs.AgreementState.ResultsChecked, \\\"Not correct state\\\");\\n    require(block.timestamp > agreement.resultsSubmittedAt + deal.timeouts.judgeResults.timeout, \\\"Not timed out\\\");\\n    uint256 resultsCollateral = storageContract.getResultsCollateral(dealId);\\n    storageContract.timeoutMediateResult(dealId);\\n    paymentsContract.timeoutMediateResult(\\n      dealId,\\n      deal.members.resourceProvider,\\n      deal.members.jobCreator,\\n      deal.pricing.paymentCollateral,\\n      resultsCollateral,\\n      deal.pricing.mediationFee\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x53c8704522460e08bac3a0ebe5d7c4b640f8604cf0188e11403997c945090e33\",\"license\":\"Apache-2.0\"},\"contracts/IHiveController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"./SharedStructs.sol\\\";\\n\\ninterface IHiveController {\\n\\n  function agree(\\n    string memory dealId,\\n    SharedStructs.DealMembers memory members,\\n    SharedStructs.DealTimeouts memory timeouts,\\n    SharedStructs.DealPricing memory pricing\\n  ) external returns (SharedStructs.Agreement memory);\\n\\n  function addResult(\\n    string memory dealId,\\n    string memory resultsId,\\n    string memory dataId,\\n    uint256 instructionCount\\n  ) external;\\n\\n  function acceptResult(\\n    string memory dealId\\n  ) external;\\n  \\n  function checkResult(\\n    string memory dealId\\n  ) external;\\n\\n  function mediationAcceptResult(\\n    string memory dealId\\n  ) external;\\n\\n  function mediationRejectResult(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutAgree(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutSubmitResult(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutJudgeResult(\\n    string memory dealId\\n  ) external;\\n  \\n  function timeoutMediateResult(\\n    string memory dealId\\n  ) external;\\n}\\n\",\"keccak256\":\"0x3a776945fc566346c850c292f90a8e43f39332319cacb3eb12f2226277f84939\",\"license\":\"Apache-2.0\"},\"contracts/IHiveMediation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"./SharedStructs.sol\\\";\\n\\n// this is our controller contract\\n// it will be called by the mediation handler once a decision has been reached\\ninterface IHiveMediationRequester {\\n  function mediationAcceptResult(\\n    string memory dealId\\n  ) external;\\n\\n  function mediationRejectResult(\\n    string memory dealId\\n  ) external;\\n}\\n\\n// this is the contract that will handle mediating a deal\\ninterface IHiveMediationHandler {\\n  function mediationRequest(\\n    SharedStructs.Deal memory deal \\n  ) external; \\n}\\n\",\"keccak256\":\"0x743d15c46f8af3b2f9b7bc23d37daa13ba02fdfb6076ff2dc6897c356d7a3042\",\"license\":\"Apache-2.0\"},\"contracts/IHivePayments.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\ninterface IHivePayments {\\n\\n  /**\\n   * Init\\n   */\\n\\n  function setTokenAddress(\\n    address _tokenAddress\\n  ) external;\\n\\n  /**\\n   * Agreements\\n   */\\n  function agreeResourceProvider(\\n    string memory dealId,\\n    address resourceProvider,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function agreeJobCreator(\\n    string memory dealId,\\n    address jobCreator,\\n    uint256 paymentCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  /**\\n   * Results\\n   */\\n\\n  function addResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    uint256 resultsCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function acceptResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 jobCost,\\n    uint256 paymentCollateral,\\n    uint256 resultsCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function checkResult(\\n    string memory dealId,\\n    address jobCreator,\\n    uint256 timeoutCollateral,\\n    uint256 mediationFee\\n  ) external;\\n\\n  /**\\n   * Mediation\\n   */\\n\\n  function mediationAcceptResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 jobCost,\\n    uint256 paymentCollateral,\\n    uint256 resultsCollateral,\\n    uint256 mediationFee\\n  ) external;\\n\\n  function mediationRejectResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 paymentCollateral,\\n    uint256 resultsCollateral,\\n    uint256 mediationFee\\n  ) external;\\n\\n  /**\\n   * Timeouts\\n   */\\n\\n  function timeoutAgreeRefundResourceProvider(\\n    string memory dealId,\\n    address resourceProvider,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function timeoutAgreeRefundJobCreator(\\n    string memory dealId,\\n    address jobCreator,\\n    uint256 paymentCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function timeoutSubmitResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 paymentCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function timeoutJudgeResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 resultsCollateral,\\n    uint256 timeoutCollateral\\n  ) external;\\n\\n  function timeoutMediateResult(\\n    string memory dealId,\\n    address resourceProvider,\\n    address jobCreator,\\n    uint256 paymentCollateral,\\n    uint256 resultsCollateral,\\n    uint256 mediationFee\\n  ) external;\\n  \\n}\\n\",\"keccak256\":\"0xdf1ac69c856ab0fe38b0dfa95f7fc71076afb6b2ae551527f51e86f75d255e2b\",\"license\":\"Apache-2.0\"},\"contracts/IHiveStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"./SharedStructs.sol\\\";\\n\\ninterface IHiveStorage {\\n  \\n  /**\\n   * Deals\\n   */\\n\\n  function getDeal(\\n    string memory dealId\\n  ) external returns (SharedStructs.Deal memory);\\n\\n  function getDealsForParty(\\n    address party\\n  ) external returns (uint256[] memory);\\n\\n  function ensureDeal(\\n    string memory dealId,\\n    SharedStructs.DealMembers memory members,\\n    SharedStructs.DealTimeouts memory timeouts,\\n    SharedStructs.DealPricing memory pricing\\n  ) external returns (SharedStructs.Deal memory);\\n\\n  /**\\n   * Agreements\\n   */\\n\\n  function getAgreement(\\n    string memory dealId\\n  ) external returns (SharedStructs.Agreement memory);\\n  \\n  function agreeResourceProvider(\\n    string memory dealId\\n  ) external returns (SharedStructs.Agreement memory);\\n\\n  function agreeJobCreator(\\n    string memory dealId\\n  ) external returns (SharedStructs.Agreement memory);\\n  \\n  /**\\n   * Post Results\\n   */\\n\\n  function getResult(\\n    string memory dealId\\n  ) external returns (SharedStructs.Result memory);\\n\\n  function addResult(\\n    string memory dealId,\\n    string memory resultsId,\\n    string memory dataId,\\n    uint256 instructionCount\\n  ) external returns (SharedStructs.Result memory);\\n\\n  /**\\n   * Judge Results\\n   */\\n\\n  function acceptResult(\\n    string memory dealId\\n  ) external;\\n\\n  function checkResult(\\n    string memory dealId\\n  ) external;\\n\\n  /**\\n   * Mediation\\n   */\\n  \\n  function mediationAcceptResult(\\n    string memory dealId\\n  ) external;\\n\\n  function mediationRejectResult(\\n    string memory dealId\\n  ) external;\\n\\n  /**\\n   * Timeouts\\n   */\\n  function timeoutAgree(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutSubmitResult(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutJudgeResult(\\n    string memory dealId\\n  ) external;\\n\\n  function timeoutMediateResult(\\n    string memory dealId\\n  ) external;\\n\\n  /**\\n   * Costings\\n   */\\n\\n  function getJobCost(\\n    string memory dealId\\n  ) external returns (uint256);\\n\\n  function getResultsCollateral(\\n    string memory dealId\\n  ) external returns (uint256);\\n  \\n  /**\\n   * Checkers\\n   */\\n\\n  function hasDeal(\\n    string memory dealId\\n  ) external returns (bool);\\n\\n  function isState(\\n    string memory dealId,\\n    SharedStructs.AgreementState state\\n  ) external returns (bool);\\n  \\n}\\n\",\"keccak256\":\"0x54bd9785e037f0251f91012a8e31f2dadf5f6aa7488122398cdaa9f87034a6ba\",\"license\":\"Apache-2.0\"},\"contracts/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nlibrary SharedStructs {\\n\\n  enum ServiceType {\\n    Solver,\\n    Mediator,\\n    ResourceProvider,\\n    JobCreator\\n  }\\n\\n  enum AgreementState {\\n\\n    // the two parties have not yet both agreed to the deal\\n    DealNegotiating,\\n\\n    // both parties have agreed\\n    DealAgreed,\\n\\n    // results have been submitted by the RP\\n    ResultsSubmitted,\\n\\n    // the JC has accepted the results\\n    ResultsAccepted,\\n\\n    // the JC has checked the results\\n    ResultsChecked,\\n\\n    // a mediator has accepted the results\\n    MediationAccepted,\\n\\n    // a mediator has rejected the results\\n    MediationRejected,\\n\\n    // this means the counter-party did not agree to the deal in time\\n    TimeoutAgree,\\n\\n    // this means the RP did not submit results in time\\n    TimeoutSubmitResults,\\n\\n    // this means the JC did not accept or reject results in time\\n    TimeoutJudgeResults,\\n\\n    // this means the mediator did not accept or submit judgement in time\\n    TimeoutMediateResults\\n\\n  }\\n\\n  // we map addresses onto infomation about the user\\n  struct User {\\n    address userAddress;\\n    // the CID of information for this user\\n    string metadataCID;\\n    string url;\\n    ServiceType[] roles;\\n  }\\n\\n  // the various addresses involved in runnig a deal\\n  struct DealMembers {\\n    // the address of the solver service that the RP and JC have agreed to use\\n    address solver;\\n    // the addresses of the RP and JC that have agreed to this deal\\n    address jobCreator;\\n    address resourceProvider;\\n    // the list of mediators that the RP and JC have agreed to use\\n    address[] mediators;\\n  }\\n\\n  // a timeout represents the agreed amount of time and the penalty\\n  // that is applied if the timeout is exceeded  \\n  struct DealTimeout {\\n    uint256 timeout;\\n    uint256 collateral;\\n  }\\n  \\n  // the various forms of timeout a deal can have\\n  struct DealTimeouts { \\n    DealTimeout agree;\\n    DealTimeout submitResults;\\n    DealTimeout judgeResults;\\n    DealTimeout mediateResults;\\n  }\\n\\n  // configure the cost of a deal\\n  struct DealPricing {\\n  // agreed price per instruction\\n    uint256 instructionPrice;\\n\\n    // the collateral that the JC has put up to pay for the job\\n    // the final cost of the job will be deducted from this\\n    uint256 paymentCollateral;\\n\\n    // how much collateral the RP will post to attest it's results are correct\\n    // this is a multiple of the cost of the job which is known at results\\n    // submission time\\n    uint256 resultsCollateralMultiple;\\n\\n    // how much is the JC willing to pay the mediator to resolve disputes\\n    uint256 mediationFee;\\n  }\\n\\n  // a Deal forms the information that is agreed between both parties\\n  // both parties must have called \\\"agree_deal\\\" with the exact\\n  // same parameters before the deal is considered valid\\n  // a Deal is immutable - nothing about it can be updated\\n  struct Deal {\\n    // the CID of the Deal document on IPFS (and directory service)\\n    // this contains the job spec, the job offer and the resource offer\\n    string dealId;\\n\\n    // who is participating in this deal\\n    DealMembers members;\\n    \\n    // the timeout settings for a deal\\n    DealTimeouts timeouts;\\n\\n    // the pricing settings for a deal\\n    DealPricing pricing;    \\n  }\\n\\n  // what the RP submits back once having run the job\\n  // this is also immutable\\n  struct Result {\\n    // the id of the deal that this result is for\\n    string dealId;\\n\\n    // the CID of the results on IPFS (and directory service)\\n    // NOTE - this is not the CID of actual results data rather\\n    // of the JSON object reporting that data\\n    string resultsId;\\n\\n    // this is the actual lower level data CID\\n    string dataId;\\n\\n    // how many instructions were executed by the RP\\n    uint256 instructionCount;\\n  }\\n\\n  // an agreement keeps track of the state of a deal and it's fields can be mutated\\n  struct Agreement {\\n    // the current state of the agreement\\n    AgreementState state;\\n\\n    uint256 resourceProviderAgreedAt;\\n    uint256 jobCreatorAgreedAt;\\n    uint256 dealCreatedAt;\\n    uint256 dealAgreedAt;\\n\\n    uint256 resultsSubmittedAt;\\n    uint256 resultsAcceptedAt;\\n    uint256 resultsCheckedAt;\\n\\n    uint256 mediationAcceptedAt;\\n    uint256 mediationRejectedAt;\\n\\n    uint256 timeoutAgreeAt;\\n    uint256 timeoutSubmitResultsAt;\\n    uint256 timeoutJudgeResultsAt;\\n    uint256 timeoutMediateResultsAt;\\n  }\\n\\n  struct JobOffer {\\n    uint256 id;\\n    \\n    // this is the contract that will be triggered\\n    // once there are some results\\n    address calling_contract;\\n\\n    // this is the address that is paying for the job\\n    // they must have called approve on the token contract\\n    // and granted the solver address the number of tokens\\n    // required\\n    address payee;\\n\\n    // the job spec\\n    string module;\\n    string[] inputs;\\n  }\\n}\\n\",\"keccak256\":\"0x17ae1fe0274d61f5460caee95e214371a378a3e49730e5bdc4833506de99fcb6\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063795f9abf116100c3578063bbfff47d1161007c578063bbfff47d1461034d578063d48b108414610369578063e7b957d114610387578063e850be37146103a3578063f2fde38b146103bf578063f583b125146103db57610158565b8063795f9abf146102a157806380ffdfe0146102bd578063824518aa146102d95780638da5cb5b146102f557806393dbed3e14610313578063b4031e541461033157610158565b806343391cca1161011557806343391cca1461020b57806346834d1e14610227578063511a9f681461024357806359b910d61461025f578063640e570f1461027b578063715018a61461029757610158565b80630aca35ce1461015d5780631459457a1461017b578063155329ea14610197578063297f9e55146101b5578063393a4d34146101d15780633955548e146101ef575b600080fd5b61016561040b565b6040516101729190613910565b60405180910390f35b6101956004803603810190610190919061396b565b610435565b005b61019f6105a2565b6040516101ac9190613910565b60405180910390f35b6101cf60048036038101906101ca9190613b2c565b6105cc565b005b6101d9610a5d565b6040516101e69190613910565b60405180910390f35b61020960048036038101906102049190613bab565b610a87565b005b61022560048036038101906102209190613c66565b610e7f565b005b610241600480360381019061023c9190613b2c565b610f7b565b005b61025d60048036038101906102589190613b2c565b611345565b005b61027960048036038101906102749190613c66565b611718565b005b61029560048036038101906102909190613c66565b611836565b005b61029f611932565b005b6102bb60048036038101906102b69190613b2c565b611946565b005b6102d760048036038101906102d29190613b2c565b611e13565b005b6102f360048036038101906102ee9190613b2c565b612184565b005b6102fd61259a565b60405161030a9190613910565b60405180910390f35b61031b6125c3565b6040516103289190613910565b60405180910390f35b61034b60048036038101906103469190613c66565b6125ed565b005b61036760048036038101906103629190613c66565b6126a8565b005b610371612763565b60405161037e9190613910565b60405180910390f35b6103a1600480360381019061039c9190613b2c565b61278d565b005b6103bd60048036038101906103b89190613b2c565b612c3f565b005b6103d960048036038101906103d49190613c66565b6130ad565b005b6103f560048036038101906103f09190613f3a565b613130565b6040516104029190614181565b60405180910390f35b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060159054906101000a900460ff1615905080801561046857506001600060149054906101000a900460ff1660ff16105b806104975750610477306135f6565b15801561049657506001600060149054906101000a900460ff1660ff16145b5b6104d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cd90614220565b60405180910390fd5b6001600060146101000a81548160ff021916908360ff1602179055508015610514576001600060156101000a81548160ff0219169083151502179055505b61051d86611718565b610526856126a8565b61052f84611836565b61053883610e7f565b610541826125ed565b801561059a5760008060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516105919190614292565b60405180910390a15b505050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b050e74b8260026040518363ffffffff1660e01b815260040161062a92919061432a565b6020604051808303816000875af1158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190614392565b6106ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a39061440b565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b8152600401610709919061442b565b6000604051808303816000875af1158015610728573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107519190614805565b90503273ffffffffffffffffffffffffffffffffffffffff1681602001516020015173ffffffffffffffffffffffffffffffffffffffff16146107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c09061489a565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373db5c6a846040518263ffffffff1660e01b8152600401610826919061442b565b6020604051808303816000875af1158015610845573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086991906148ba565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f856040518263ffffffff1660e01b81526004016108c8919061442b565b6020604051808303816000875af11580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b91906148ba565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663297f9e55856040518263ffffffff1660e01b8152600401610968919061442b565b600060405180830381600087803b15801561098257600080fd5b505af1158015610996573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b13567148585602001516040015186602001516020015186886060015160200151878a6040015160400151602001516040518863ffffffff1660e01b8152600401610a2597969594939291906148f6565b600060405180830381600087803b158015610a3f57600080fd5b505af1158015610a53573d6000803e3d6000fd5b5050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b050e74b8560016040518363ffffffff1660e01b8152600401610ae592919061432a565b6020604051808303816000875af1158015610b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b289190614392565b610b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5e906149b8565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180866040518263ffffffff1660e01b8152600401610bc4919061442b565b6000604051808303816000875af1158015610be3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c0c9190614805565b90503273ffffffffffffffffffffffffffffffffffffffff1681602001516040015173ffffffffffffffffffffffffffffffffffffffff1614610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90614a24565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633955548e868686866040518563ffffffff1660e01b8152600401610ce59493929190614a44565b6000604051808303816000875af1158015610d04573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d2d9190614b6a565b506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f876040518263ffffffff1660e01b8152600401610d8b919061442b565b6020604051808303816000875af1158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce91906148ba565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309cab5108784602001516040015184866040015160200151602001516040518563ffffffff1660e01b8152600401610e459493929190614bb3565b600060405180830381600087803b158015610e5f57600080fd5b505af1158015610e73573d6000803e3d6000fd5b50505050505050505050565b610e87613619565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eed90614c4b565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b050e74b8260026040518363ffffffff1660e01b8152600401610fd992919061432a565b6020604051808303816000875af1158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c9190614392565b61105b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110529061440b565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b81526004016110b8919061442b565b6000604051808303816000875af11580156110d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111009190614805565b90503273ffffffffffffffffffffffffffffffffffffffff1681602001516020015173ffffffffffffffffffffffffffffffffffffffff1614611178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116f9061489a565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166346834d1e836040518263ffffffff1660e01b81526004016111d3919061442b565b600060405180830381600087803b1580156111ed57600080fd5b505af1158015611201573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aea3825183836020015160200151846040015160400151602001518560600151606001516040518563ffffffff1660e01b81526004016112829493929190614bb3565b600060405180830381600087803b15801561129c57600080fd5b505af11580156112b0573d6000803e3d6000fd5b50505050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370bea207826040518263ffffffff1660e01b815260040161130f9190614f1c565b600060405180830381600087803b15801561132957600080fd5b505af115801561133d573d6000803e3d6000fd5b505050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b81526004016113a2919061442b565b6000604051808303816000875af11580156113c1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113ea9190614805565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdd82d1d846040518263ffffffff1660e01b8152600401611449919061442b565b6101c0604051808303816000875af1158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d91906150b1565b90503273ffffffffffffffffffffffffffffffffffffffff1682602001516020015173ffffffffffffffffffffffffffffffffffffffff1614611505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fc9061489a565b60405180910390fd5b6001600a81111561151957611518613fdb565b5b8160000151600a8111156115305761152f613fdb565b5b14611570576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115679061512b565b60405180910390fd5b81604001516020015160000151816080015161158c919061517a565b42116115cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c4906151fa565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663511a9f68846040518263ffffffff1660e01b8152600401611628919061442b565b600060405180830381600087803b15801561164257600080fd5b505af1158015611656573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633d31a11584846020015160400151856020015160200151866060015160200151876040015160200151602001516040518663ffffffff1660e01b81526004016116e195949392919061521a565b600060405180830381600087803b1580156116fb57600080fd5b505af115801561170f573d6000803e3d6000fd5b50505050505050565b611720613619565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361178f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611786906152c0565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61183e613619565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a49061532c565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61193a613619565b6119446000613697565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b81526004016119a3919061442b565b6000604051808303816000875af11580156119c2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906119eb9190614805565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdd82d1d846040518263ffffffff1660e01b8152600401611a4a919061442b565b6101c0604051808303816000875af1158015611a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8e91906150b1565b90503273ffffffffffffffffffffffffffffffffffffffff1682602001516020015173ffffffffffffffffffffffffffffffffffffffff161480611b0557503273ffffffffffffffffffffffffffffffffffffffff1682602001516040015173ffffffffffffffffffffffffffffffffffffffff16145b611b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3b90615398565b60405180910390fd5b6000600a811115611b5857611b57613fdb565b5b8160000151600a811115611b6f57611b6e613fdb565b5b14611baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba69061512b565b60405180910390fd5b816040015160000151600001518160600151611bcb919061517a565b4211611c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c03906151fa565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663795f9abf846040518263ffffffff1660e01b8152600401611c67919061442b565b600060405180830381600087803b158015611c8157600080fd5b505af1158015611c95573d6000803e3d6000fd5b50505050600081602001511115611d5057600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ef0d89e84846020015160400151856040015160200151602001516040518463ffffffff1660e01b8152600401611d19939291906153b8565b600060405180830381600087803b158015611d3357600080fd5b505af1158015611d47573d6000803e3d6000fd5b50505050611e0e565b600081604001511115611e0d57600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663afe1dff784846020015160200151856060015160200151866040015160200151602001516040518563ffffffff1660e01b8152600401611dda9493929190614bb3565b600060405180830381600087803b158015611df457600080fd5b505af1158015611e08573d6000803e3d6000fd5b505050505b5b505050565b611e1b61375b565b73ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611eaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea190615442565b60405180910390fd5b611eb381613763565b611ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee9906154ae565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b8152600401611f4f919061442b565b6000604051808303816000875af1158015611f6e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611f979190614805565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f846040518263ffffffff1660e01b8152600401611ff6919061442b565b6020604051808303816000875af1158015612015573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203991906148ba565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166380ffdfe0846040518263ffffffff1660e01b8152600401612096919061442b565b600060405180830381600087803b1580156120b057600080fd5b505af11580156120c4573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2485cce84846020015160400151856020015160200151866060015160200151868860600151606001516040518763ffffffff1660e01b815260040161214d969594939291906154ce565b600060405180830381600087803b15801561216757600080fd5b505af115801561217b573d6000803e3d6000fd5b50505050505050565b61218c61375b565b73ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461221b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221290615442565b60405180910390fd5b61222481613763565b612263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225a906154ae565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b81526004016122c0919061442b565b6000604051808303816000875af11580156122df573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123089190614805565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166373db5c6a846040518263ffffffff1660e01b8152600401612367919061442b565b6020604051808303816000875af1158015612386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123aa91906148ba565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f856040518263ffffffff1660e01b8152600401612409919061442b565b6020604051808303816000875af1158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c91906148ba565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663824518aa856040518263ffffffff1660e01b81526004016124a9919061442b565b600060405180830381600087803b1580156124c357600080fd5b505af11580156124d7573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a1f90728585602001516040015186602001516020015186886060015160200151878a60600151606001516040518863ffffffff1660e01b815260040161256297969594939291906148f6565b600060405180830381600087803b15801561257c57600080fd5b505af1158015612590573d6000803e3d6000fd5b5050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6125f5613619565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265b90615582565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6126b0613619565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361271f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612716906155ee565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b81526004016127ea919061442b565b6000604051808303816000875af1158015612809573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906128329190614805565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdd82d1d846040518263ffffffff1660e01b8152600401612891919061442b565b6101c0604051808303816000875af11580156128b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d591906150b1565b90503273ffffffffffffffffffffffffffffffffffffffff1682602001516040015173ffffffffffffffffffffffffffffffffffffffff16148061294c57503273ffffffffffffffffffffffffffffffffffffffff1682602001516020015173ffffffffffffffffffffffffffffffffffffffff16145b61298b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129829061565a565b60405180910390fd5b6004600a81111561299f5761299e613fdb565b5b8160000151600a8111156129b6576129b5613fdb565b5b146129f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ed9061512b565b60405180910390fd5b816040015160400151600001518160a00151612a12919061517a565b4211612a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4a906151fa565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f856040518263ffffffff1660e01b8152600401612ab0919061442b565b6020604051808303816000875af1158015612acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af391906148ba565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7b957d1856040518263ffffffff1660e01b8152600401612b50919061442b565b600060405180830381600087803b158015612b6a57600080fd5b505af1158015612b7e573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663823f3de185856020015160400151866020015160200151876060015160200151868960600151606001516040518763ffffffff1660e01b8152600401612c07969594939291906154ce565b600060405180830381600087803b158015612c2157600080fd5b505af1158015612c35573d6000803e3d6000fd5b5050505050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7079180836040518263ffffffff1660e01b8152600401612c9c919061442b565b6000604051808303816000875af1158015612cbb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612ce49190614805565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdd82d1d846040518263ffffffff1660e01b8152600401612d43919061442b565b6101c0604051808303816000875af1158015612d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8791906150b1565b90503273ffffffffffffffffffffffffffffffffffffffff1682602001516040015173ffffffffffffffffffffffffffffffffffffffff1614612dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df690614a24565b60405180910390fd5b6002600a811115612e1357612e12613fdb565b5b8160000151600a811115612e2a57612e29613fdb565b5b14612e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e619061512b565b60405180910390fd5b816040015160400151600001518160a00151612e86919061517a565b4211612ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ebe906151fa565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638224ce5f856040518263ffffffff1660e01b8152600401612f24919061442b565b6020604051808303816000875af1158015612f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6791906148ba565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e850be37856040518263ffffffff1660e01b8152600401612fc4919061442b565b600060405180830381600087803b158015612fde57600080fd5b505af1158015612ff2573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a6726b58585602001516040015186602001516020015185886040015160400151602001516040518663ffffffff1660e01b815260040161307595949392919061521a565b600060405180830381600087803b15801561308f57600080fd5b505af11580156130a3573d6000803e3d6000fd5b5050505050505050565b6130b5613619565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161311b906156ec565b60405180910390fd5b61312d81613697565b50565b61313861384e565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a6370b0e878787876040518563ffffffff1660e01b815260040161319b949392919061581a565b6000604051808303816000875af11580156131ba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906131e39190614805565b9050600081602001516040015173ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16149050600082602001516020015173ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614905081806132645750805b6132a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161329a906158bb565b60405180910390fd5b81156133f357600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ec95b967896040518263ffffffff1660e01b8152600401613304919061442b565b6101c0604051808303816000875af1158015613324573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334891906150b1565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e3868dc89856020015160400151866040015160200151602001516040518463ffffffff1660e01b81526004016133bc939291906153b8565b600060405180830381600087803b1580156133d657600080fd5b505af11580156133ea573d6000803e3d6000fd5b5050505061354a565b801561354957600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c4135da896040518263ffffffff1660e01b8152600401613454919061442b565b6101c0604051808303816000875af1158015613474573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061349891906150b1565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b918803589856020015160200151866060015160200151876040015160400151602001516040518563ffffffff1660e01b81526004016135169493929190614bb3565b600060405180830381600087803b15801561353057600080fd5b505af1158015613544573d6000803e3d6000fd5b505050505b5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdd82d1d896040518263ffffffff1660e01b81526004016135a5919061442b565b6101c0604051808303816000875af11580156135c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e991906150b1565b9350505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61362161375b565b73ffffffffffffffffffffffffffffffffffffffff1661363f61259a565b73ffffffffffffffffffffffffffffffffffffffff1614613695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161368c90615927565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b050e74b8360046040518363ffffffff1660e01b81526004016137c392919061432a565b6020604051808303816000875af11580156137e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138069190614392565b613845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161383c90615993565b60405180910390fd5b60019050919050565b604051806101c001604052806000600a81111561386e5761386d613fdb565b5b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006138fa826138cf565b9050919050565b61390a816138ef565b82525050565b60006020820190506139256000830184613901565b92915050565b6000604051905090565b600080fd5b600080fd5b613948816138ef565b811461395357600080fd5b50565b6000813590506139658161393f565b92915050565b600080600080600060a0868803121561398757613986613935565b5b600061399588828901613956565b95505060206139a688828901613956565b94505060406139b788828901613956565b93505060606139c888828901613956565b92505060806139d988828901613956565b9150509295509295909350565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613a39826139f0565b810181811067ffffffffffffffff82111715613a5857613a57613a01565b5b80604052505050565b6000613a6b61392b565b9050613a778282613a30565b919050565b600067ffffffffffffffff821115613a9757613a96613a01565b5b613aa0826139f0565b9050602081019050919050565b82818337600083830152505050565b6000613acf613aca84613a7c565b613a61565b905082815260208101848484011115613aeb57613aea6139eb565b5b613af6848285613aad565b509392505050565b600082601f830112613b1357613b126139e6565b5b8135613b23848260208601613abc565b91505092915050565b600060208284031215613b4257613b41613935565b5b600082013567ffffffffffffffff811115613b6057613b5f61393a565b5b613b6c84828501613afe565b91505092915050565b6000819050919050565b613b8881613b75565b8114613b9357600080fd5b50565b600081359050613ba581613b7f565b92915050565b60008060008060808587031215613bc557613bc4613935565b5b600085013567ffffffffffffffff811115613be357613be261393a565b5b613bef87828801613afe565b945050602085013567ffffffffffffffff811115613c1057613c0f61393a565b5b613c1c87828801613afe565b935050604085013567ffffffffffffffff811115613c3d57613c3c61393a565b5b613c4987828801613afe565b9250506060613c5a87828801613b96565b91505092959194509250565b600060208284031215613c7c57613c7b613935565b5b6000613c8a84828501613956565b91505092915050565b600080fd5b600080fd5b600067ffffffffffffffff821115613cb857613cb7613a01565b5b602082029050602081019050919050565b600080fd5b6000613ce1613cdc84613c9d565b613a61565b90508083825260208201905060208402830185811115613d0457613d03613cc9565b5b835b81811015613d2d5780613d198882613956565b845260208401935050602081019050613d06565b5050509392505050565b600082601f830112613d4c57613d4b6139e6565b5b8135613d5c848260208601613cce565b91505092915050565b600060808284031215613d7b57613d7a613c93565b5b613d856080613a61565b90506000613d9584828501613956565b6000830152506020613da984828501613956565b6020830152506040613dbd84828501613956565b604083015250606082013567ffffffffffffffff811115613de157613de0613c98565b5b613ded84828501613d37565b60608301525092915050565b600060408284031215613e0f57613e0e613c93565b5b613e196040613a61565b90506000613e2984828501613b96565b6000830152506020613e3d84828501613b96565b60208301525092915050565b60006101008284031215613e6057613e5f613c93565b5b613e6a6080613a61565b90506000613e7a84828501613df9565b6000830152506040613e8e84828501613df9565b6020830152506080613ea284828501613df9565b60408301525060c0613eb684828501613df9565b60608301525092915050565b600060808284031215613ed857613ed7613c93565b5b613ee26080613a61565b90506000613ef284828501613b96565b6000830152506020613f0684828501613b96565b6020830152506040613f1a84828501613b96565b6040830152506060613f2e84828501613b96565b60608301525092915050565b6000806000806101c08587031215613f5557613f54613935565b5b600085013567ffffffffffffffff811115613f7357613f7261393a565b5b613f7f87828801613afe565b945050602085013567ffffffffffffffff811115613fa057613f9f61393a565b5b613fac87828801613d65565b9350506040613fbd87828801613e49565b925050610140613fcf87828801613ec2565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b811061401b5761401a613fdb565b5b50565b600081905061402c8261400a565b919050565b600061403c8261401e565b9050919050565b61404c81614031565b82525050565b61405b81613b75565b82525050565b6101c0820160008201516140786000850182614043565b50602082015161408b6020850182614052565b50604082015161409e6040850182614052565b5060608201516140b16060850182614052565b5060808201516140c46080850182614052565b5060a08201516140d760a0850182614052565b5060c08201516140ea60c0850182614052565b5060e08201516140fd60e0850182614052565b50610100820151614112610100850182614052565b50610120820151614127610120850182614052565b5061014082015161413c610140850182614052565b50610160820151614151610160850182614052565b50610180820151614166610180850182614052565b506101a082015161417b6101a0850182614052565b50505050565b60006101c0820190506141976000830184614061565b92915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061420a602e8361419d565b9150614215826141ae565b604082019050919050565b60006020820190508181036000830152614239816141fd565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061427c61427761427284614240565b614257565b61424a565b9050919050565b61428c81614261565b82525050565b60006020820190506142a76000830184614283565b92915050565b600081519050919050565b60005b838110156142d65780820151818401526020810190506142bb565b60008484015250505050565b60006142ed826142ad565b6142f7818561419d565b93506143078185602086016142b8565b614310816139f0565b840191505092915050565b61432481614031565b82525050565b6000604082019050818103600083015261434481856142e2565b9050614353602083018461431b565b9392505050565b60008115159050919050565b61436f8161435a565b811461437a57600080fd5b50565b60008151905061438c81614366565b92915050565b6000602082840312156143a8576143a7613935565b5b60006143b68482850161437d565b91505092915050565b7f526573756c74735375626d697474656400000000000000000000000000000000600082015250565b60006143f560108361419d565b9150614400826143bf565b602082019050919050565b60006020820190508181036000830152614424816143e8565b9050919050565b6000602082019050818103600083015261444581846142e2565b905092915050565b600061446061445b84613a7c565b613a61565b90508281526020810184848401111561447c5761447b6139eb565b5b6144878482856142b8565b509392505050565b600082601f8301126144a4576144a36139e6565b5b81516144b484826020860161444d565b91505092915050565b6000815190506144cc8161393f565b92915050565b60006144e56144e084613c9d565b613a61565b9050808382526020820190506020840283018581111561450857614507613cc9565b5b835b81811015614531578061451d88826144bd565b84526020840193505060208101905061450a565b5050509392505050565b600082601f8301126145505761454f6139e6565b5b81516145608482602086016144d2565b91505092915050565b60006080828403121561457f5761457e613c93565b5b6145896080613a61565b90506000614599848285016144bd565b60008301525060206145ad848285016144bd565b60208301525060406145c1848285016144bd565b604083015250606082015167ffffffffffffffff8111156145e5576145e4613c98565b5b6145f18482850161453b565b60608301525092915050565b60008151905061460c81613b7f565b92915050565b60006040828403121561462857614627613c93565b5b6146326040613a61565b90506000614642848285016145fd565b6000830152506020614656848285016145fd565b60208301525092915050565b6000610100828403121561467957614678613c93565b5b6146836080613a61565b9050600061469384828501614612565b60008301525060406146a784828501614612565b60208301525060806146bb84828501614612565b60408301525060c06146cf84828501614612565b60608301525092915050565b6000608082840312156146f1576146f0613c93565b5b6146fb6080613a61565b9050600061470b848285016145fd565b600083015250602061471f848285016145fd565b6020830152506040614733848285016145fd565b6040830152506060614747848285016145fd565b60608301525092915050565b60006101c0828403121561476a57614769613c93565b5b6147746080613a61565b9050600082015167ffffffffffffffff81111561479457614793613c98565b5b6147a08482850161448f565b600083015250602082015167ffffffffffffffff8111156147c4576147c3613c98565b5b6147d084828501614569565b60208301525060406147e484828501614662565b6040830152506101406147f9848285016146db565b60608301525092915050565b60006020828403121561481b5761481a613935565b5b600082015167ffffffffffffffff8111156148395761483861393a565b5b61484584828501614753565b91505092915050565b7f4f6e6c79204a4300000000000000000000000000000000000000000000000000600082015250565b600061488460078361419d565b915061488f8261484e565b602082019050919050565b600060208201905081810360008301526148b381614877565b9050919050565b6000602082840312156148d0576148cf613935565b5b60006148de848285016145fd565b91505092915050565b6148f081613b75565b82525050565b600060e0820190508181036000830152614910818a6142e2565b905061491f6020830189613901565b61492c6040830188613901565b61493960608301876148e7565b61494660808301866148e7565b61495360a08301856148e7565b61496060c08301846148e7565b98975050505050505050565b7f4465616c41677265656400000000000000000000000000000000000000000000600082015250565b60006149a2600a8361419d565b91506149ad8261496c565b602082019050919050565b600060208201905081810360008301526149d181614995565b9050919050565b7f4f6e6c7920525000000000000000000000000000000000000000000000000000600082015250565b6000614a0e60078361419d565b9150614a19826149d8565b602082019050919050565b60006020820190508181036000830152614a3d81614a01565b9050919050565b60006080820190508181036000830152614a5e81876142e2565b90508181036020830152614a7281866142e2565b90508181036040830152614a8681856142e2565b9050614a9560608301846148e7565b95945050505050565b600060808284031215614ab457614ab3613c93565b5b614abe6080613a61565b9050600082015167ffffffffffffffff811115614ade57614add613c98565b5b614aea8482850161448f565b600083015250602082015167ffffffffffffffff811115614b0e57614b0d613c98565b5b614b1a8482850161448f565b602083015250604082015167ffffffffffffffff811115614b3e57614b3d613c98565b5b614b4a8482850161448f565b6040830152506060614b5e848285016145fd565b60608301525092915050565b600060208284031215614b8057614b7f613935565b5b600082015167ffffffffffffffff811115614b9e57614b9d61393a565b5b614baa84828501614a9e565b91505092915050565b60006080820190508181036000830152614bcd81876142e2565b9050614bdc6020830186613901565b614be960408301856148e7565b614bf660608301846148e7565b95945050505050565b7f4d6564696174696f6e2061646472657373000000000000000000000000000000600082015250565b6000614c3560118361419d565b9150614c4082614bff565b602082019050919050565b60006020820190508181036000830152614c6481614c28565b9050919050565b600082825260208201905092915050565b6000614c87826142ad565b614c918185614c6b565b9350614ca18185602086016142b8565b614caa816139f0565b840191505092915050565b614cbe816138ef565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000614cfc8383614cb5565b60208301905092915050565b6000602082019050919050565b6000614d2082614cc4565b614d2a8185614ccf565b9350614d3583614ce0565b8060005b83811015614d66578151614d4d8882614cf0565b9750614d5883614d08565b925050600181019050614d39565b5085935050505092915050565b6000608083016000830151614d8b6000860182614cb5565b506020830151614d9e6020860182614cb5565b506040830151614db16040860182614cb5565b5060608301518482036060860152614dc98282614d15565b9150508091505092915050565b604082016000820151614dec6000850182614052565b506020820151614dff6020850182614052565b50505050565b61010082016000820151614e1c6000850182614dd6565b506020820151614e2f6040850182614dd6565b506040820151614e426080850182614dd6565b506060820151614e5560c0850182614dd6565b50505050565b608082016000820151614e716000850182614052565b506020820151614e846020850182614052565b506040820151614e976040850182614052565b506060820151614eaa6060850182614052565b50505050565b60006101c0830160008301518482036000860152614ece8282614c7c565b91505060208301518482036020860152614ee88282614d73565b9150506040830151614efd6040860182614e05565b506060830151614f11610140860182614e5b565b508091505092915050565b60006020820190508181036000830152614f368184614eb0565b905092915050565b600b8110614f4b57600080fd5b50565b600081519050614f5d81614f3e565b92915050565b60006101c08284031215614f7a57614f79613c93565b5b614f856101c0613a61565b90506000614f9584828501614f4e565b6000830152506020614fa9848285016145fd565b6020830152506040614fbd848285016145fd565b6040830152506060614fd1848285016145fd565b6060830152506080614fe5848285016145fd565b60808301525060a0614ff9848285016145fd565b60a08301525060c061500d848285016145fd565b60c08301525060e0615021848285016145fd565b60e083015250610100615036848285016145fd565b6101008301525061012061504c848285016145fd565b61012083015250610140615062848285016145fd565b61014083015250610160615078848285016145fd565b6101608301525061018061508e848285016145fd565b610180830152506101a06150a4848285016145fd565b6101a08301525092915050565b60006101c082840312156150c8576150c7613935565b5b60006150d684828501614f63565b91505092915050565b7f4e6f7420636f7272656374207374617465000000000000000000000000000000600082015250565b600061511560118361419d565b9150615120826150df565b602082019050919050565b6000602082019050818103600083015261514481615108565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061518582613b75565b915061519083613b75565b92508282019050808211156151a8576151a761514b565b5b92915050565b7f4e6f742074696d6564206f757400000000000000000000000000000000000000600082015250565b60006151e4600d8361419d565b91506151ef826151ae565b602082019050919050565b60006020820190508181036000830152615213816151d7565b9050919050565b600060a082019050818103600083015261523481886142e2565b90506152436020830187613901565b6152506040830186613901565b61525d60608301856148e7565b61526a60808301846148e7565b9695505050505050565b7f53746f7261676520616464726573730000000000000000000000000000000000600082015250565b60006152aa600f8361419d565b91506152b582615274565b602082019050919050565b600060208201905081810360008301526152d98161529d565b9050919050565b7f5061796d656e7473206164647265737300000000000000000000000000000000600082015250565b600061531660108361419d565b9150615321826152e0565b602082019050919050565b6000602082019050818103600083015261534581615309565b9050919050565b7f4f6e6c79204a43206f7220525000000000000000000000000000000000000000600082015250565b6000615382600d8361419d565b915061538d8261534c565b602082019050919050565b600060208201905081810360008301526153b181615375565b9050919050565b600060608201905081810360008301526153d281866142e2565b90506153e16020830185613901565b6153ee60408301846148e7565b949350505050565b7f4f6e6c79206d6564696174696f6e000000000000000000000000000000000000600082015250565b600061542c600e8361419d565b9150615437826153f6565b602082019050919050565b6000602082019050818103600083015261545b8161541f565b9050919050565b7f43616e6e6f74206d656469617465000000000000000000000000000000000000600082015250565b6000615498600e8361419d565b91506154a382615462565b602082019050919050565b600060208201905081810360008301526154c78161548b565b9050919050565b600060c08201905081810360008301526154e881896142e2565b90506154f76020830188613901565b6155046040830187613901565b61551160608301866148e7565b61551e60808301856148e7565b61552b60a08301846148e7565b979650505050505050565b7f4a6f6243726561746f7220616464726573730000000000000000000000000000600082015250565b600061556c60128361419d565b915061557782615536565b602082019050919050565b6000602082019050818103600083015261559b8161555f565b9050919050565b7f5573657273206164647265737300000000000000000000000000000000000000600082015250565b60006155d8600d8361419d565b91506155e3826155a2565b602082019050919050565b60006020820190508181036000830152615607816155cb565b9050919050565b7f4f6e6c79205250206f72204a4300000000000000000000000000000000000000600082015250565b6000615644600d8361419d565b915061564f8261560e565b602082019050919050565b6000602082019050818103600083015261567381615637565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006156d660268361419d565b91506156e18261567a565b604082019050919050565b60006020820190508181036000830152615705816156c9565b9050919050565b60006080830160008301516157246000860182614cb5565b5060208301516157376020860182614cb5565b50604083015161574a6040860182614cb5565b50606083015184820360608601526157628282614d15565b9150508091505092915050565b610100820160008201516157866000850182614dd6565b5060208201516157996040850182614dd6565b5060408201516157ac6080850182614dd6565b5060608201516157bf60c0850182614dd6565b50505050565b6080820160008201516157db6000850182614052565b5060208201516157ee6020850182614052565b5060408201516158016040850182614052565b5060608201516158146060850182614052565b50505050565b60006101c082019050818103600083015261583581876142e2565b90508181036020830152615849818661570c565b9050615858604083018561576f565b6158666101408301846157c5565b95945050505050565b7f4f6e6c79205250202f204a430000000000000000000000000000000000000000600082015250565b60006158a5600c8361419d565b91506158b08261586f565b602082019050919050565b600060208201905081810360008301526158d481615898565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061591160208361419d565b915061591c826158db565b602082019050919050565b6000602082019050818103600083015261594081615904565b9050919050565b7f526573756c7473436865636b6564000000000000000000000000000000000000600082015250565b600061597d600e8361419d565b915061598882615947565b602082019050919050565b600060208201905081810360008301526159ac81615970565b905091905056fea26469706673582212205ff3e24736db9ad2ce64d04b5328f33427eabd9eabe4e8de30f7f2e7c6e7d2c464736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addResult(string,string,string,uint256)": {
        "notice": "Results"
      },
      "agree(string,(address,address,address,address[]),((uint256,uint256),(uint256,uint256),(uint256,uint256),(uint256,uint256)),(uint256,uint256,uint256,uint256))": {
        "notice": "Agreements"
      },
      "initialize(address,address,address,address,address)": {
        "notice": "Init"
      },
      "mediationAcceptResult(string)": {
        "notice": "Mediation"
      },
      "timeoutAgree(string)": {
        "notice": "Timeouts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/HiveController.sol:HiveController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/HiveController.sol:HiveController",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/HiveController.sol:HiveController",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 748,
        "contract": "contracts/HiveController.sol:HiveController",
        "label": "storageAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 750,
        "contract": "contracts/HiveController.sol:HiveController",
        "label": "userAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 752,
        "contract": "contracts/HiveController.sol:HiveController",
        "label": "paymentsAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 754,
        "contract": "contracts/HiveController.sol:HiveController",
        "label": "mediationAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 756,
        "contract": "contracts/HiveController.sol:HiveController",
        "label": "jobCreatorAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 759,
        "contract": "contracts/HiveController.sol:HiveController",
        "label": "storageContract",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IHiveStorage)3504"
      },
      {
        "astId": 762,
        "contract": "contracts/HiveController.sol:HiveController",
        "label": "paymentsContract",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IHivePayments)3342"
      },
      {
        "astId": 765,
        "contract": "contracts/HiveController.sol:HiveController",
        "label": "mediationContract",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IHiveMediationHandler)3177"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IHiveMediationHandler)3177": {
        "encoding": "inplace",
        "label": "contract IHiveMediationHandler",
        "numberOfBytes": "20"
      },
      "t_contract(IHivePayments)3342": {
        "encoding": "inplace",
        "label": "contract IHivePayments",
        "numberOfBytes": "20"
      },
      "t_contract(IHiveStorage)3504": {
        "encoding": "inplace",
        "label": "contract IHiveStorage",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}