{
  "address": "0x7266Dd5F860908887365fC20F4E3200de1E9dA75",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum SharedStructs.ServiceType",
          "name": "serviceType",
          "type": "uint8"
        }
      ],
      "name": "addUserToList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadataCID",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "enum SharedStructs.ServiceType[]",
              "name": "roles",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct SharedStructs.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum SharedStructs.ServiceType",
          "name": "serviceType",
          "type": "uint8"
        }
      ],
      "name": "removeUserFromList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum SharedStructs.ServiceType",
          "name": "serviceType",
          "type": "uint8"
        }
      ],
      "name": "showUsersInList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "metadataCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "enum SharedStructs.ServiceType[]",
          "name": "roles",
          "type": "uint8[]"
        }
      ],
      "name": "updateUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadataCID",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "enum SharedStructs.ServiceType[]",
              "name": "roles",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct SharedStructs.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x82cb4bf66c6a8a55eb191ea4bd8a2c0fe7d2c74c4a9f37e6722c8c18fd435e7e",
  "receipt": {
    "to": null,
    "from": "0x823531B7c7843D8c3821B19D70cbFb6173b9Cb02",
    "contractAddress": "0x7266Dd5F860908887365fC20F4E3200de1E9dA75",
    "transactionIndex": 54,
    "gasUsed": "1893687",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000200000000000000010000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000008000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000020000000000000000000000000000000000000000000000000100000000000000010",
    "blockHash": "0x5c4df377d916b2e608cdaee5618a0d7cce1fb654abaa0a4d6eaba3a4da1effb5",
    "transactionHash": "0x82cb4bf66c6a8a55eb191ea4bd8a2c0fe7d2c74c4a9f37e6722c8c18fd435e7e",
    "logs": [
      {
        "transactionIndex": 54,
        "blockNumber": 5351308,
        "transactionHash": "0x82cb4bf66c6a8a55eb191ea4bd8a2c0fe7d2c74c4a9f37e6722c8c18fd435e7e",
        "address": "0x7266Dd5F860908887365fC20F4E3200de1E9dA75",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000823531b7c7843d8c3821b19d70cbfb6173b9cb02"
        ],
        "data": "0x",
        "logIndex": 77,
        "blockHash": "0x5c4df377d916b2e608cdaee5618a0d7cce1fb654abaa0a4d6eaba3a4da1effb5"
      }
    ],
    "blockNumber": 5351308,
    "cumulativeGasUsed": "7372779",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b1c846de1a2fdbebc0425659c174617e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum SharedStructs.ServiceType\",\"name\":\"serviceType\",\"type\":\"uint8\"}],\"name\":\"addUserToList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum SharedStructs.ServiceType[]\",\"name\":\"roles\",\"type\":\"uint8[]\"}],\"internalType\":\"struct SharedStructs.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SharedStructs.ServiceType\",\"name\":\"serviceType\",\"type\":\"uint8\"}],\"name\":\"removeUserFromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SharedStructs.ServiceType\",\"name\":\"serviceType\",\"type\":\"uint8\"}],\"name\":\"showUsersInList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum SharedStructs.ServiceType[]\",\"name\":\"roles\",\"type\":\"uint8[]\"}],\"name\":\"updateUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum SharedStructs.ServiceType[]\",\"name\":\"roles\",\"type\":\"uint8[]\"}],\"internalType\":\"struct SharedStructs.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUser(address)\":{\"notice\":\"Users\"},\"initialize()\":{\"notice\":\"Init\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HiveUsers.sol\":\"HiveUsers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/ControllerOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// as well as being ownable (i.e. our admin wallet)\\n// this contract has a modifier called onlyController\\n// it works the same way as Ownable but only the Owner\\n// can change the controller address so it gives us a way of\\n// re-pointing contracts if needed\\ncontract ControllerOwnable is Ownable {\\n\\n  // the address of the controller that is allowed to call functions\\n  address private controllerAddress;\\n\\n  // used to \\\"freeze\\\" the controller address - even the admin cannot\\n  // change it from this point onwards\\n  bool private canChangeControllerAddress = true;\\n\\n  modifier onlyController() {\\n    _checkControllerAccess();\\n    _;\\n  }\\n\\n  function _checkControllerAccess() internal view virtual returns (bool) {\\n    require(controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(_msgSender() == controllerAddress, \\\"ControllerOwnable: Only the controller can call this method\\\");\\n    return true;\\n  }\\n\\n  function setControllerAddress(address _controllerAddress) public onlyOwner {\\n    require(_controllerAddress != address(0), \\\"ControllerOwnable: Controller address must be defined\\\");\\n    require(canChangeControllerAddress, \\\"ControllerOwnable: canChangeControllerAddress is disabled\\\");\\n    controllerAddress = _controllerAddress;\\n  }\\n\\n  function getControllerAddress() public view returns (address) {\\n    return controllerAddress;\\n  }\\n\\n  function disableChangeControllerAddress() public onlyOwner {\\n    canChangeControllerAddress = false;\\n  }\\n}\\n\",\"keccak256\":\"0xecfd8b0beb12340f51cefee5e121932fa7aee0a41fb7d0233966419d153ef429\",\"license\":\"Apache-2.0\"},\"contracts/HiveUsers.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SharedStructs.sol\\\";\\nimport \\\"./ControllerOwnable.sol\\\";\\n\\ncontract HiveUsers is Ownable, Initializable {\\n\\n  // a map of user address -> user\\n  mapping(address => SharedStructs.User) private users;\\n\\n  // a map of user type => user address[]\\n  mapping(SharedStructs.ServiceType => address[]) private usersByType;\\n\\n  /**\\n   * Init\\n   */\\n\\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n  function initialize() public initializer {\\n    \\n  }\\n\\n  /**\\n   * Users\\n   */\\n\\n  function getUser(\\n    address userAddress\\n  ) public view returns (SharedStructs.User memory) {\\n    return users[userAddress];\\n  }\\n\\n  function updateUser(\\n    string memory metadataCID,\\n    string memory url,\\n    SharedStructs.ServiceType[] memory roles\\n  ) public returns (SharedStructs.User memory) {\\n    SharedStructs.User memory newUser = SharedStructs.User(\\n      tx.origin,\\n      metadataCID,\\n      url,\\n      roles\\n    );\\n    users[tx.origin] = newUser;\\n    return newUser;\\n  }\\n\\n  function addUserToList(\\n    SharedStructs.ServiceType serviceType\\n  ) public {\\n    require(users[tx.origin].userAddress != address(0), \\\"User must exist\\\");\\n    (, bool found) = _getUserListIndex(serviceType, tx.origin);\\n    require(!found, \\\"User is already part of that list\\\");\\n    require(_doesUserHaveRole(serviceType, tx.origin), \\\"User must have that role\\\");\\n    usersByType[serviceType].push(tx.origin);\\n  }\\n\\n  function removeUserFromList(\\n    SharedStructs.ServiceType serviceType\\n  ) public {\\n    require(users[tx.origin].userAddress != address(0), \\\"User must exist\\\");\\n    (uint256 index, bool found) = _getUserListIndex(serviceType, tx.origin);\\n    require(found, \\\"User is not part of that list\\\");\\n    for (uint256 i = index; i < usersByType[serviceType].length - 1; i++) {\\n      usersByType[serviceType][i] = usersByType[serviceType][i + 1];\\n    }\\n    usersByType[serviceType].pop();\\n  }\\n\\n  function showUsersInList(\\n    SharedStructs.ServiceType serviceType\\n  ) public view returns (address[] memory) {\\n    return usersByType[serviceType];\\n  }\\n\\n  // returns the index of the user found in the service list\\n  // it returns 0 and false if the user is not found\\n  function _getUserListIndex(\\n    SharedStructs.ServiceType serviceType,\\n    address userAddress\\n  ) private view returns (uint256, bool) {\\n    uint256 ret = 0;\\n    bool found = false;\\n    for (uint256 i = 0; i < usersByType[serviceType].length; i++) {\\n      if (usersByType[serviceType][i] == userAddress) {\\n        ret = i;\\n        found = true;\\n        break;\\n      }\\n    }\\n    return (ret, found);\\n  }\\n\\n  function _doesUserHaveRole(\\n    SharedStructs.ServiceType serviceType,\\n    address userAddress\\n  ) private view returns (bool) {\\n    bool found = false;\\n    for (uint256 i = 0; i < users[userAddress].roles.length; i++) {\\n      if (users[userAddress].roles[i] == serviceType) {\\n        found = true;\\n        break;\\n      }\\n    }\\n    return found;\\n  }\\n}\\n\",\"keccak256\":\"0x39cfd378f59f7e713df1e9f873cfcaaae2d10335d51737e5496a85e05cb9af9a\",\"license\":\"Apache-2.0\"},\"contracts/SharedStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.6;\\n\\nlibrary SharedStructs {\\n\\n  enum ServiceType {\\n    Solver,\\n    Mediator,\\n    ResourceProvider,\\n    JobCreator\\n  }\\n\\n  enum AgreementState {\\n\\n    // the two parties have not yet both agreed to the deal\\n    DealNegotiating,\\n\\n    // both parties have agreed\\n    DealAgreed,\\n\\n    // results have been submitted by the RP\\n    ResultsSubmitted,\\n\\n    // the JC has accepted the results\\n    ResultsAccepted,\\n\\n    // the JC has checked the results\\n    ResultsChecked,\\n\\n    // a mediator has accepted the results\\n    MediationAccepted,\\n\\n    // a mediator has rejected the results\\n    MediationRejected,\\n\\n    // this means the counter-party did not agree to the deal in time\\n    TimeoutAgree,\\n\\n    // this means the RP did not submit results in time\\n    TimeoutSubmitResults,\\n\\n    // this means the JC did not accept or reject results in time\\n    TimeoutJudgeResults,\\n\\n    // this means the mediator did not accept or submit judgement in time\\n    TimeoutMediateResults\\n\\n  }\\n\\n  // we map addresses onto infomation about the user\\n  struct User {\\n    address userAddress;\\n    // the CID of information for this user\\n    string metadataCID;\\n    string url;\\n    ServiceType[] roles;\\n  }\\n\\n  // the various addresses involved in runnig a deal\\n  struct DealMembers {\\n    // the address of the solver service that the RP and JC have agreed to use\\n    address solver;\\n    // the addresses of the RP and JC that have agreed to this deal\\n    address jobCreator;\\n    address resourceProvider;\\n    // the list of mediators that the RP and JC have agreed to use\\n    address[] mediators;\\n  }\\n\\n  // a timeout represents the agreed amount of time and the penalty\\n  // that is applied if the timeout is exceeded  \\n  struct DealTimeout {\\n    uint256 timeout;\\n    uint256 collateral;\\n  }\\n  \\n  // the various forms of timeout a deal can have\\n  struct DealTimeouts { \\n    DealTimeout agree;\\n    DealTimeout submitResults;\\n    DealTimeout judgeResults;\\n    DealTimeout mediateResults;\\n  }\\n\\n  // configure the cost of a deal\\n  struct DealPricing {\\n  // agreed price per instruction\\n    uint256 instructionPrice;\\n\\n    // the collateral that the JC has put up to pay for the job\\n    // the final cost of the job will be deducted from this\\n    uint256 paymentCollateral;\\n\\n    // how much collateral the RP will post to attest it's results are correct\\n    // this is a multiple of the cost of the job which is known at results\\n    // submission time\\n    uint256 resultsCollateralMultiple;\\n\\n    // how much is the JC willing to pay the mediator to resolve disputes\\n    uint256 mediationFee;\\n  }\\n\\n  // a Deal forms the information that is agreed between both parties\\n  // both parties must have called \\\"agree_deal\\\" with the exact\\n  // same parameters before the deal is considered valid\\n  // a Deal is immutable - nothing about it can be updated\\n  struct Deal {\\n    // the CID of the Deal document on IPFS (and directory service)\\n    // this contains the job spec, the job offer and the resource offer\\n    string dealId;\\n\\n    // who is participating in this deal\\n    DealMembers members;\\n    \\n    // the timeout settings for a deal\\n    DealTimeouts timeouts;\\n\\n    // the pricing settings for a deal\\n    DealPricing pricing;    \\n  }\\n\\n  // what the RP submits back once having run the job\\n  // this is also immutable\\n  struct Result {\\n    // the id of the deal that this result is for\\n    string dealId;\\n\\n    // the CID of the results on IPFS (and directory service)\\n    // NOTE - this is not the CID of actual results data rather\\n    // of the JSON object reporting that data\\n    string resultsId;\\n\\n    // this is the actual lower level data CID\\n    string dataId;\\n\\n    // how many instructions were executed by the RP\\n    uint256 instructionCount;\\n  }\\n\\n  // an agreement keeps track of the state of a deal and it's fields can be mutated\\n  struct Agreement {\\n    // the current state of the agreement\\n    AgreementState state;\\n\\n    uint256 resourceProviderAgreedAt;\\n    uint256 jobCreatorAgreedAt;\\n    uint256 dealCreatedAt;\\n    uint256 dealAgreedAt;\\n\\n    uint256 resultsSubmittedAt;\\n    uint256 resultsAcceptedAt;\\n    uint256 resultsCheckedAt;\\n\\n    uint256 mediationAcceptedAt;\\n    uint256 mediationRejectedAt;\\n\\n    uint256 timeoutAgreeAt;\\n    uint256 timeoutSubmitResultsAt;\\n    uint256 timeoutJudgeResultsAt;\\n    uint256 timeoutMediateResultsAt;\\n  }\\n\\n  struct JobOffer {\\n    uint256 id;\\n    \\n    // this is the contract that will be triggered\\n    // once there are some results\\n    address calling_contract;\\n\\n    // this is the address that is paying for the job\\n    // they must have called approve on the token contract\\n    // and granted the solver address the number of tokens\\n    // required\\n    address payee;\\n\\n    // the job spec\\n    string module;\\n    string[] inputs;\\n  }\\n}\\n\",\"keccak256\":\"0x17ae1fe0274d61f5460caee95e214371a378a3e49730e5bdc4833506de99fcb6\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6120e8806200010e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a15dcc8a11610066578063a15dcc8a146100fa578063a7f96f061461012a578063aeb5ec0114610146578063ebbbca2714610162578063f2fde38b1461019257610093565b80636f77926b14610098578063715018a6146100c85780638129fc1c146100d25780638da5cb5b146100dc575b600080fd5b6100b260048036038101906100ad919061123d565b6101ae565b6040516100bf91906114a0565b60405180910390f35b6100d061040e565b005b6100da610422565b005b6100e461055d565b6040516100f191906114d1565b60405180910390f35b610114600480360381019061010f9190611511565b610586565b60405161012191906115ed565b60405180910390f35b610144600480360381019061013f9190611511565b61064b565b005b610160600480360381019061015b9190611511565b610967565b005b61017c6004803603810190610177919061180c565b610b6d565b60405161018991906114a0565b60405180910390f35b6101ac60048036038101906101a7919061123d565b610c8e565b005b6101b66110ba565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610266906118e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610292906118e2565b80156102df5780601f106102b4576101008083540402835291602001916102df565b820191906000526020600020905b8154815290600101906020018083116102c257829003601f168201915b505050505081526020016002820180546102f8906118e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610324906118e2565b80156103715780601f1061034657610100808354040283529160200191610371565b820191906000526020600020905b81548152906001019060200180831161035457829003601f168201915b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156103fe57602002820191906000526020600020906000905b82829054906101000a900460ff1660038111156103d8576103d7611335565b5b815260200190600101906020826000010492830192600103820291508084116103b85790505b5050505050815250509050919050565b610416610d11565b6104206000610d8f565b565b60008060159054906101000a900460ff1615905080801561045557506001600060149054906101000a900460ff1660ff16105b80610484575061046430610e53565b15801561048357506001600060149054906101000a900460ff1660ff16145b5b6104c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ba90611996565b60405180910390fd5b6001600060146101000a81548160ff021916908360ff1602179055508015610501576001600060156101000a81548160ff0219169083151502179055505b801561055a5760008060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516105519190611a08565b60405180910390a15b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606002600083600381111561059f5761059e611335565b5b60038111156105b1576105b0611335565b5b815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561063f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105f5575b50505050509050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361071c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071390611a6f565b60405180910390fd5b6000806107298332610e76565b915091508061076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076490611adb565b60405180910390fd5b60008290505b60016002600086600381111561078c5761078b611335565b5b600381111561079e5761079d611335565b5b8152602001908152602001600020805490506107ba9190611b34565b8110156108e557600260008560038111156107d8576107d7611335565b5b60038111156107ea576107e9611335565b5b81526020019081526020016000206001826108059190611b68565b8154811061081657610815611b9c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002600086600381111561085857610857611335565b5b600381111561086a57610869611335565b5b8152602001908152602001600020828154811061088a57610889611b9c565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806108dd90611bcb565b915050610773565b50600260008460038111156108fd576108fc611335565b5b600381111561090f5761090e611335565b5b815260200190815260200160002080548061092d5761092c611c13565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2f90611a6f565b60405180910390fd5b6000610a448232610e76565b9150508015610a88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7f90611cb4565b60405180910390fd5b610a928232610f96565b610ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac890611d20565b60405180910390fd5b60026000836003811115610ae857610ae7611335565b5b6003811115610afa57610af9611335565b5b8152602001908152602001600020329080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610b756110ba565b600060405180608001604052803273ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815250905080600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610c4c9190611ee2565b506040820151816002019081610c629190611ee2565b506060820151816003019080519060200190610c7f9291906110f8565b50905050809150509392505050565b610c96610d11565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfc90612026565b60405180910390fd5b610d0e81610d8f565b50565b610d196110b2565b73ffffffffffffffffffffffffffffffffffffffff16610d3761055d565b73ffffffffffffffffffffffffffffffffffffffff1614610d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8490612092565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008060008060005b60026000886003811115610e9657610e95611335565b5b6003811115610ea857610ea7611335565b5b815260200190815260200160002080549050811015610f86578573ffffffffffffffffffffffffffffffffffffffff1660026000896003811115610eef57610eee611335565b5b6003811115610f0157610f00611335565b5b81526020019081526020016000208281548110610f2157610f20611b9c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f735780925060019150610f86565b8080610f7e90611bcb565b915050610e7f565b5081819350935050509250929050565b6000806000905060005b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301805490508110156110a75784600381111561100057610fff611335565b5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301828154811061105457611053611b9c565b5b90600052602060002090602091828204019190069054906101000a900460ff16600381111561108657611085611335565b5b0361109457600191506110a7565b808061109f90611bcb565b915050610fa0565b508091505092915050565b600033905090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081525090565b82805482825590600052602060002090601f0160209004810192821561119d5791602002820160005b8382111561116e57835183826101000a81548160ff0219169083600381111561114d5761114c611335565b5b02179055509260200192600101602081600001049283019260010302611121565b801561119b5782816101000a81549060ff021916905560010160208160000104928301926001030261116e565b505b5090506111aa91906111ae565b5090565b5b808211156111c75760008160009055506001016111af565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061120a826111df565b9050919050565b61121a816111ff565b811461122557600080fd5b50565b60008135905061123781611211565b92915050565b600060208284031215611253576112526111d5565b5b600061126184828501611228565b91505092915050565b611273816111ff565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112b3578082015181840152602081019050611298565b60008484015250505050565b6000601f19601f8301169050919050565b60006112db82611279565b6112e58185611284565b93506112f5818560208601611295565b6112fe816112bf565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061137557611374611335565b5b50565b600081905061138682611364565b919050565b600061139682611378565b9050919050565b6113a68161138b565b82525050565b60006113b8838361139d565b60208301905092915050565b6000602082019050919050565b60006113dc82611309565b6113e68185611314565b93506113f183611325565b8060005b8381101561142257815161140988826113ac565b9750611414836113c4565b9250506001810190506113f5565b5085935050505092915050565b6000608083016000830151611447600086018261126a565b506020830151848203602086015261145f82826112d0565b9150506040830151848203604086015261147982826112d0565b9150506060830151848203606086015261149382826113d1565b9150508091505092915050565b600060208201905081810360008301526114ba818461142f565b905092915050565b6114cb816111ff565b82525050565b60006020820190506114e660008301846114c2565b92915050565b600481106114f957600080fd5b50565b60008135905061150b816114ec565b92915050565b600060208284031215611527576115266111d5565b5b6000611535848285016114fc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611576838361126a565b60208301905092915050565b6000602082019050919050565b600061159a8261153e565b6115a48185611549565b93506115af8361155a565b8060005b838110156115e05781516115c7888261156a565b97506115d283611582565b9250506001810190506115b3565b5085935050505092915050565b60006020820190508181036000830152611607818461158f565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611651826112bf565b810181811067ffffffffffffffff821117156116705761166f611619565b5b80604052505050565b60006116836111cb565b905061168f8282611648565b919050565b600067ffffffffffffffff8211156116af576116ae611619565b5b6116b8826112bf565b9050602081019050919050565b82818337600083830152505050565b60006116e76116e284611694565b611679565b90508281526020810184848401111561170357611702611614565b5b61170e8482856116c5565b509392505050565b600082601f83011261172b5761172a61160f565b5b813561173b8482602086016116d4565b91505092915050565b600067ffffffffffffffff82111561175f5761175e611619565b5b602082029050602081019050919050565b600080fd5b600061178861178384611744565b611679565b905080838252602082019050602084028301858111156117ab576117aa611770565b5b835b818110156117d457806117c088826114fc565b8452602084019350506020810190506117ad565b5050509392505050565b600082601f8301126117f3576117f261160f565b5b8135611803848260208601611775565b91505092915050565b600080600060608486031215611825576118246111d5565b5b600084013567ffffffffffffffff811115611843576118426111da565b5b61184f86828701611716565b935050602084013567ffffffffffffffff8111156118705761186f6111da565b5b61187c86828701611716565b925050604084013567ffffffffffffffff81111561189d5761189c6111da565b5b6118a9868287016117de565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806118fa57607f821691505b60208210810361190d5761190c6118b3565b5b50919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611980602e83611913565b915061198b82611924565b604082019050919050565b600060208201905081810360008301526119af81611973565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006119f26119ed6119e8846119b6565b6119cd565b6119c0565b9050919050565b611a02816119d7565b82525050565b6000602082019050611a1d60008301846119f9565b92915050565b7f55736572206d7573742065786973740000000000000000000000000000000000600082015250565b6000611a59600f83611913565b9150611a6482611a23565b602082019050919050565b60006020820190508181036000830152611a8881611a4c565b9050919050565b7f55736572206973206e6f742070617274206f662074686174206c697374000000600082015250565b6000611ac5601d83611913565b9150611ad082611a8f565b602082019050919050565b60006020820190508181036000830152611af481611ab8565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b3f82611afb565b9150611b4a83611afb565b9250828203905081811115611b6257611b61611b05565b5b92915050565b6000611b7382611afb565b9150611b7e83611afb565b9250828201905080821115611b9657611b95611b05565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611bd682611afb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c0857611c07611b05565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f5573657220697320616c72656164792070617274206f662074686174206c697360008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c9e602183611913565b9150611ca982611c42565b604082019050919050565b60006020820190508181036000830152611ccd81611c91565b9050919050565b7f55736572206d7573742068617665207468617420726f6c650000000000000000600082015250565b6000611d0a601883611913565b9150611d1582611cd4565b602082019050919050565b60006020820190508181036000830152611d3981611cfd565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611da27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d65565b611dac8683611d65565b95508019841693508086168417925050509392505050565b6000611ddf611dda611dd584611afb565b6119cd565b611afb565b9050919050565b6000819050919050565b611df983611dc4565b611e0d611e0582611de6565b848454611d72565b825550505050565b600090565b611e22611e15565b611e2d818484611df0565b505050565b5b81811015611e5157611e46600082611e1a565b600181019050611e33565b5050565b601f821115611e9657611e6781611d40565b611e7084611d55565b81016020851015611e7f578190505b611e93611e8b85611d55565b830182611e32565b50505b505050565b600082821c905092915050565b6000611eb960001984600802611e9b565b1980831691505092915050565b6000611ed28383611ea8565b9150826002028217905092915050565b611eeb82611279565b67ffffffffffffffff811115611f0457611f03611619565b5b611f0e82546118e2565b611f19828285611e55565b600060209050601f831160018114611f4c5760008415611f3a578287015190505b611f448582611ec6565b865550611fac565b601f198416611f5a86611d40565b60005b82811015611f8257848901518255600182019150602085019450602081019050611f5d565b86831015611f9f5784890151611f9b601f891682611ea8565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612010602683611913565b915061201b82611fb4565b604082019050919050565b6000602082019050818103600083015261203f81612003565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061207c602083611913565b915061208782612046565b602082019050919050565b600060208201905081810360008301526120ab8161206f565b905091905056fea264697066735822122062e1a1346ae16a4baa49846a5f508bb8f1f50236a503e653ee7c0c3c36a06c8f64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063a15dcc8a11610066578063a15dcc8a146100fa578063a7f96f061461012a578063aeb5ec0114610146578063ebbbca2714610162578063f2fde38b1461019257610093565b80636f77926b14610098578063715018a6146100c85780638129fc1c146100d25780638da5cb5b146100dc575b600080fd5b6100b260048036038101906100ad919061123d565b6101ae565b6040516100bf91906114a0565b60405180910390f35b6100d061040e565b005b6100da610422565b005b6100e461055d565b6040516100f191906114d1565b60405180910390f35b610114600480360381019061010f9190611511565b610586565b60405161012191906115ed565b60405180910390f35b610144600480360381019061013f9190611511565b61064b565b005b610160600480360381019061015b9190611511565b610967565b005b61017c6004803603810190610177919061180c565b610b6d565b60405161018991906114a0565b60405180910390f35b6101ac60048036038101906101a7919061123d565b610c8e565b005b6101b66110ba565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610266906118e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610292906118e2565b80156102df5780601f106102b4576101008083540402835291602001916102df565b820191906000526020600020905b8154815290600101906020018083116102c257829003601f168201915b505050505081526020016002820180546102f8906118e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610324906118e2565b80156103715780601f1061034657610100808354040283529160200191610371565b820191906000526020600020905b81548152906001019060200180831161035457829003601f168201915b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156103fe57602002820191906000526020600020906000905b82829054906101000a900460ff1660038111156103d8576103d7611335565b5b815260200190600101906020826000010492830192600103820291508084116103b85790505b5050505050815250509050919050565b610416610d11565b6104206000610d8f565b565b60008060159054906101000a900460ff1615905080801561045557506001600060149054906101000a900460ff1660ff16105b80610484575061046430610e53565b15801561048357506001600060149054906101000a900460ff1660ff16145b5b6104c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ba90611996565b60405180910390fd5b6001600060146101000a81548160ff021916908360ff1602179055508015610501576001600060156101000a81548160ff0219169083151502179055505b801561055a5760008060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516105519190611a08565b60405180910390a15b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606002600083600381111561059f5761059e611335565b5b60038111156105b1576105b0611335565b5b815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561063f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105f5575b50505050509050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361071c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071390611a6f565b60405180910390fd5b6000806107298332610e76565b915091508061076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076490611adb565b60405180910390fd5b60008290505b60016002600086600381111561078c5761078b611335565b5b600381111561079e5761079d611335565b5b8152602001908152602001600020805490506107ba9190611b34565b8110156108e557600260008560038111156107d8576107d7611335565b5b60038111156107ea576107e9611335565b5b81526020019081526020016000206001826108059190611b68565b8154811061081657610815611b9c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002600086600381111561085857610857611335565b5b600381111561086a57610869611335565b5b8152602001908152602001600020828154811061088a57610889611b9c565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806108dd90611bcb565b915050610773565b50600260008460038111156108fd576108fc611335565b5b600381111561090f5761090e611335565b5b815260200190815260200160002080548061092d5761092c611c13565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b600073ffffffffffffffffffffffffffffffffffffffff16600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2f90611a6f565b60405180910390fd5b6000610a448232610e76565b9150508015610a88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7f90611cb4565b60405180910390fd5b610a928232610f96565b610ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac890611d20565b60405180910390fd5b60026000836003811115610ae857610ae7611335565b5b6003811115610afa57610af9611335565b5b8152602001908152602001600020329080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610b756110ba565b600060405180608001604052803273ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815250905080600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610c4c9190611ee2565b506040820151816002019081610c629190611ee2565b506060820151816003019080519060200190610c7f9291906110f8565b50905050809150509392505050565b610c96610d11565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfc90612026565b60405180910390fd5b610d0e81610d8f565b50565b610d196110b2565b73ffffffffffffffffffffffffffffffffffffffff16610d3761055d565b73ffffffffffffffffffffffffffffffffffffffff1614610d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8490612092565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008060008060005b60026000886003811115610e9657610e95611335565b5b6003811115610ea857610ea7611335565b5b815260200190815260200160002080549050811015610f86578573ffffffffffffffffffffffffffffffffffffffff1660026000896003811115610eef57610eee611335565b5b6003811115610f0157610f00611335565b5b81526020019081526020016000208281548110610f2157610f20611b9c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f735780925060019150610f86565b8080610f7e90611bcb565b915050610e7f565b5081819350935050509250929050565b6000806000905060005b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301805490508110156110a75784600381111561100057610fff611335565b5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301828154811061105457611053611b9c565b5b90600052602060002090602091828204019190069054906101000a900460ff16600381111561108657611085611335565b5b0361109457600191506110a7565b808061109f90611bcb565b915050610fa0565b508091505092915050565b600033905090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081525090565b82805482825590600052602060002090601f0160209004810192821561119d5791602002820160005b8382111561116e57835183826101000a81548160ff0219169083600381111561114d5761114c611335565b5b02179055509260200192600101602081600001049283019260010302611121565b801561119b5782816101000a81549060ff021916905560010160208160000104928301926001030261116e565b505b5090506111aa91906111ae565b5090565b5b808211156111c75760008160009055506001016111af565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061120a826111df565b9050919050565b61121a816111ff565b811461122557600080fd5b50565b60008135905061123781611211565b92915050565b600060208284031215611253576112526111d5565b5b600061126184828501611228565b91505092915050565b611273816111ff565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112b3578082015181840152602081019050611298565b60008484015250505050565b6000601f19601f8301169050919050565b60006112db82611279565b6112e58185611284565b93506112f5818560208601611295565b6112fe816112bf565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061137557611374611335565b5b50565b600081905061138682611364565b919050565b600061139682611378565b9050919050565b6113a68161138b565b82525050565b60006113b8838361139d565b60208301905092915050565b6000602082019050919050565b60006113dc82611309565b6113e68185611314565b93506113f183611325565b8060005b8381101561142257815161140988826113ac565b9750611414836113c4565b9250506001810190506113f5565b5085935050505092915050565b6000608083016000830151611447600086018261126a565b506020830151848203602086015261145f82826112d0565b9150506040830151848203604086015261147982826112d0565b9150506060830151848203606086015261149382826113d1565b9150508091505092915050565b600060208201905081810360008301526114ba818461142f565b905092915050565b6114cb816111ff565b82525050565b60006020820190506114e660008301846114c2565b92915050565b600481106114f957600080fd5b50565b60008135905061150b816114ec565b92915050565b600060208284031215611527576115266111d5565b5b6000611535848285016114fc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611576838361126a565b60208301905092915050565b6000602082019050919050565b600061159a8261153e565b6115a48185611549565b93506115af8361155a565b8060005b838110156115e05781516115c7888261156a565b97506115d283611582565b9250506001810190506115b3565b5085935050505092915050565b60006020820190508181036000830152611607818461158f565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611651826112bf565b810181811067ffffffffffffffff821117156116705761166f611619565b5b80604052505050565b60006116836111cb565b905061168f8282611648565b919050565b600067ffffffffffffffff8211156116af576116ae611619565b5b6116b8826112bf565b9050602081019050919050565b82818337600083830152505050565b60006116e76116e284611694565b611679565b90508281526020810184848401111561170357611702611614565b5b61170e8482856116c5565b509392505050565b600082601f83011261172b5761172a61160f565b5b813561173b8482602086016116d4565b91505092915050565b600067ffffffffffffffff82111561175f5761175e611619565b5b602082029050602081019050919050565b600080fd5b600061178861178384611744565b611679565b905080838252602082019050602084028301858111156117ab576117aa611770565b5b835b818110156117d457806117c088826114fc565b8452602084019350506020810190506117ad565b5050509392505050565b600082601f8301126117f3576117f261160f565b5b8135611803848260208601611775565b91505092915050565b600080600060608486031215611825576118246111d5565b5b600084013567ffffffffffffffff811115611843576118426111da565b5b61184f86828701611716565b935050602084013567ffffffffffffffff8111156118705761186f6111da565b5b61187c86828701611716565b925050604084013567ffffffffffffffff81111561189d5761189c6111da565b5b6118a9868287016117de565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806118fa57607f821691505b60208210810361190d5761190c6118b3565b5b50919050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611980602e83611913565b915061198b82611924565b604082019050919050565b600060208201905081810360008301526119af81611973565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006119f26119ed6119e8846119b6565b6119cd565b6119c0565b9050919050565b611a02816119d7565b82525050565b6000602082019050611a1d60008301846119f9565b92915050565b7f55736572206d7573742065786973740000000000000000000000000000000000600082015250565b6000611a59600f83611913565b9150611a6482611a23565b602082019050919050565b60006020820190508181036000830152611a8881611a4c565b9050919050565b7f55736572206973206e6f742070617274206f662074686174206c697374000000600082015250565b6000611ac5601d83611913565b9150611ad082611a8f565b602082019050919050565b60006020820190508181036000830152611af481611ab8565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b3f82611afb565b9150611b4a83611afb565b9250828203905081811115611b6257611b61611b05565b5b92915050565b6000611b7382611afb565b9150611b7e83611afb565b9250828201905080821115611b9657611b95611b05565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611bd682611afb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c0857611c07611b05565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f5573657220697320616c72656164792070617274206f662074686174206c697360008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c9e602183611913565b9150611ca982611c42565b604082019050919050565b60006020820190508181036000830152611ccd81611c91565b9050919050565b7f55736572206d7573742068617665207468617420726f6c650000000000000000600082015250565b6000611d0a601883611913565b9150611d1582611cd4565b602082019050919050565b60006020820190508181036000830152611d3981611cfd565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611da27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d65565b611dac8683611d65565b95508019841693508086168417925050509392505050565b6000611ddf611dda611dd584611afb565b6119cd565b611afb565b9050919050565b6000819050919050565b611df983611dc4565b611e0d611e0582611de6565b848454611d72565b825550505050565b600090565b611e22611e15565b611e2d818484611df0565b505050565b5b81811015611e5157611e46600082611e1a565b600181019050611e33565b5050565b601f821115611e9657611e6781611d40565b611e7084611d55565b81016020851015611e7f578190505b611e93611e8b85611d55565b830182611e32565b50505b505050565b600082821c905092915050565b6000611eb960001984600802611e9b565b1980831691505092915050565b6000611ed28383611ea8565b9150826002028217905092915050565b611eeb82611279565b67ffffffffffffffff811115611f0457611f03611619565b5b611f0e82546118e2565b611f19828285611e55565b600060209050601f831160018114611f4c5760008415611f3a578287015190505b611f448582611ec6565b865550611fac565b601f198416611f5a86611d40565b60005b82811015611f8257848901518255600182019150602085019450602081019050611f5d565b86831015611f9f5784890151611f9b601f891682611ea8565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612010602683611913565b915061201b82611fb4565b604082019050919050565b6000602082019050818103600083015261203f81612003565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061207c602083611913565b915061208782612046565b602082019050919050565b600060208201905081810360008301526120ab8161206f565b905091905056fea264697066735822122062e1a1346ae16a4baa49846a5f508bb8f1f50236a503e653ee7c0c3c36a06c8f64736f6c63430008150033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getUser(address)": {
        "notice": "Users"
      },
      "initialize()": {
        "notice": "Init"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 506,
        "contract": "contracts/HiveUsers.sol:HiveUsers",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/HiveUsers.sol:HiveUsers",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/HiveUsers.sol:HiveUsers",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5440,
        "contract": "contracts/HiveUsers.sol:HiveUsers",
        "label": "users",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(User)6328_storage)"
      },
      {
        "astId": 5446,
        "contract": "contracts/HiveUsers.sol:HiveUsers",
        "label": "usersByType",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_enum(ServiceType)6305,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(ServiceType)6305)dyn_storage": {
        "base": "t_enum(ServiceType)6305",
        "encoding": "dynamic_array",
        "label": "enum SharedStructs.ServiceType[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ServiceType)6305": {
        "encoding": "inplace",
        "label": "enum SharedStructs.ServiceType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(User)6328_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SharedStructs.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)6328_storage"
      },
      "t_mapping(t_enum(ServiceType)6305,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ServiceType)6305",
        "label": "mapping(enum SharedStructs.ServiceType => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(User)6328_storage": {
        "encoding": "inplace",
        "label": "struct SharedStructs.User",
        "members": [
          {
            "astId": 6319,
            "contract": "contracts/HiveUsers.sol:HiveUsers",
            "label": "userAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6321,
            "contract": "contracts/HiveUsers.sol:HiveUsers",
            "label": "metadataCID",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6323,
            "contract": "contracts/HiveUsers.sol:HiveUsers",
            "label": "url",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 6327,
            "contract": "contracts/HiveUsers.sol:HiveUsers",
            "label": "roles",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_enum(ServiceType)6305)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}